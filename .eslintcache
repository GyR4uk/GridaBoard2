[{"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\index.js":"1","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\serviceWorker.js":"2","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\client\\Root.js":"3","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\shared\\App.js":"4","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\styles\\theme.js":"5","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\rootReducer.ts":"6","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\reducers\\authorization.js":"7","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\reducers\\pointerTracer.js":"8","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\reducers\\ui.js":"9","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\reducers\\rotate.js":"10","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\index.tsx":"11","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\Post.tsx":"12","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\Posts.tsx":"13","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\About.tsx":"14","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\Home.tsx":"15","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\GoogleBtn.js":"16","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\Upload.js":"17","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Save\\SavePdf.tsx":"18","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\index.ts":"19","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\MappingStorage.ts":"20","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\CalibrationMenual.tsx":"21","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\PrintButton.tsx":"22","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\PageNumbering.tsx":"23","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\ZoomButton.tsx":"24","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\TracePointButton.tsx":"25","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\FullScreenButton.tsx":"26","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\penstorage\\InkStorage.ts":"27","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\BackgroundButton.tsx":"28","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\ConnectButton.tsx":"29","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\RotateButton.tsx":"30","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\FitButton.tsx":"31","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\ColorButtons.tsx":"32","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\PenTypeButton.tsx":"33","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\DefaultOption.ts":"34","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Locales\\i18n.ts":"35","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintDataTypes.ts":"36","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\CanvasColorConverter.ts":"37","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\cloud_util_func.ts":"38","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\Calibration\\CalibrationButton.tsx":"39","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\FileBrowserButton.tsx":"40","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintPdfButton.tsx":"41","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\index.ts":"42","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\Modal\\PrintOptionDialog.tsx":"43","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\penstorage\\EventSystem.ts":"44","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\styles\\ThemeManager.ts":"45","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\PenManager.ts":"46","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\index.ts":"47","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfManager.ts":"48","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\constants.ts":"49","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\FileBrowser.tsx":"50","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\Calibration\\CalibrationDialog.tsx":"51","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\types\\index.js":"52","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\noteserver\\PaperInfo.ts":"53","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\utils\\UtilsFunc.ts":"54","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\noteserver\\NoteserverClient.ts":"55","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintPdfMain.tsx":"56","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\index.ts":"57","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\MixedPageView.tsx":"58","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\Enums.ts":"59","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\PenBasedRenderer.tsx":"60","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\StorageRenderer.tsx":"61","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\neosmartpen.ts":"62","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\RenderWorkerBase.tsx":"63","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\SurfaceInfo.ts":"64","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfDocument.ts":"65","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\penstorage\\index.ts":"66","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\UtilFunc.ts":"67","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\utils\\JsUtils.js":"68","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeRasterizer.tsx":"69","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\SurfaceSplitter.ts":"70","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\NeoStroke.ts":"71","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\NeoDot.ts":"72","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PagesForPrint.tsx":"73","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pdf\\NeoPdfViewer.tsx":"74","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeConstans.ts":"75","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\DrawCurves.ts":"76","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\GridaController.tsx":"77","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\DataStructure\\Structures.ts":"78","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfPage.ts":"79","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\index.ts":"80","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm.ts":"81","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeFetcher.ts":"82","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\MappingItem.ts":"83","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\StorageRenderWorker.tsx":"84","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PageForPrint.tsx":"85","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_const.ts":"86","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeSurfaceDataJson.ts":"87","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pen_util_func.ts":"88","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pdf\\Page.tsx":"89","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_event.ts":"90","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_enum.ts":"91","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_base.ts":"92","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\index.ts":"93","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\PenBasedRenderWorker.tsx":"94","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\DataTypes.ts":"95","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\CoordinateTanslater.ts":"96","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\SolveTransform.ts":"97","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\EchelonMatrix.ts":"98","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\GaussianElimination.ts":"99","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PageOrientation.tsx":"100"},{"size":829,"mtime":1607317176919,"results":"101","hashOfConfig":"102"},{"size":5227,"mtime":1607317176967,"results":"103","hashOfConfig":"102"},{"size":930,"mtime":1607317176722,"results":"104","hashOfConfig":"102"},{"size":660,"mtime":1607317176968,"results":"105","hashOfConfig":"102"},{"size":1203,"mtime":1607317176984,"results":"106","hashOfConfig":"102"},{"size":454,"mtime":1607525905445,"results":"107","hashOfConfig":"102"},{"size":1129,"mtime":1607319735934,"results":"108","hashOfConfig":"102"},{"size":530,"mtime":1607317176974,"results":"109","hashOfConfig":"102"},{"size":4388,"mtime":1607317176975,"results":"110","hashOfConfig":"102"},{"size":465,"mtime":1607525905443,"results":"111","hashOfConfig":"102"},{"size":176,"mtime":1607333466116,"results":"112","hashOfConfig":"102"},{"size":198,"mtime":1607333540791,"results":"113","hashOfConfig":"102"},{"size":897,"mtime":1607331645289,"results":"114","hashOfConfig":"102"},{"size":378,"mtime":1607333516955,"results":"115","hashOfConfig":"102"},{"size":10364,"mtime":1607578114340,"results":"116","hashOfConfig":"102"},{"size":3793,"mtime":1607415111703,"results":"117","hashOfConfig":"102"},{"size":9744,"mtime":1607415111708,"results":"118","hashOfConfig":"102"},{"size":3155,"mtime":1607587286631,"results":"119","hashOfConfig":"102"},{"size":797,"mtime":1607417491135,"results":"120","hashOfConfig":"102"},{"size":6075,"mtime":1607424412795,"results":"121","hashOfConfig":"102"},{"size":703,"mtime":1607406204500,"results":"122","hashOfConfig":"102"},{"size":714,"mtime":1607347728021,"results":"123","hashOfConfig":"102"},{"size":2804,"mtime":1607347728018,"results":"124","hashOfConfig":"102"},{"size":797,"mtime":1607347728008,"results":"125","hashOfConfig":"102"},{"size":1606,"mtime":1607347728005,"results":"126","hashOfConfig":"102"},{"size":1488,"mtime":1607347727995,"results":"127","hashOfConfig":"102"},{"size":9839,"mtime":1607324815358,"results":"128","hashOfConfig":"102"},{"size":3001,"mtime":1607347727985,"results":"129","hashOfConfig":"102"},{"size":2784,"mtime":1607347727989,"results":"130","hashOfConfig":"102"},{"size":2252,"mtime":1607525905436,"results":"131","hashOfConfig":"102"},{"size":3656,"mtime":1607424412827,"results":"132","hashOfConfig":"102"},{"size":8836,"mtime":1607322959894,"results":"133","hashOfConfig":"102"},{"size":11492,"mtime":1607347727998,"results":"134","hashOfConfig":"102"},{"size":1278,"mtime":1607585780462,"results":"135","hashOfConfig":"102"},{"size":1201,"mtime":1607317176689,"results":"136","hashOfConfig":"102"},{"size":3653,"mtime":1607585780462,"results":"137","hashOfConfig":"102"},{"size":3260,"mtime":1607420106538,"results":"138","hashOfConfig":"102"},{"size":5911,"mtime":1607424412823,"results":"139","hashOfConfig":"102"},{"size":754,"mtime":1607333748074,"results":"140","hashOfConfig":"102"},{"size":2664,"mtime":1607347727977,"results":"141","hashOfConfig":"102"},{"size":7570,"mtime":1607412430347,"results":"142","hashOfConfig":"102"},{"size":1421,"mtime":1607333512688,"results":"143","hashOfConfig":"102"},{"size":15311,"mtime":1607406965202,"results":"144","hashOfConfig":"102"},{"size":3336,"mtime":1607324316034,"results":"145","hashOfConfig":"102"},{"size":5627,"mtime":1607329529982,"results":"146","hashOfConfig":"102"},{"size":7540,"mtime":1607525905438,"results":"147","hashOfConfig":"102"},{"size":220,"mtime":1607317176708,"results":"148","hashOfConfig":"102"},{"size":2396,"mtime":1607317176711,"results":"149","hashOfConfig":"102"},{"size":854,"mtime":1607333395769,"results":"150","hashOfConfig":"102"},{"size":2599,"mtime":1607317176709,"results":"151","hashOfConfig":"102"},{"size":5823,"mtime":1607329052826,"results":"152","hashOfConfig":"102"},{"size":24,"mtime":1607317594439,"results":"153","hashOfConfig":"102"},{"size":6464,"mtime":1607323506473,"results":"154","hashOfConfig":"102"},{"size":3268,"mtime":1607344776509,"results":"155","hashOfConfig":"102"},{"size":5612,"mtime":1607335184395,"results":"156","hashOfConfig":"102"},{"size":8817,"mtime":1607584957590,"results":"157","hashOfConfig":"102"},{"size":271,"mtime":1607317176924,"results":"158","hashOfConfig":"102"},{"size":4070,"mtime":1607392366609,"results":"159","hashOfConfig":"102"},{"size":863,"mtime":1607323077606,"results":"160","hashOfConfig":"102"},{"size":13265,"mtime":1607333846598,"results":"161","hashOfConfig":"102"},{"size":10895,"mtime":1607332706285,"results":"162","hashOfConfig":"102"},{"size":15251,"mtime":1607525905440,"results":"163","hashOfConfig":"102"},{"size":19057,"mtime":1607392965884,"results":"164","hashOfConfig":"102"},{"size":4893,"mtime":1607587012388,"results":"165","hashOfConfig":"102"},{"size":8049,"mtime":1607420165385,"results":"166","hashOfConfig":"102"},{"size":62,"mtime":1607317176937,"results":"167","hashOfConfig":"102"},{"size":733,"mtime":1607587286631,"results":"168","hashOfConfig":"102"},{"size":286,"mtime":1607317176960,"results":"169","hashOfConfig":"102"},{"size":20942,"mtime":1607586216130,"results":"170","hashOfConfig":"102"},{"size":7031,"mtime":1607585856542,"results":"171","hashOfConfig":"102"},{"size":2645,"mtime":1607323506478,"results":"172","hashOfConfig":"102"},{"size":528,"mtime":1607317176922,"results":"173","hashOfConfig":"102"},{"size":3469,"mtime":1607577937089,"results":"174","hashOfConfig":"102"},{"size":2857,"mtime":1607569301055,"results":"175","hashOfConfig":"102"},{"size":905,"mtime":1607317176702,"results":"176","hashOfConfig":"102"},{"size":7529,"mtime":1607324815358,"results":"177","hashOfConfig":"102"},{"size":4142,"mtime":1607347727982,"results":"178","hashOfConfig":"102"},{"size":3704,"mtime":1607317176685,"results":"179","hashOfConfig":"102"},{"size":4410,"mtime":1607577660089,"results":"180","hashOfConfig":"102"},{"size":27,"mtime":1607317176700,"results":"181","hashOfConfig":"102"},{"size":28941,"mtime":1607324178359,"results":"182","hashOfConfig":"102"},{"size":3606,"mtime":1607587286631,"results":"183","hashOfConfig":"102"},{"size":2343,"mtime":1607317176718,"results":"184","hashOfConfig":"102"},{"size":33055,"mtime":1607333846599,"results":"185","hashOfConfig":"102"},{"size":15618,"mtime":1607586469981,"results":"186","hashOfConfig":"102"},{"size":513,"mtime":1607317176933,"results":"187","hashOfConfig":"102"},{"size":2644,"mtime":1607317176705,"results":"188","hashOfConfig":"102"},{"size":1404,"mtime":1607317176930,"results":"189","hashOfConfig":"102"},{"size":8434,"mtime":1607396056444,"results":"190","hashOfConfig":"102"},{"size":1813,"mtime":1607324178360,"results":"191","hashOfConfig":"102"},{"size":461,"mtime":1607323792452,"results":"192","hashOfConfig":"102"},{"size":9241,"mtime":1607323753733,"results":"193","hashOfConfig":"102"},{"size":120,"mtime":1607317176683,"results":"194","hashOfConfig":"102"},{"size":14814,"mtime":1607325076022,"results":"195","hashOfConfig":"102"},{"size":3033,"mtime":1607415111692,"results":"196","hashOfConfig":"102"},{"size":7550,"mtime":1607587286632,"results":"197","hashOfConfig":"102"},{"size":3929,"mtime":1607329819676,"results":"198","hashOfConfig":"102"},{"size":1068,"mtime":1607317176680,"results":"199","hashOfConfig":"102"},{"size":2144,"mtime":1607317176681,"results":"200","hashOfConfig":"102"},{"size":2017,"mtime":1607585096656,"results":"201","hashOfConfig":"102"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},"5l6bpr",{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"236","usedDeprecatedRules":"204"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":9,"source":"241","usedDeprecatedRules":"215"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"266","usedDeprecatedRules":"215"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"361","usedDeprecatedRules":"215"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"372","usedDeprecatedRules":"215"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"215"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\index.js",[],[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\serviceWorker.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\client\\Root.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\shared\\App.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\styles\\theme.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\rootReducer.ts",[],[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\reducers\\authorization.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\reducers\\pointerTracer.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\reducers\\ui.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\reducers\\rotate.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\index.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\Post.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\Posts.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\About.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\Home.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\GoogleBtn.js",["410"],"/*global chrome*/\r\nimport React, {Component, useState, useEffect} from 'react';\r\nimport { gapi } from 'gapi-script';\r\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\r\n// import MappingStorage from \"../NcodePrintLib/SurfaceMapper/MappingStorage\";\r\n\r\nconst CLIENT_ID = '169738066451-5u100n2i6rko17jhmtpvq0bnjuedj7g4.apps.googleusercontent.com';\r\n\r\nclass GoogleBtn extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLogined:false,\r\n      accessToken:''\r\n    };\r\n\r\n    this.login = this.login.bind(this);\r\n    this.handleLoginFailure = this.handleLoginFailure.bind(this);\r\n    this.logout = this.logout.bind(this);\r\n    this.handleLogoutFailure = this.handleLogoutFailure.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // var self = this;\r\n    // gapi.load('auth2', function() { \r\n    //   var gauth = gapi.auth2.init({\r\n    //       client_id: {CLIENT_ID}\r\n    //   });\r\n      \r\n    //   gauth.then(function(){\r\n    //     console.log('gauth init success');\r\n    //       if (gauth.isSignedIn.get()) {\r\n    //         self.setState({isLogined : true});\r\n    //         console.log('로그인 상태');\r\n    //       } else {\r\n    //         self.setState({isLogined : false});\r\n    //         console.log('로그아웃 상태');\r\n    //       }\r\n    //     }, function(){\r\n    //     console.error('gauth init fail');\r\n    //   });\r\n    // });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // if (this.state.isLogined) {\r\n    //   this.readMappingInfo();\r\n    // }\r\n  }\r\n\r\n  readMappingInfo = () => {\r\n    gapi.load('client', function () {\r\n      gapi.client.load('drive', 'v2', async function () {\r\n        const fileResponse = await gapi.client.drive.files.list();\r\n        const files = fileResponse.result.items;\r\n\r\n        if (files && files.length > 0) {\r\n          for (let i = 0; i < files.length; i++) {\r\n            const file = files[i];\r\n            if (file.title === 'mappingInfo.json') {\r\n              const fileId = file.id;\r\n              const getFileRequest = gapi.client.drive.files.get({\r\n                fileId: fileId,\r\n                alt: 'media'\r\n              })\r\n\r\n              getFileRequest.then(await function(response) {\r\n                const currentMappingObj = JSON.parse(response.body);\r\n                const content = JSON.stringify(currentMappingObj);\r\n                console.log(content);\r\n              }, function(error) {\r\n                console.error(error)\r\n              })\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  login (resp) {\r\n    if(resp.accessToken) {\r\n      this.setState(state => ({\r\n        isLogined: true,\r\n        accessToken: resp.accessToken\r\n      }));\r\n    }\r\n  }\r\n\r\n  logout (resp) {\r\n    this.setState(state => ({\r\n      isLogined: false,\r\n      accessToken: ''\r\n    }));\r\n\r\n    var auth2 = gapi.auth2.getAuthInstance();\r\n    auth2.signOut().then(function () {\r\n      console.log('user log out ');\r\n    });\r\n    auth2.disconnect();\r\n  }\r\n\r\n  handleLoginFailure (resp) {\r\n    console.log('why login fail?');\r\n  }\r\n  handleLogoutFailure (resp) {\r\n    console.log('why logout fail?');\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        {this.state.isLogined ?\r\n          <GoogleLogout\r\n          clientId = {CLIENT_ID}\r\n          buttonText = 'Logout'\r\n          onLogoutSuccess={this.logout}\r\n          onFailure={this.handleLogoutFailure}\r\n          ></GoogleLogout>: \r\n          <GoogleLogin \r\n            clientId = {CLIENT_ID}\r\n            buttonText=\"Login\"\r\n            onSuccess={this.login}\r\n            onFailure={this.handleLoginFailure}\r\n            cookiePolicy={'single_host_origin'}\r\n            responseType='code,token'\r\n          />\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default GoogleBtn;","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\Upload.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Save\\SavePdf.tsx",["411","412","413","414","415","416","417","418","419"],"import { saveAs } from \"file-saver\";\r\nimport { degrees, PDFDocument, rgb, StandardFonts } from 'pdf-lib';\r\nimport InkStorage from \"../../neosmartpen/penstorage/InkStorage\";\r\nimport * as CONST from \"../../neosmartpen/constants\";\r\nimport * as UTIL from \"../../neosmartpen/utils/UtilsFunc\";\r\n\r\n// https://pdf-lib.js.org/\r\n\r\nconst inkSt = InkStorage.getInstance();\r\nexport async function savePDF(url) {\r\n  const existingPdfBytes = await fetch(url).then(res => res.arrayBuffer());\r\n  const pdfDoc = await PDFDocument.load(existingPdfBytes);\r\n  const pages = pdfDoc.getPages();\r\n  \r\n  //this.completedOnPage에는 페이지 순서대로 stroke array가 들어가는게 아니기 때문에 key값(sobp)으로 정렬\r\n  const sortStringKeys = (a, b) => a[0] > b[0] ? 1 : -1;\r\n  let sortedCompletedOnPage = new Map([...inkSt.completedOnPage].sort(sortStringKeys));\r\n\r\n  let i = 0;\r\n  for (let [key, NeoStrokes] of sortedCompletedOnPage.entries()) {\r\n    console.log(key + ' = ' + NeoStrokes);\r\n    let page = pages[i++];\r\n    let h = page.getHeight();\r\n    for (let j = 0; j <NeoStrokes.length; j++) {\r\n      let dotArr = NeoStrokes[j].dotArray;\r\n      let rgbStrArr = NeoStrokes[j].color.match(/\\d+/g);\r\n\r\n      let opacity = 1;\r\n      if (NeoStrokes[j].brushType === 1) {\r\n        opacity = 0.3;\r\n      }\r\n\r\n      for (let k = 0; k < dotArr.length; k++) {\r\n        let dot = dotArr[k];\r\n\r\n        page.drawCircle({\r\n          x: dot.x * 6.72,\r\n          y: dot.y * 6.72 - 2 * (dot.y*6.72 - h/2),\r\n          size: 2,\r\n          borderWidth: 1,\r\n          color: rgb(Number(rgbStrArr[0])/255, Number(rgbStrArr[1])/255, Number(rgbStrArr[2])/255),\r\n          opacity: opacity,\r\n          borderOpacity: 0,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  const pdfBytes = await pdfDoc.save();\r\n  var blob = new Blob([pdfBytes], {type: 'application/pdf'});\r\n  saveAs(blob, 'hi.pdf');\r\n}\r\n\r\nexport async function addGraphicAndSavePdf(url: string, saveName: string) {\r\n\r\n  const existingPdfBytes = await fetch(url).then(res => res.arrayBuffer())\r\n\r\n  const pdfDoc = await PDFDocument.load(existingPdfBytes)\r\n  const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n\r\n  const pages = pdfDoc.getPages()\r\n  const firstPage = pages[0]\r\n  const { height } = firstPage.getSize()\r\n  firstPage.drawText('This text was added with JavaScript!', {\r\n    x: 5,\r\n    y: height / 2 + 300,\r\n    size: 50,\r\n    font: helveticaFont,\r\n    color: rgb(0.95, 0.1, 0.1),\r\n    rotate: degrees(-45),\r\n  })\r\n\r\n\r\n  const svgPath =\r\n    'M 0,20 L 100,160 Q 130,200 150,120 C 190,-40 200,200 300,150 L 400,90'\r\n\r\n  firstPage.moveTo(100, firstPage.getHeight() - 5)\r\n\r\n  firstPage.moveDown(25)\r\n  firstPage.drawSvgPath(svgPath)\r\n\r\n  firstPage.moveDown(200)\r\n  firstPage.drawSvgPath(svgPath, { borderColor: rgb(0, 1, 0), borderWidth: 5 })\r\n\r\n  firstPage.moveDown(200)\r\n  firstPage.drawSvgPath(svgPath, { color: rgb(1, 0, 0) })\r\n\r\n  firstPage.moveDown(200)\r\n  firstPage.drawSvgPath(svgPath, { scale: 0.5 })\r\n\r\n\r\n  const pdfBytes = await pdfDoc.save();\r\n  console.log(pdfBytes);\r\n\r\n  const blob = new Blob([pdfBytes]);\r\n  saveAs(blob, saveName);\r\n\r\n  console.log(firstPage);\r\n\r\n}\r\n","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\index.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\MappingStorage.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\CalibrationMenual.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\PrintButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\PageNumbering.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\ZoomButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\TracePointButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\FullScreenButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\penstorage\\InkStorage.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\BackgroundButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\ConnectButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\RotateButton.tsx",["420"],"import React from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport '../../styles/buttons.css';\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport { Theme, Typography, withStyles } from '@material-ui/core';\r\nimport { RootState } from '../../store/rootReducer';\r\nimport { setRotate } from '../../store/reducers/rotate';\r\nimport $ from \"jquery\";\r\n\r\nconst RotateTooltip = withStyles((theme: Theme) => ({\r\n  tooltip: {\r\n      backgroundColor: '#f5f5f9',\r\n      color: 'rgba(0, 0, 0, 0.87)',\r\n      maxWidth: 240,\r\n      fontSize: theme.typography.pxToRem(12),\r\n      border: '1px solid #dadde9',\r\n  },\r\n}))(Tooltip);\r\n\r\nconst setEnable = () => {\r\n  var $elem = $(\"#btn_rotate\").find(\".c2\");\r\n  if ($elem.hasClass(\"checked\")) {\r\n      $elem.removeClass(\"checked\");\r\n  } else {\r\n      $elem.addClass(\"checked\");\r\n  }\r\n}\r\n\r\nconst RotateButton = () => {\r\n  const isRotate = useSelector((state:RootState) => state.rotate.isRotate)\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleRotate = () => {\r\n    dispatch(setRotate(!isRotate));\r\n    setEnable();\r\n  }\r\n\r\n  return (\r\n    <div className=\"btn-group dropright\" role=\"group\">\r\n    <button type=\"button\" id=\"btn_rotate\" title=\"Rotate\" className=\"btn btn-neo btn-neo-vertical\"\r\n    onClick = {() => onToggleRotate()}>\r\n      <RotateTooltip placement=\"left\" title={\r\n          <React.Fragment>\r\n              <Typography color=\"inherit\">Rotate</Typography>\r\n              <em>{\"종이 또는 스마트 플레이트의 입력이 회전되어 반영될지 아닐지를 선택합니다.\"}</em>\r\n              <br></br>\r\n              <b>{\"TAB 가로쓰기/세로쓰기 전환\"}</b>\r\n          </React.Fragment>\r\n              }>\r\n          <div className=\"c2\">\r\n            <img src=\"../../icons/icon_portrait_n.png\" className=\"toggle-off normal-image\"></img>\r\n            <img src=\"../../icons/icon_portrait_p.png\" className=\"toggle-off hover-image\"></img>\r\n            <img src=\"../../icons/icon_landscape_n.png\" className=\"toggle-on normal-image\"></img>\r\n            <img src=\"../../icons/icon_landscape_p.png\" className=\"toggle-on hover-image\"></img>\r\n          </div>\r\n      </RotateTooltip>\r\n    </button>\r\n  </div>\r\n    );\r\n}\r\nexport default RotateButton;","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\FitButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\ColorButtons.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\PenTypeButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\DefaultOption.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Locales\\i18n.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintDataTypes.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\CanvasColorConverter.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\cloud_util_func.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\Calibration\\CalibrationButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\FileBrowserButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintPdfButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\index.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\Modal\\PrintOptionDialog.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\penstorage\\EventSystem.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\styles\\ThemeManager.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\PenManager.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\index.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfManager.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\constants.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\FileBrowser.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\Calibration\\CalibrationDialog.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\types\\index.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\noteserver\\PaperInfo.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\utils\\UtilsFunc.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\noteserver\\NoteserverClient.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintPdfMain.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\index.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\MixedPageView.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\Enums.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\PenBasedRenderer.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\StorageRenderer.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\neosmartpen.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\RenderWorkerBase.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\SurfaceInfo.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfDocument.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\penstorage\\index.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\UtilFunc.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\utils\\JsUtils.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeRasterizer.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\SurfaceSplitter.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\NeoStroke.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\NeoDot.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PagesForPrint.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pdf\\NeoPdfViewer.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeConstans.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\DrawCurves.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\GridaController.tsx",["421","422","423"],"import React, { Component } from 'react';\r\n\r\n// const loadXMLDoc = () => {\r\n//   var xmlhttp = new XMLHttpRequest();\r\n//   xmlhttp.onreadystatechange = function() {\r\n//     if (this.readyState == 4 && this.status == 200) {\r\n//       myFunction(this);\r\n//     }\r\n//   };\r\n//   // xmlhttp.open(\"GET\", \"cd_catalog.xml\", true);\r\n//   xmlhttp.open(\"GET\", \"note_1116.xml\", true);\r\n//   xmlhttp.send();\r\n// }\r\n\r\n// const myFunction = (xml) => {\r\n//   var x = [], y = [], width = [], height = [], command = [], xmlDoc, txt, symbol;\r\n//   xmlDoc = xml.responseXML;\r\n//   txt = \"\";\r\n//   symbol = xmlDoc.getElementsByTagName(\"symbol\");\r\n//   for(var i = 0; i < 100; i++) {\r\n//     // x[i] = symbol[i].getAttribute(\"x\");\r\n//     // y[i] = symbol[i].getAttribute(\"y\");\r\n//     // width[i] = symbol[i].getAttribute(\"width\");\r\n//     // height[i] = symbol[i].getAttribute(\"height\");\r\n\r\n//     // if (x[i] === x[0] || y[i] === y[0] || width[i] === width[0] || height[i] === height[0]) {\r\n//       command[i] = xmlDoc.getElementsByTagName(\"command\")[i].getAttribute(\"param\");\r\n//       txt = txt + command[i] + '<br>';\r\n//       document.getElementById(\"demo\").innerHTML = txt;\r\n//     // }\r\n//   }\r\n//   // x = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"x\");\r\n//   // y = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"y\");\r\n//   // width = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"width\");\r\n//   // height = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"height\");\r\n//   // if (x[] === \"78.3807\" || y === \"135.495\" || width === \"27.494\" || height === \"26.2788\") {\r\n//     // command = xmlDoc.getElementsByTagName(\"command\")[0].getAttribute(\"param\");\r\n//   // }\r\n//   // y = x.getAttribute(\"param\");\r\n//   // for (i = 0; i< x.length; i++) {\r\n//   //   // txt += y[i].childNodes[0].nodeValue + \"<br>\";\r\n//   //   txt += x[i] + \"<br>\";\r\n//   // } \r\n//   // txt = command;\r\n//   // document.getElementById(\"demo\").innerHTML = txt;\r\n// }\r\n\r\nclass GridaController extends Component {\r\n  static loadXMLDoc = () => {\r\n    var xmlhttp = new XMLHttpRequest();\r\n    xmlhttp.onreadystatechange = function() {\r\n      if (this.readyState == 4 && this.status == 200) {\r\n        GridaController.myFunction(this);\r\n      }\r\n    };\r\n    // xmlhttp.open(\"GET\", \"cd_catalog.xml\", true);\r\n    xmlhttp.open(\"GET\", \"note_1116.xml\", true);\r\n    xmlhttp.send();\r\n  }\r\n  \r\n  static myFunction = (xml: any) => {\r\n    var x = [], y = [], width = [], height = [], command = [], xmlDoc, txt, symbol;\r\n    xmlDoc = xml.responseXML;\r\n    txt = \"\";\r\n    symbol = xmlDoc.getElementsByTagName(\"symbol\");\r\n    for(var i = 0; i < 100; i++) {\r\n      // x[i] = symbol[i].getAttribute(\"x\");\r\n      // y[i] = symbol[i].getAttribute(\"y\");\r\n      // width[i] = symbol[i].getAttribute(\"width\");\r\n      // height[i] = symbol[i].getAttribute(\"height\");\r\n  \r\n      // if (x[i] === x[0] || y[i] === y[0] || width[i] === width[0] || height[i] === height[0]) {\r\n        command[i] = xmlDoc.getElementsByTagName(\"command\")[i].getAttribute(\"param\");\r\n        txt = txt + command[i] + '<br>';\r\n        document.getElementById(\"demo\").innerHTML = txt;\r\n      // }\r\n    }\r\n    // x = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"x\");\r\n    // y = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"y\");\r\n    // width = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"width\");\r\n    // height = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"height\");\r\n    // if (x[] === \"78.3807\" || y === \"135.495\" || width === \"27.494\" || height === \"26.2788\") {\r\n      // command = xmlDoc.getElementsByTagName(\"command\")[0].getAttribute(\"param\");\r\n    // }\r\n    // y = x.getAttribute(\"param\");\r\n    // for (i = 0; i< x.length; i++) {\r\n    //   // txt += y[i].childNodes[0].nodeValue + \"<br>\";\r\n    //   txt += x[i] + \"<br>\";\r\n    // } \r\n    // txt = command;\r\n    // document.getElementById(\"demo\").innerHTML = txt;\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button type=\"button\" onClick={GridaController.loadXMLDoc}>grida board controller</button>\r\n\r\n        <p id=\"demo\"></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GridaController;","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\DataStructure\\Structures.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfPage.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\index.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeFetcher.ts",["424","425"],"import { IPageSOBP } from \"../DataStructure/Structures\";\r\nimport * as Zlib from \"zlib\";\r\nimport { INcodeSurfaceDesc } from \"./SurfaceDataTypes\";\r\nimport { getNPaperInfo, isSamePage } from \"./SurfaceInfo\";\r\n\r\n\r\n/**\r\n * Class\r\n */\r\nexport default class NcodeFetcher {\r\n  private codeText: string = \"\";\r\n  private fetchPromise: Promise<string> = Promise.resolve(\"\");\r\n  pageInfo: IPageSOBP;\r\n\r\n  constructor(pageInfo: IPageSOBP) {\r\n    this.pageInfo = pageInfo;\r\n    this.fetchPromise = this.fetchNcodeData(pageInfo);\r\n    this.fetchPromise.then(txt => this.codeText = txt);\r\n  }\r\n\r\n\r\n  /**\r\n   * 코드 정보를 받아온다\r\n   * 코드 정보를 받아올 때 나중에는 x margin, y margin도 서버에서 받아오게 해야 한다 2020/11/26\r\n   * @param pageInfo\r\n   */\r\n  public getNcodeData = async (pageInfo: IPageSOBP): Promise<INcodeSurfaceDesc> => {\r\n    // glyph text를 받아 온다.\r\n    if (isSamePage(this.pageInfo, pageInfo)) {\r\n      console.log(\"reuse downloaded glyph data file\");\r\n      const txt = await this.fetchPromise;\r\n      this.codeText = txt;\r\n    }\r\n    else {\r\n      console.log(\"download glyph data file\");\r\n      const promise = this.fetchNcodeData(pageInfo);\r\n      this.fetchPromise = promise;\r\n      const txt = await this.fetchPromise;\r\n\r\n      this.pageInfo = pageInfo;\r\n      this.codeText = txt;\r\n    }\r\n\r\n    const result: INcodeSurfaceDesc = getNPaperInfo(pageInfo);\r\n    result.glyphData = this.codeText;\r\n\r\n    return result;\r\n  }\r\n\r\n\r\n  private fetchNcodeData = async (pageInfo: IPageSOBP): Promise<string> => {\r\n    return new Promise(async (resolve, reject) => {\r\n      // console.log(`[fetch] ${pageInfo.section}.${pageInfo.owner}.${pageInfo.book}.${pageInfo.page}`);\r\n      const url = this.getRawCodeDataUrl(pageInfo);\r\n\r\n      const blob = await fetch(url).then((r) => {\r\n\r\n        if (r.ok) {\r\n          return r.blob();\r\n        }\r\n\r\n        resolve(\"\");\r\n      });\r\n\r\n      function gunzipCallback(decompressed) {\r\n        // console.log(decompressed);\r\n        const txt = new TextDecoder(\"utf-8\").decode(decompressed);\r\n        resolve(txt);\r\n      }\r\n\r\n      if (blob != null) {\r\n        try {\r\n          const buffer = await blob.arrayBuffer();\r\n          const u8buf = new Uint8Array(buffer);\r\n          // eslint-disable-next-line\r\n          const gunzip = new Zlib.gunzip(u8buf, (err, result) => {\r\n            // console.error(err);\r\n            if (err) {\r\n              console.log(err);\r\n              resolve(\"\");\r\n            }\r\n            gunzipCallback(result);\r\n          });\r\n        } catch (e) {\r\n          resolve(\"\");\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  private getAbsoluteURL = (base: string, relative: string): string => {\r\n    const stack = base.split(\"/\");\r\n    const parts = relative.split(\"/\");\r\n\r\n    stack.pop(); // remove current file name (or empty string)\r\n\r\n    // (omit if \"base\" is the current folder without trailing slash)\r\n    for (let i = 0; i < parts.length; i++) {\r\n      if (parts[i] === \".\") continue;\r\n      if (parts[i] === \"..\") stack.pop();\r\n      else stack.push(parts[i]);\r\n    }\r\n    return stack.join(\"/\");\r\n  }\r\n\r\n\r\n  private getRawCodeDataUrl = (pageInfo: IPageSOBP): string => {\r\n\r\n    const { section, owner, book, page } = pageInfo;\r\n\r\n    const ncode_idx = \"s\" + section + \"-o\" + owner + \"-b\" + book + \"-p\" + page;\r\n    const dir_name = \"s\" + section + \"-o\" + owner + \"-b\" + book;\r\n\r\n    const filename = \"./ncode_data/\" + dir_name + \"/\" + ncode_idx + \".code.gz\";\r\n    const doc_url = document.location.href;\r\n    const url = this.getAbsoluteURL(doc_url, filename);\r\n\r\n    return url;\r\n  }\r\n}","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\MappingItem.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\StorageRenderWorker.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PageForPrint.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_const.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeSurfaceDataJson.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pen_util_func.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pdf\\Page.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_event.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_enum.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_base.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\index.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\PenBasedRenderWorker.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\DataTypes.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\CoordinateTanslater.ts",["426"],"import { IPoint } from \"../DataStructure/Structures\";\r\nimport * as Solve from \"./SolveTransform\";\r\nimport { TransformPoints, TransformPointPairs, TransformParameters, IMappingParams } from \"./DataTypes\";\r\nimport { MappingItem } from \"../SurfaceMapper/MappingItem\";\r\nimport { sprintf } from \"sprintf-js\";\r\n\r\nconst solveAffine = Solve.solveAffine;\r\nconst solveHomography = Solve.solveHomography;\r\nconst applyTransform = Solve.applyTransform;\r\n\r\n\r\n/** for debugging */\r\nlet _srcPts: TransformPoints = null;\r\nlet _dstPts: TransformPoints = null;\r\nlet _params: TransformParameters = null;\r\n\r\n/**\r\n * -----------------------------------------------------------------------------------\r\n * A. 우리는 다음과 같은 좌표계를 쓴다.\r\n *\r\n * 1) Ncode 좌표계\r\n * 2) PDF 좌표계\r\n * 3) Canvas 좌표계\r\n * 4) 화면 좌표계\r\n *\r\n *\r\n * 1) NU(Ncode Unit): 56/600 DPI, Ncode 좌표계는 펜에서 검출되는 좌표계를 기준으로 한다.\r\n *    - 600DPI에서 8 pixel 거리를 가지는 7개 glyph 가 하나의 Ncode\r\n *    - 1 NU = 7(glyphs) * 8(pixels) / 600 (DPI) = 56/600 Inch = 약 2.370666667 mm\r\n *\r\n *\r\n * 2) PU(Pdf Unit): 72 DPI, PDF 좌표계는 PdfJs.getViewport({scale:1})을 통해서 나오는 크기를 기준으로 하는 좌표계\r\n *    - PDF가 설계될 당시 1:1 scale의 좌표계는 72DPI\r\n *    - 1 PU = 1 pixel @ 72DPI = 1(pixel) / 72(DPI) = 1/72 Inch = 약 0.352777778 mm\r\n *\r\n * 3) CU(Canvas Unit): 96 DPI, HTML의 CSS에 의해 만들어진 좌표\r\n *    - 1 CU = 1pixel @ 96DPI = 1(pixel) / 96(DPI) = 1/96 Inch = 약 0.010416667 mm\r\n *\r\n * 4) SU(Screen Unit): 화면의 zoom과 offset에 따라 달라짐\r\n *    - zoom은 CU와 1:1일 때, 100%\r\n *    - fabric의 canvas.zoom, offset_x, offset_y에 의해 계산이 달라짐\r\n *\r\n * -----------------------------------------------------------------------------------\r\n * B. 1:1일 때, 계산 방법\r\n *\r\n * 1) NU to PU\r\n *    pu = nu * (56/600) / (1/72) = nu * 6.72\r\n *\r\n * 2) PU to CU\r\n *    cu = pu * (1/72) / (1/96) = pu * 4 / 3\r\n *\r\n * 3) NU to CU\r\n *    cu = nu * 6.72 * (4/3) = nu * 8.96\r\n *\r\n * 4) CU to SU(zoom, offset)\r\n *    su = zoom * CU + offset\r\n *\r\n * -----------------------------------------------------------------------------------\r\n * C. Transform matrix로 계산 방법\r\n *\r\n * 0) TransformMatrix를 구한다\r\n *    a) src points (Ncode Unit)의 4개 점 (affine에서는 3개 점)\r\n *    b) 각 src point에 해당하는 dst points (Pdf Unit)의 4개 점을 (affine에서는 3개 점)\r\n *    c) HomographyPoints (또는 AffinePoints)에 넣고\r\n *    d) solveHomography 또는 solveAffine으로 값을 구하고 TransformMatrix 타입의 리턴을\r\n *    e) 어딘가에 저장해 둔다. (예, transMtx)\r\n *\r\n * 1) pt in NU to pt' in PU\r\n *    pt' = applyTransform( pt, transMtx );\r\n *\r\n * 2) PU to CU\r\n *    - B-2)과 같다.\r\n *\r\n * 3) NU to CU\r\n *    - cu = applyTransform( nu, transMtx ) * 4 /3\r\n *\r\n * -----------------------------------------------------------------------------------\r\n * D. 코딩 시 변수 구별 원칙\r\n * 1) ptNu = pt at Ncode coordinate system\r\n * 2) ptPu = pt at Pdf Pixel coordinate system\r\n * 3) ptCu = pt at Fabric Canvas coordinate system\r\n * 4) ptSu = pt at screen coordinate system\r\n *\r\n *\r\n */\r\nexport default class CoordinateTanslater {\r\n  // private _params: TransformParameters = null;\r\n  // private _paramsReverse: TransformParameters = null;\r\n\r\n  private _mappingParams: IMappingParams = null;\r\n\r\n  constructor(arg: CoordinateTanslater | IMappingParams = null) {\r\n    if (arg) {\r\n      if (arg.hasOwnProperty(\"_mappingParams\")) {\r\n        const trans = arg as CoordinateTanslater;\r\n        const json = JSON.stringify(trans._mappingParams);\r\n        this._mappingParams = JSON.parse(json);\r\n        this.calcReverse();\r\n      }\r\n      else {\r\n        const params = arg as IMappingParams;\r\n        const json = JSON.stringify(params);\r\n        this._mappingParams = JSON.parse(json);\r\n        this.calcReverse();\r\n      }\r\n    }\r\n  }\r\n\r\n  get mappingParams() {\r\n    return this._mappingParams;\r\n  }\r\n\r\n  /**\r\n   * calculate transform parameters (reverse\r\n   * @param points\r\n   */\r\n  public calc = (mappingItem: MappingItem) => {\r\n    this._mappingParams = mappingItem._params;\r\n\r\n    const srcPts = mappingItem.srcPts;\r\n    const dstPts = mappingItem.dstPts;\r\n\r\n    _srcPts = mappingItem.srcPts;\r\n    _dstPts = mappingItem.dstPts;\r\n\r\n    /** src:NU, dst:PU */\r\n    const pts = {\r\n      src: { ...srcPts, },\r\n      dst: { ...dstPts, }\r\n    } as TransformPointPairs;\r\n\r\n    /** src:PU, dst:NU */\r\n    const ptsReverse = {\r\n      src: { ...dstPts, },\r\n      dst: { ...srcPts, }\r\n    } as TransformPointPairs;\r\n\r\n\r\n    if (srcPts.type === \"affine\") {\r\n      this._mappingParams.h = solveAffine(pts);  // NU -> PU\r\n      this._mappingParams.h_rev = solveAffine(ptsReverse);  // PU -> NU\r\n\r\n      _params = this._mappingParams.h;\r\n      return;\r\n    }\r\n    else if (srcPts.type === \"homography\") {\r\n      this._mappingParams.h = solveHomography(pts);  // NU -> PU\r\n      this._mappingParams.h_rev = solveHomography(ptsReverse);  // PU -> NU\r\n\r\n      _params = this._mappingParams.h;\r\n      return;\r\n    }\r\n\r\n    throw Error(\"CoordinateTanslater needs '3 or 4 pairs of points' to initiate class.\");\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   */\r\n  private calcReverse = () => {\r\n    // 아래는 임의의 숫자\r\n    const srcPts: TransformPoints = {\r\n      type: \"homography\",\r\n      unit: \"pu\",\r\n      pts: [\r\n        { x: 0, y: 0 },\r\n        { x: 100, y: 0 },\r\n        { x: 100, y: 100 },\r\n        { x: 0, y: 100 },\r\n      ]\r\n    };\r\n\r\n    // 정방향 파라메터로 역방향의 대상이 되는 점을 연산\r\n    const dstPts: TransformPoints = {\r\n      type: \"homography\",\r\n      unit: \"nu\",\r\n      pts: new Array(4),\r\n    };\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      const dstPt = this.NUtoPU(srcPts[i]);\r\n      dstPts[i] = dstPt;\r\n    }\r\n\r\n    /** src:PU, dst:NU */\r\n    const ptsReverse = {\r\n      src: { ...dstPts, },\r\n      dst: { ...srcPts, }\r\n    } as TransformPointPairs;\r\n\r\n    this._mappingParams.h_rev = solveHomography(ptsReverse);\r\n  }\r\n\r\n  public dump = (prefix: string) => {\r\n    const { a, b, c, d, e, f, g, h } = _params;\r\n    const sp = _srcPts.pts;\r\n    const dp = _dstPts.pts;\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      console.log(`[${prefix}] ${sprintf(\"(%6.1f, %6.1f) => (%5d, %5d)\", sp[i].x, sp[i].y, dp[i].x, dp[i].y)}`);\r\n\r\n    }\r\n\r\n\r\n    const first = sprintf(\"%7.1f %7.1f %7.1f\", a, b, c);\r\n    const second = sprintf(\"%7.2f %7.1f %7.1f\", d, e, f);\r\n    const thrid = sprintf(\"%7.1f %7.1f %7.1f\", g, h, 1);\r\n\r\n    console.log(`[${prefix}]`);\r\n    console.log(`[${prefix}]          | ${first} |`);\r\n    console.log(`[${prefix}]     H =  | ${second} |`);\r\n    console.log(`[${prefix}]          | ${thrid} |`);\r\n    console.log(`[${prefix}]`);\r\n  }\r\n\r\n  /**\r\n   * 계산된 변환행렬을 반환\r\n   *\r\n   * return {...this._params} 로 해야 하지 않을까?\r\n   * 이것 때문에 class가 메모리에 계속 남아 있으면 어떻게 하지?\r\n   */\r\n  public get params(): TransformParameters {\r\n    return this._mappingParams.h;\r\n  }\r\n\r\n  /**\r\n   * Ncode point to Pds point\r\n   * @param ptNu\r\n   */\r\n  public NUtoPU = (ptNu: IPoint): IPoint => {\r\n    const ptPu = applyTransform(ptNu, this._mappingParams.h);\r\n    return ptPu;\r\n  }\r\n\r\n  /**\r\n   * Pds point to Ncode point\r\n   * @param ptNu\r\n   */\r\n  public PUtoNU = (ptPu: IPoint): IPoint => {\r\n    const ptNu = applyTransform(ptPu, this._mappingParams.h_rev);\r\n    return ptNu;\r\n  }\r\n\r\n}\r\n","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\SolveTransform.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\EchelonMatrix.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\GaussianElimination.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PageOrientation.tsx",[],{"ruleId":"427","severity":1,"message":"428","line":99,"column":5,"nodeType":"429","messageId":"430","endLine":99,"endColumn":46,"fix":"431"},{"ruleId":"432","severity":1,"message":"433","line":17,"column":7,"nodeType":"434","messageId":"435","endLine":17,"endColumn":28,"fix":"436"},{"ruleId":"432","severity":1,"message":"437","line":20,"column":13,"nodeType":"434","messageId":"435","endLine":20,"endColumn":16,"fix":"438"},{"ruleId":"432","severity":1,"message":"439","line":20,"column":18,"nodeType":"434","messageId":"435","endLine":20,"endColumn":28,"fix":"440"},{"ruleId":"432","severity":1,"message":"441","line":22,"column":9,"nodeType":"434","messageId":"435","endLine":22,"endColumn":13,"fix":"442"},{"ruleId":"432","severity":1,"message":"443","line":23,"column":9,"nodeType":"434","messageId":"435","endLine":23,"endColumn":10,"fix":"444"},{"ruleId":"432","severity":1,"message":"445","line":25,"column":11,"nodeType":"434","messageId":"435","endLine":25,"endColumn":17,"fix":"446"},{"ruleId":"432","severity":1,"message":"447","line":26,"column":11,"nodeType":"434","messageId":"435","endLine":26,"endColumn":20,"fix":"448"},{"ruleId":"432","severity":1,"message":"449","line":34,"column":13,"nodeType":"434","messageId":"435","endLine":34,"endColumn":16,"fix":"450"},{"ruleId":"427","severity":1,"message":"428","line":50,"column":3,"nodeType":"429","messageId":"430","endLine":50,"endColumn":62,"fix":"451"},{"ruleId":"427","severity":1,"message":"428","line":21,"column":3,"nodeType":"429","messageId":"430","endLine":21,"endColumn":44,"fix":"452"},{"ruleId":"427","severity":1,"message":"428","line":50,"column":5,"nodeType":"429","messageId":"430","endLine":50,"endColumn":40,"fix":"453"},{"ruleId":"427","severity":1,"message":"428","line":62,"column":5,"nodeType":"429","messageId":"430","endLine":62,"endColumn":84,"fix":"454"},{"ruleId":"427","severity":1,"message":"428","line":66,"column":9,"nodeType":"429","messageId":"430","endLine":66,"endColumn":18,"fix":"455"},{"ruleId":"456","severity":1,"message":"457","line":11,"column":3,"nodeType":"458","messageId":"459","endLine":11,"endColumn":33,"fix":"460"},{"ruleId":"461","severity":1,"message":"462","line":52,"column":24,"nodeType":"434","messageId":"463","endLine":52,"endColumn":29},{"ruleId":"464","severity":1,"message":"465","line":94,"column":15,"nodeType":"466","messageId":"467","endLine":94,"endColumn":29},"no-var","Unexpected var, use let or const instead.","VariableDeclaration","unexpectedVar",{"range":"468","text":"469"},"prefer-const","'sortedCompletedOnPage' is never reassigned. Use 'const' instead.","Identifier","useConst",{"range":"470","text":"471"},"'key' is never reassigned. Use 'const' instead.",{"range":"472","text":"471"},"'NeoStrokes' is never reassigned. Use 'const' instead.",{"range":"472","text":"471"},"'page' is never reassigned. Use 'const' instead.",{"range":"473","text":"471"},"'h' is never reassigned. Use 'const' instead.",{"range":"474","text":"471"},"'dotArr' is never reassigned. Use 'const' instead.",{"range":"475","text":"471"},"'rgbStrArr' is never reassigned. Use 'const' instead.",{"range":"476","text":"471"},"'dot' is never reassigned. Use 'const' instead.",{"range":"477","text":"471"},{"range":"478","text":"469"},{"range":"479","text":"469"},{"range":"480","text":"469"},{"range":"481","text":"469"},{"range":"482","text":"469"},"@typescript-eslint/no-inferrable-types","Type string trivially inferred from a string literal, remove type annotation.","ClassProperty","noInferrableType",{"range":"483","text":"484"},"no-async-promise-executor","Promise executor functions should not be async.","async","no-prototype-builtins","Do not access Object.prototype method 'hasOwnProperty' from target object.","CallExpression","prototypeBuildIn",[2829,2832],"let",[718,721],"const",[828,831],[937,940],[965,968],[1048,1051],[1092,1095],[1306,1309],[1723,1726],[694,697],[2042,2045],[2418,2421],[2606,2609],[285,293],""]