[{"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\index.js":"1","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\serviceWorker.js":"2","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\client\\Root.js":"3","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\shared\\App.js":"4","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\styles\\theme.js":"5","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\store\\rootReducer.ts":"6","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\store\\reducers\\authorization.js":"7","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\store\\reducers\\pointerTracer.js":"8","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\store\\reducers\\ui.js":"9","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\pages\\index.js":"10","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\pages\\Posts.js":"11","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\pages\\Post.js":"12","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\pages\\About.js":"13","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\pages\\Home.tsx":"14","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\PenManager.ts":"15","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\penstorage\\InkStorage.ts":"16","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\PenTypeButton.tsx":"17","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\ConnectButton.tsx":"18","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\RotateButton.tsx":"19","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\FitButton.tsx":"20","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\ZoomButton.tsx":"21","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\BackgroundButton.tsx":"22","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\navbar\\ColorButtons.tsx":"23","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\FullScreenButton.tsx":"24","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\TracePointButton.tsx":"25","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\navbar\\PageNumbering.tsx":"26","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\navbar\\PrintButton.tsx":"27","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\navbar\\FileLoad.tsx":"28","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\navbar\\UpperNav.tsx":"29","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\navbar\\CalibrationMenual.tsx":"30","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\index.js":"31","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\neosmartpen.ts":"32","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\index.ts":"33","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\styles\\ThemeManager.ts":"34","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\penstorage\\EventSystem.ts":"35","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\navbar\\Upload.js":"36","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\DataStructure\\Enums.ts":"37","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\constants.js":"38","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\StorageRenderer.js":"39","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\noteserver\\NoteserverClient.ts":"40","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\noteserver\\PaperInfo.ts":"41","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\utils\\UtilsFunc.ts":"42","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\MixedPageView.tsx":"43","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\types\\index.js":"44","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\PenBasedRenderer.tsx":"45","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\RenderWorkerBase.tsx":"46","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\DefaultOption.ts":"47","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\CanvasColorConverter.ts":"48","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintDataTypes.ts":"49","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\DataStructure\\index.ts":"50","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Locales\\i18n.ts":"51","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PdfPrintButton.tsx":"52","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\Modal\\PrintOptionDialog.tsx":"53","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\FileBrowserButton.tsx":"54","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Save\\SavePdf.tsx":"55","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\Calibration\\CalibrationButton.tsx":"56","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\StorageRenderWorker.js":"57","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\utils\\JsUtils.js":"58","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\penstorage\\index.ts":"59","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\types\\typedef.js":"60","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\DrawCurves.ts":"61","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\DataStructure\\NeoStroke.ts":"62","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\DataStructure\\NeoDot.ts":"63","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\PenBasedRenderWorker.tsx":"64","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfManager.ts":"65","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintPdfMain.tsx":"66","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\FileBrowser.tsx":"67","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\Calibration\\CalibrationDialog.tsx":"68","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfDocument.ts":"69","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\UtilFunc.ts":"70","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\SurfaceSplitter.ts":"71","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PagesForPrint.tsx":"72","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PageOrientation.jsx":"73","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\MappingItem.ts":"74","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\MappingStorage.ts":"75","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfPage.ts":"76","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\DataStructure\\Structures.ts":"77","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\index.ts":"78","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\SurfaceInfo.ts":"79","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeRasterizer.tsx":"80","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PageForPrint.tsx":"81","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeConstans.ts":"82","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\index.ts":"83","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeSurfaceDataJson.ts":"84","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeFetcher.ts":"85","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\index.ts":"86","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\DataTypes.ts":"87","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\CoordinateTanslater.ts":"88","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\SolveTransform.ts":"89","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\EchelonMatrix.ts":"90","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\GaussianElimination.ts":"91","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pdf\\NeoPdfViewer.tsx":"92","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pdf\\Page.tsx":"93","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm.ts":"94","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_enum.ts":"95","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_const.ts":"96","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_event.ts":"97","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_base.ts":"98","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\pen_util_func.ts":"99"},{"size":829,"mtime":1605663982913,"results":"100","hashOfConfig":"101"},{"size":5227,"mtime":1605663982927,"results":"102","hashOfConfig":"101"},{"size":930,"mtime":1607305096530,"results":"103","hashOfConfig":"101"},{"size":660,"mtime":1606197561160,"results":"104","hashOfConfig":"101"},{"size":1203,"mtime":1607303952074,"results":"105","hashOfConfig":"101"},{"size":402,"mtime":1606289256914,"results":"106","hashOfConfig":"101"},{"size":1129,"mtime":1605663982929,"results":"107","hashOfConfig":"101"},{"size":530,"mtime":1606286187810,"results":"108","hashOfConfig":"101"},{"size":4388,"mtime":1605663982929,"results":"109","hashOfConfig":"101"},{"size":176,"mtime":1607303970849,"results":"110","hashOfConfig":"101"},{"size":822,"mtime":1607303978634,"results":"111","hashOfConfig":"101"},{"size":139,"mtime":1607304025040,"results":"112","hashOfConfig":"101"},{"size":303,"mtime":1607304413151,"results":"113","hashOfConfig":"101"},{"size":9044,"mtime":1607309261846,"results":"114","hashOfConfig":"101"},{"size":7623,"mtime":1607306145293,"results":"115","hashOfConfig":"101"},{"size":9393,"mtime":1607304733750,"results":"116","hashOfConfig":"101"},{"size":11766,"mtime":1606180964701,"results":"117","hashOfConfig":"101"},{"size":2994,"mtime":1607310860366,"results":"118","hashOfConfig":"101"},{"size":1751,"mtime":1606180256118,"results":"119","hashOfConfig":"101"},{"size":4150,"mtime":1607312397412,"results":"120","hashOfConfig":"101"},{"size":823,"mtime":1605694279970,"results":"121","hashOfConfig":"101"},{"size":3111,"mtime":1606270292271,"results":"122","hashOfConfig":"101"},{"size":8836,"mtime":1607306145293,"results":"123","hashOfConfig":"101"},{"size":1514,"mtime":1606281133625,"results":"124","hashOfConfig":"101"},{"size":1676,"mtime":1606289743717,"results":"125","hashOfConfig":"101"},{"size":2848,"mtime":1606180256120,"results":"126","hashOfConfig":"101"},{"size":736,"mtime":1605689571542,"results":"127","hashOfConfig":"101"},{"size":1497,"mtime":1606180256119,"results":"128","hashOfConfig":"101"},{"size":690,"mtime":1607152027693,"results":"129","hashOfConfig":"101"},{"size":725,"mtime":1605860961588,"results":"130","hashOfConfig":"101"},{"size":1445,"mtime":1606199153995,"results":"131","hashOfConfig":"101"},{"size":14472,"mtime":1607306964251,"results":"132","hashOfConfig":"101"},{"size":808,"mtime":1607303826317,"results":"133","hashOfConfig":"101"},{"size":5882,"mtime":1606881057439,"results":"134","hashOfConfig":"101"},{"size":3108,"mtime":1607304745062,"results":"135","hashOfConfig":"101"},{"size":9443,"mtime":1607154594587,"results":"136","hashOfConfig":"101"},{"size":813,"mtime":1607305081864,"results":"137","hashOfConfig":"101"},{"size":854,"mtime":1607305032070,"results":"138","hashOfConfig":"101"},{"size":14473,"mtime":1606196676864,"results":"139","hashOfConfig":"101"},{"size":5269,"mtime":1607305024467,"results":"140","hashOfConfig":"101"},{"size":6111,"mtime":1607305021191,"results":"141","hashOfConfig":"101"},{"size":2892,"mtime":1607304427518,"results":"142","hashOfConfig":"101"},{"size":4048,"mtime":1607307013611,"results":"143","hashOfConfig":"101"},{"size":21,"mtime":1607304451982,"results":"144","hashOfConfig":"101"},{"size":12851,"mtime":1607304601096,"results":"145","hashOfConfig":"101"},{"size":17808,"mtime":1607304571875,"results":"146","hashOfConfig":"101"},{"size":870,"mtime":1607303826305,"results":"147","hashOfConfig":"101"},{"size":3185,"mtime":1607303826309,"results":"148","hashOfConfig":"101"},{"size":2399,"mtime":1607303826308,"results":"149","hashOfConfig":"101"},{"size":257,"mtime":1607305042055,"results":"150","hashOfConfig":"101"},{"size":1201,"mtime":1607303826305,"results":"151","hashOfConfig":"101"},{"size":7837,"mtime":1607303826307,"results":"152","hashOfConfig":"101"},{"size":15313,"mtime":1607303826306,"results":"153","hashOfConfig":"101"},{"size":1595,"mtime":1607303826313,"results":"154","hashOfConfig":"101"},{"size":1408,"mtime":1607303826314,"results":"155","hashOfConfig":"101"},{"size":1156,"mtime":1607303826315,"results":"156","hashOfConfig":"101"},{"size":31133,"mtime":1606196676864,"results":"157","hashOfConfig":"101"},{"size":286,"mtime":1607304437359,"results":"158","hashOfConfig":"101"},{"size":62,"mtime":1605663982920,"results":"159","hashOfConfig":"101"},{"size":6008,"mtime":1607304441504,"results":"160","hashOfConfig":"101"},{"size":7175,"mtime":1607304673462,"results":"161","hashOfConfig":"101"},{"size":2560,"mtime":1607305062486,"results":"162","hashOfConfig":"101"},{"size":507,"mtime":1607305075485,"results":"163","hashOfConfig":"101"},{"size":14417,"mtime":1607304660856,"results":"164","hashOfConfig":"101"},{"size":2396,"mtime":1607303826314,"results":"165","hashOfConfig":"101"},{"size":8496,"mtime":1607303826308,"results":"166","hashOfConfig":"101"},{"size":2599,"mtime":1607303826313,"results":"167","hashOfConfig":"101"},{"size":5797,"mtime":1607303826315,"results":"168","hashOfConfig":"101"},{"size":8000,"mtime":1607303826313,"results":"169","hashOfConfig":"101"},{"size":739,"mtime":1607303826308,"results":"170","hashOfConfig":"101"},{"size":6983,"mtime":1607303826312,"results":"171","hashOfConfig":"101"},{"size":3638,"mtime":1607303826307,"results":"172","hashOfConfig":"101"},{"size":322,"mtime":1607303826307,"results":"173","hashOfConfig":"101"},{"size":2343,"mtime":1607303826316,"results":"174","hashOfConfig":"101"},{"size":4732,"mtime":1607303826317,"results":"175","hashOfConfig":"101"},{"size":4369,"mtime":1607303826314,"results":"176","hashOfConfig":"101"},{"size":3704,"mtime":1607303826303,"results":"177","hashOfConfig":"101"},{"size":27,"mtime":1607303826309,"results":"178","hashOfConfig":"101"},{"size":4656,"mtime":1607303826312,"results":"179","hashOfConfig":"101"},{"size":19815,"mtime":1607303826311,"results":"180","hashOfConfig":"101"},{"size":15365,"mtime":1607303826306,"results":"181","hashOfConfig":"101"},{"size":905,"mtime":1607303826310,"results":"182","hashOfConfig":"101"},{"size":120,"mtime":1607303826302,"results":"183","hashOfConfig":"101"},{"size":2644,"mtime":1607303826311,"results":"184","hashOfConfig":"101"},{"size":3610,"mtime":1607303826310,"results":"185","hashOfConfig":"101"},{"size":220,"mtime":1607303826312,"results":"186","hashOfConfig":"101"},{"size":3007,"mtime":1607303826301,"results":"187","hashOfConfig":"101"},{"size":7210,"mtime":1607303826301,"results":"188","hashOfConfig":"101"},{"size":3925,"mtime":1607303826302,"results":"189","hashOfConfig":"101"},{"size":1068,"mtime":1607303826302,"results":"190","hashOfConfig":"101"},{"size":2144,"mtime":1607303826302,"results":"191","hashOfConfig":"101"},{"size":2894,"mtime":1607307029552,"results":"192","hashOfConfig":"101"},{"size":7172,"mtime":1607306840460,"results":"193","hashOfConfig":"101"},{"size":27931,"mtime":1607304881846,"results":"194","hashOfConfig":"101"},{"size":439,"mtime":1607304768760,"results":"195","hashOfConfig":"101"},{"size":513,"mtime":1605663982918,"results":"196","hashOfConfig":"101"},{"size":1735,"mtime":1607304758126,"results":"197","hashOfConfig":"101"},{"size":8928,"mtime":1607304775179,"results":"198","hashOfConfig":"101"},{"size":1404,"mtime":1605663982918,"results":"199","hashOfConfig":"101"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},"11z0wt0",{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"202"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"202"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"202"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"202"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"234","messages":"235","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"215"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"215"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"215"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"215"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"215"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"215"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"215"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"215"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"215"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"215"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"215"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"215"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"215"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"215"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"202"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"215"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"215"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"215"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"215"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"215"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"215"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"215"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"215"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"215"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\index.js",[],["428","429"],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\serviceWorker.js",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\client\\Root.js",["430"],"import React from \"react\";\r\nimport App from \"../shared/App\";\r\nimport thunk from 'redux-thunk';\r\nimport {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport rootReducer from \"../store/rootReducer\";\r\nimport { Provider } from \"react-redux\";\r\nimport { theme } from \"../styles/theme\";\r\nimport {\r\n  // Backdrop,\r\n  // Button,\r\n  // CircularProgress,\r\n  // Dialog,\r\n  // DialogActions,\r\n  // DialogContent,\r\n  // DialogContentText,\r\n  // DialogTitle,\r\n  // Fade,\r\n  // IconButton,\r\n  MuiThemeProvider,\r\n  // Snackbar,\r\n} from \"@material-ui/core\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nconst Root = () => (\r\n  <Provider store={store}>\r\n    <MuiThemeProvider theme={theme}>\r\n      <App theme={theme} />\r\n    </MuiThemeProvider>\r\n  </Provider>\r\n);\r\n\r\nexport default Root;\r\n","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\shared\\App.js",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\styles\\theme.js",["431"],"import { createMuiTheme } from '@material-ui/core';\r\nimport Colors from '../styles/colors.scss';\r\nimport { colors } from '@material-ui/core';\r\nimport { koKR } from '@material-ui/core/locale';\r\n// import { Button, Typography } from \"@material-ui/core\";\r\n\r\nconst prev_palette = {\r\n  type: 'light',\r\n  primary: {\r\n    main: Colors.primary\r\n  },\r\n  secondary: {\r\n    main: Colors.secondary\r\n  },\r\n  error: {\r\n    main: Colors.error\r\n  },\r\n  warning: {\r\n    main: Colors.warning\r\n  },\r\n  info: {\r\n    main: Colors.info\r\n  },\r\n  success: {\r\n    main: Colors.success\r\n  },\r\n  contrastThreshold: 3,\r\n  tonalOffset: 0.2\r\n};\r\n\r\nconst palette = {\r\n  myColor: {\r\n    main: colors.blue[500]\r\n  },\r\n  primary: {\r\n    main: \"#7D89EF\",\r\n  },\r\n  secondary: {\r\n    main: \"#B3DDED\",\r\n  },\r\n  error: {\r\n    main: \"#FF7777\",\r\n  },\r\n  warning: {\r\n    main:  \"#FFC569\",\r\n  },\r\n  info: {\r\n    main: \"#65BEFF\",\r\n  },\r\n  success: {\r\n    main: \"#87C651\",\r\n  },\r\n  contrastThreshold: 3,\r\n  tonalOffset: 0.2\r\n};\r\n\r\nexport const theme = createMuiTheme({\r\n  palette,\r\n  // drawer 폭, 넓이\r\n  props: {\r\n    drawerWidth: 200,\r\n  },\r\n\r\n  typography: {\r\n    useNextVariants: true,\r\n    fontFamily: '\"Noto Sans KR\"'\r\n  },\r\n}, koKR);\r\n\r\n","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\store\\rootReducer.ts",[],["432","433"],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\store\\reducers\\authorization.js",["434"],"import {store} from \"../../client/Root\";\r\nimport cookie from 'react-cookies';\r\n\r\n// Define Action Types\r\nconst ActionGroup = 'Auth';\r\n\r\nexport const AuthorizationActionTypes = {\r\n  LOGIN: `${ActionGroup}.LOGIN`,\r\n  LOGOUT: `${ActionGroup}.LOGOUT`\r\n};\r\n\r\n\r\n// Action Methods\r\nexport const didLogin = (authToken) => {\r\n  console.log(\"authToken : \", authToken);\r\n  store.dispatch({\r\n    type: AuthorizationActionTypes.LOGIN,\r\n    authToken: authToken\r\n  })\r\n};\r\n\r\nexport const logout = () => {\r\n  store.dispatch({\r\n    type: AuthorizationActionTypes.LOGOUT,\r\n    authToken: \"\"\r\n  })\r\n  cookie.remove(\"token\");\r\n};\r\n\r\n\r\n// Reducer\r\nexport default (state={\r\n  authToken: localStorage.getItem('idToken')\r\n}, action) => {\r\n  switch (action.type) {\r\n    case AuthorizationActionTypes.LOGIN: {\r\n      localStorage.setItem('idToken', action.authToken);\r\n      return {\r\n        ...state,\r\n        authToken: action.authToken\r\n      }\r\n    }\r\n    case AuthorizationActionTypes.LOGOUT: {\r\n      localStorage.removeItem('idToken');\r\n      state.authToken = null;\r\n      return {};\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\store\\reducers\\pointerTracer.js",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\store\\reducers\\ui.js",["435"],"import {store} from \"../../client/Root\";\r\n\r\n//[Define Action Types\r\nconst ActionGroup = 'UI';\r\n\r\nexport const UIActionTypes = Object.freeze({\r\n  SHOW_UI_PROGRESS: `${ActionGroup}.SHOW_UI_PROGRESS`,\r\n  HIDE_UI_PROGRESS: `${ActionGroup}.HIDE_UI_PROGRESS`,\r\n  SHOW_TOAST_MESSAGE: `${ActionGroup}.SHOW_TOAST_MESSAGE`,\r\n  HIDE_TOAST_MESSAGE: `${ActionGroup}.HIDE_TOAST_MESSAGE`,\r\n  SHOW_DIALOG: `${ActionGroup}.SHOW_DIALOG`,\r\n  HIDE_DIALOG: `${ActionGroup}.HIDE_DIALOG`,\r\n  RESET_DIALOG: `${ActionGroup}.RESET_DIALOG`\r\n});\r\n//]\r\n\r\n//[Action Methods\r\nexport const ShowUIProgressBackdrop = () => {\r\n  store.dispatch({\r\n    type: UIActionTypes.SHOW_UI_PROGRESS\r\n  });\r\n};\r\nexport const HideUIProgressBackdrop = () => {\r\n  store.dispatch({\r\n    type: UIActionTypes.HIDE_UI_PROGRESS\r\n  });\r\n};\r\n\r\nexport const ShowErrorToast = (message) => {\r\n  store.dispatch({\r\n    type: UIActionTypes.SHOW_TOAST_MESSAGE,\r\n    message: message,\r\n    toastType: 'error'\r\n  });\r\n};\r\nexport const ShowWarningToast = (message) => {\r\n  store.dispatch({\r\n    type: UIActionTypes.SHOW_TOAST_MESSAGE,\r\n    message: message,\r\n    toastType: 'warning'\r\n  });\r\n};\r\nexport const ShowInfoToast = (message) => {\r\n  store.dispatch({\r\n    type: UIActionTypes.SHOW_TOAST_MESSAGE,\r\n    message: message,\r\n    toastType: 'info'\r\n  });\r\n};\r\nexport const ShowSuccessToast = (message) => {\r\n  store.dispatch({\r\n    type: UIActionTypes.SHOW_TOAST_MESSAGE,\r\n    message: message,\r\n    toastType: 'success'\r\n  });\r\n};\r\nexport const ShowMessageToast = (message) => {\r\n  store.dispatch({\r\n    type: UIActionTypes.SHOW_TOAST_MESSAGE,\r\n    message: message,\r\n    toastType: ''\r\n  });\r\n};\r\nexport const HideToastMessage = () => {\r\n  store.dispatch({\r\n    type: UIActionTypes.HIDE_TOAST_MESSAGE\r\n  });\r\n};\r\n\r\nexport const ShowDialog = (title, message, confirmBtnText, cancelBtnText, isModal, didCloseCallback) => {\r\n  store.dispatch({\r\n    type: UIActionTypes.SHOW_DIALOG,\r\n    title: title,\r\n    message: message,\r\n    confirmBtnText: confirmBtnText,\r\n    cancelBtnText: cancelBtnText,\r\n    isModal: isModal,\r\n    didCloseCallback: didCloseCallback\r\n  });\r\n};\r\nexport const HideDialog = () => {\r\n  store.dispatch({\r\n    type: UIActionTypes.HIDE_DIALOG\r\n  });\r\n};\r\nexport const ResetDialogConfig = () => {\r\n  store.dispatch({\r\n    type: UIActionTypes.RESET_DIALOG\r\n  });\r\n};\r\n//]\r\n\r\n//[Reducer\r\nexport default (state={\r\n  progress: {\r\n    circular: false\r\n  },\r\n  toast: {\r\n    show: false,\r\n    message: '',\r\n    toastType: ''\r\n  },\r\n  dialog: {\r\n    show: false,\r\n    title: '',\r\n    message: '',\r\n    confirmBtnText: '',\r\n    cancelBtnText: '',\r\n    okButtonText: '',\r\n    isModal: false,\r\n    didCloseCallback: null\r\n  }\r\n}, action) => {\r\n  switch (action.type) {\r\n    case UIActionTypes.SHOW_UI_PROGRESS: {\r\n      return {\r\n        ...state,\r\n        progress: {\r\n          circular: true\r\n        }\r\n      };\r\n    }\r\n    case UIActionTypes.HIDE_UI_PROGRESS: {\r\n      return {\r\n        ...state,\r\n        progress: {\r\n          circular: false\r\n        }\r\n      };\r\n    }\r\n    case UIActionTypes.SHOW_TOAST_MESSAGE: {\r\n      return {\r\n        ...state,\r\n        toast: {\r\n          show: true,\r\n          message: action.message,\r\n          toastType: action.toastType\r\n        }\r\n      }\r\n    }\r\n    case UIActionTypes.HIDE_TOAST_MESSAGE: {\r\n      return {\r\n        ...state,\r\n        toast: {\r\n          show: false,\r\n          message: ''\r\n        }\r\n      }\r\n    }\r\n    case UIActionTypes.SHOW_DIALOG: {\r\n      return {\r\n        ...state,\r\n        dialog: {\r\n          show: true,\r\n          title: action.title,\r\n          message: action.message,\r\n          confirmBtnText: action.confirmBtnText,\r\n          cancelBtnText: action.cancelBtnText,\r\n          isModal: action.isModal,\r\n          didCloseCallback: action.didCloseCallback\r\n        }\r\n      }\r\n    }\r\n    case UIActionTypes.HIDE_DIALOG: {\r\n      return {\r\n        ...state,\r\n        dialog: {\r\n          ...state.dialog,\r\n          show: false\r\n        }\r\n      }\r\n    }\r\n    case UIActionTypes.RESET_DIALOG: {\r\n      return {\r\n        ...state,\r\n        dialog: {\r\n          show: false,\r\n          title: '',\r\n          message: '',\r\n          confirmBtnText: '',\r\n          cancelBtnText: '',\r\n          okButtonText: '',\r\n          isModal: false,\r\n          didCloseCallback: null\r\n        }\r\n      }\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n//]\r\n","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\pages\\index.js",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\pages\\Posts.js",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\pages\\Post.js",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\pages\\About.js",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\pages\\Home.tsx",["436","437","438","439"],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\PenManager.ts",["440","441","442","443","444"],"import { NeoSmartpen } from \"./neosmartpen\";\r\nimport { IPenEvent } from \"../DataStructure/Structures\";\r\nimport { IBrushType } from \"../DataStructure/Enums\"\r\nimport PenBasedRenderer from \"../renderer/pageviewer/PenBasedRenderer\";\r\nimport ThemeManager from \"../../styles/ThemeManager\"\r\nimport jQuery from \"jquery\";\r\n\r\nlet $ = jQuery;\r\nlet _penmanager_instance = null;\r\nvar _active_pen:NeoSmartpen = null;\r\n\r\nexport const DEFAULT_PEN_COLOR_NUM: number = 2;\r\nexport const DEFAULT_PEN_THICKNESS: number = 2;\r\nexport const DEFAULT_PEN_RENDERER_TYPE: IBrushType = IBrushType.PEN;\r\n\r\nexport default class PenManager {\r\n  /** @type {Array.<{id:string, mac:string, pen:NeoSmartpen, connected:boolean}>} */\r\n  penArray = new Array(0);\r\n\r\n  /** @type {Array.<StorageRenderer>} */\r\n  render = [];\r\n  \r\n  pen_colors: string[] = [\r\n    \"rgb(169, 169, 169)\", // 0 DARK_GARY #FFAAAAAA #A9A9A9\r\n    \"rgb(255, 0, 0)\", // 1 RED #FFFF0200 #FF0000  rgb(255, 0, 0, 0)\r\n    \"rgb(255, 255, 2)\", // 2 YELLOW #FFFFD001 #FFFF02\r\n    \"rgb(0, 0, 128)\", // 3 NAVY #FF012EE2 #000080\r\n\r\n    \"rgb(0, 0, 0)\", // 4 BLACK #FF000000 #000000\r\n\r\n    \"rgb(211, 211, 211)\", // 5 LIGHT_GRAY #FFE5E5E5 #D3D3D3\r\n    \"rgb(255, 165, 0)\", // 6 ORANGE #FFFF6500 #FFA500\r\n    \"rgb(0, 128, 0)\", // 7 GREEN #FF3CDD00 #008000\r\n\r\n    \"rgb(0, 0, 255)\", // 8 BLUE #FF00ABEB #0000FF\r\n    \"rgb(128, 0, 128)\", // 9 PURPLE #FF6C00E2 #800080\r\n    \"rgb(169, 169, 169)\" // 10 DARK_GARY #FFAAAAAA #A9A9A9\r\n  ];\r\n\r\n  marker_colors: string[] = [\r\n    \"rgb(217, 217, 224)\", // 0 \r\n    \"rgb(232, 155, 162)\", // 1 \r\n    \"rgb(244, 244, 175)\", // 2 \r\n    \"rgb(166, 166, 212)\", // 3 \r\n\r\n    \"rgb(167, 167, 174)\", // 4\r\n\r\n    \"rgb(231, 231, 238)\", // 5\r\n    \"rgb(241, 214, 171)\", // 6\r\n    \"rgb(166, 205, 173)\", // 7\r\n\r\n    \"rgb(167, 167, 251)\", // 8\r\n    \"rgb(205, 166, 212)\", // 9\r\n    \"rgb(217, 217, 224)\" // 10\r\n  ];\r\n\r\n  color: string = this.pen_colors[DEFAULT_PEN_COLOR_NUM];\r\n  thickness: number = DEFAULT_PEN_THICKNESS;\r\n  penRendererType: IBrushType = DEFAULT_PEN_RENDERER_TYPE;\r\n\r\n  init = () => {\r\n    this.setThickness(DEFAULT_PEN_THICKNESS);\r\n    this.setPenRendererType(DEFAULT_PEN_RENDERER_TYPE);\r\n    this.setColor(DEFAULT_PEN_COLOR_NUM);\r\n  }\r\n\r\n  constructor() {\r\n    if (_penmanager_instance) return _penmanager_instance;\r\n  }\r\n\r\n  /**\r\n   * @return {PenManager}\r\n   */\r\n  static getInstance() {\r\n    if (_penmanager_instance) return _penmanager_instance;\r\n\r\n    _penmanager_instance = new PenManager();\r\n    return _penmanager_instance;\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  public createPen = (): NeoSmartpen => {\r\n    let pen = new NeoSmartpen();\r\n    return pen;\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * @param pen \r\n   * @param device \r\n   */\r\n  public add = (pen: NeoSmartpen, device: BluetoothDevice) => {\r\n    console.log(device);\r\n    this.penArray.push({\r\n      id: device.id,\r\n      mac: pen.getMac(),\r\n      pen,\r\n      connected: false\r\n    });\r\n\r\n    console.log(`PenManager: pen added, mac=${pen.getMac()}`);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param device \r\n   */\r\n  public isAlreadyConnected = (device: BluetoothDevice): boolean => {\r\n    const index = this.penArray.findIndex(penInfo => penInfo.id === device.id);\r\n    if (index > -1) return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param pen \r\n   */\r\n  private removePen = (pen: NeoSmartpen) => {\r\n    const btDeviceId = pen.getBtDevice().id;\r\n\r\n    const index = this.penArray.findIndex(penInfo => penInfo.id === btDeviceId);\r\n    if (index > -1) {\r\n      this.penArray.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  setActivePen = (penId: string) => {\r\n    _active_pen = this.penArray.find(penInfo => penInfo.pen.mac === penId).pen;\r\n  }\r\n\r\n  setColor(color_num: number) {\r\n    this.toggleColorRadioButton(color_num);\r\n    this.color = this.pen_colors[color_num];\r\n\r\n    if (_active_pen) {\r\n        _active_pen.setColor(this.color);\r\n    }\r\n  }\r\n\r\n  toggleColorRadioButton(color_num: number) {\r\n    var $elem = $(`.color_${color_num}`);\r\n    this.toggleColorRadioButton_inner(undefined, $elem);\r\n  }\r\n  \r\n  toggleColorRadioButton_inner(e, $elem) {\r\n    if ($elem === undefined) {\r\n        $elem = $(e.target);\r\n    }\r\n    if ($elem.hasClass(\"color_icon\")) {\r\n        $(\".color_icon\").each(function (item) {\r\n          $(item).removeClass(\"pressed\");\r\n        });\r\n        $elem.addClass(\"pressed\");\r\n    }\r\n  }\r\n  \r\n  setPenRendererType(type: IBrushType) {\r\n    var $elem = $(\"#btn_brush\").find(\".c2\");\r\n    this.setPenTypeStatus($elem, type);\r\n\r\n    if (type === IBrushType.MARKER) {\r\n      for(var i = 0; i < 11; i++) {\r\n        $('#clr_' + [i]).find(\".color_\" + [i]).css('background-color', this.marker_colors[i]);\r\n      }\r\n    }\r\n    else if (type === IBrushType.PEN) {\r\n      for(var i = 0; i < 11; i++) {\r\n        $('#clr_' + [i]).find(\".color_\" + [i]).css('background-color', this.pen_colors[i]);\r\n      }\r\n    }\r\n  \r\n    this.penRendererType = type;\r\n  \r\n    if (_active_pen) {\r\n        _active_pen.setPenRendererType(this.penRendererType);\r\n    }\r\n  }\r\n  \r\n  setPenTypeStatus($elem, type) {\r\n    if (type == IBrushType.MARKER) {\r\n        $elem.removeClass(\"state_0\");\r\n        $elem.removeClass(\"state_2\");\r\n  \r\n        $elem.addClass(\"state_1\");\r\n    } else if (type == IBrushType.ERASER) {\r\n        $elem.removeClass(\"state_0\");\r\n        $elem.removeClass(\"state_1\");\r\n  \r\n        $elem.addClass(\"state_2\");\r\n    } else if (type == IBrushType.PEN) {\r\n        $elem.removeClass(\"state_1\");\r\n        $elem.removeClass(\"state_2\");\r\n  \r\n        $elem.addClass(\"state_0\");\r\n    }\r\n  }\r\n  \r\n  setThickness(thickness: number) {\r\n    $(\"#thickness_num\").text(thickness);\r\n  \r\n    thickness = thickness * 2;\r\n    this.thickness = thickness;\r\n  \r\n    if (_active_pen) {\r\n        _active_pen.setThickness(this.thickness);\r\n    }\r\n  }\r\n  \r\n  registerRenderContainer = (renderContainer) => {\r\n    this.render.push(renderContainer);\r\n  }\r\n\r\n  unregisterRenderContainer = (renderContainer) => {\r\n    const sameRender = (item) => item === renderContainer;\r\n    const index = this.penArray.findIndex(sameRender);\r\n\r\n    if (index > -1) {\r\n      this.render.splice(index, 1);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * @param opt \r\n   */\r\n  public onConnected = (opt: { pen: NeoSmartpen, event: IPenEvent }) => {\r\n    const { pen } = opt;\r\n    const btDeviceId = pen.getBtDevice().id;\r\n\r\n    const index = this.penArray.findIndex(penInfo => penInfo.id === btDeviceId);\r\n\r\n    if (index > -1) {\r\n      this.penArray[index].connected = true;\r\n    }\r\n    else {\r\n      console.log(\"PenManager: something wrong, un-added pen connected\");\r\n      this.penArray.push({ id: pen.getBtDevice().id, mac: pen.getMac(), pen, connected: true });\r\n    }\r\n\r\n    const themeManager = ThemeManager.getInstance();\r\n    themeManager.enablePenRelatedButtons(true);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param opt \r\n   */\r\n  public onDisconnected = (opt: { pen: NeoSmartpen, event: IPenEvent }) => {\r\n    const { pen } = opt;\r\n    const btDeviceId = pen.getBtDevice().id;\r\n\r\n    const index = this.penArray.findIndex(penInfo => penInfo.id === btDeviceId);\r\n    if (index > -1) {\r\n      this.penArray.splice(index, 1);\r\n    }\r\n    else {\r\n      console.log(\"PenManager: something wrong, un-added pen disconnected\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param opt \r\n   */\r\n  public onNcodeError = (opt: { pen: NeoSmartpen, event: IPenEvent }) => {\r\n    // const { pen, event } = opt;\r\n\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  getConnectedPens = (): NeoSmartpen[] => {\r\n    /** @type {Array<NeoSmartpen>} */\r\n    let ret = new Array(0);\r\n\r\n    this.penArray.forEach(penInfo => {\r\n      if (penInfo.connected) {\r\n        ret.push(penInfo.pen);\r\n      }\r\n    });\r\n\r\n    return ret;\r\n  }\r\n\r\n}","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\penstorage\\InkStorage.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\PenTypeButton.tsx",["445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469"],"import React, { Component, useState } from \"react\";\r\nimport '../../styles/buttons.css';\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport { Theme, Typography, withStyles } from '@material-ui/core';\r\nimport PenManager from \"../../neosmartpen/pencomm/PenManager\";\r\nimport { IBrushType } from \"../../neosmartpen/DataStructure\";\r\n\r\nconst PenTypeTooltip = withStyles((theme: Theme) => ({\r\n    tooltip: {\r\n        backgroundColor: '#f5f5f9',\r\n        color: 'rgba(0, 0, 0, 0.87)',\r\n        maxWidth: 240,\r\n        fontSize: theme.typography.pxToRem(12),\r\n        border: '1px solid #dadde9',\r\n    },\r\n}))(Tooltip);\r\n\r\nconst manager: PenManager = PenManager.getInstance();\r\n\r\nexport default class PenTypeButton extends React.Component {\r\n  shouldComponentUpdate(nextProps: any, nextState: any) {\r\n    return false;\r\n  }\r\n    \r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n            <button id=\"btn_brush\" disabled type=\"button\" title=\"Pen type\"\r\n                className=\"bind-popover btn btn-neo btn-neo-vertical\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\r\n                aria-expanded=\"false\">\r\n                <PenTypeTooltip placement=\"left\" title={\r\n                    <React.Fragment>\r\n                        <Typography color=\"inherit\">Pen Type</Typography>\r\n                        <em>{\"펜과 형광펜, 지우개 중 하나를 선택하는 버튼입니다.\"}</em>\r\n                        <br></br>\r\n                        <b>{\"Q 펜, W 형광펜, E 지우개, A~G 굵기 선택\"}</b>\r\n                    </React.Fragment>\r\n                        }>\r\n                    <div className=\"c2 disabled state_0\">\r\n                        <img src={require(\"../../icons/icon_pen_n.png\")} className=\"state_0 normal-image\"></img>\r\n                        <img src={require(\"../../icons/icon_pen_p.png\")} className=\"state_0 hover-image\"></img>\r\n\r\n                        <img src={require(\"../../icons/icon_highlight_n.png\")} className=\"state_1 normal-image\"></img>\r\n                        <img src={require(\"../../icons/icon_highlight_p.png\")} className=\"state_1 hover-image\"></img>\r\n\r\n                        <img src={require(\"../../icons/icon_eraser_n.png\")} className=\"state_2 normal-image\"></img>\r\n                        <img src={require(\"../../icons/icon_eraser_p.png\")} className=\"state_2 hover-image\"></img>\r\n\r\n                        <span id=\"thickness_num\" className=\"thickness-badge badge badge-pill badge-secondary\">2</span>\r\n                    </div>\r\n                </PenTypeTooltip>\r\n            </button>\r\n\r\n            <div className=\"dropdown-menu dropdown-menu-right p-0 border border-0\" aria-labelledby=\"btn_brush\">\r\n                {/* 펜/형광펜 */}\r\n                <div className=\"btn-group\">\r\n                    <button id=\"btn_pen\" type=\"button\" className=\"btn btn-neo btn-neo-dropdown\"\r\n                    onClick={() => manager.setPenRendererType(IBrushType.PEN)}>\r\n                    <PenTypeTooltip placement=\"left\" title={\r\n                        <React.Fragment>\r\n                            <Typography color=\"inherit\">Pen Type</Typography>\r\n                            <em>{\"펜과 형광펜, 지우개 중 하나를 선택하는 버튼입니다.\"}</em>\r\n                            <br></br>\r\n                            <b>{\"Q 펜, W 형광펜, E 지우개, A~G 굵기 선택\"}</b>\r\n                        </React.Fragment>\r\n                            }>\r\n                        <div className=\"c2\">\r\n                            <img src = { require(\"../../icons/icon_pen_n.png\") } className=\"normal-image\"></img>\r\n                            <img src = { require(\"../../icons/icon_pen_p.png\") } className=\"hover-image\"></img>\r\n                        </div>\r\n                    </PenTypeTooltip>\r\n                    </button>\r\n                    <button id=\"btn_marker\" type=\"button\" className=\"btn btn-neo btn-neo-dropdown\" \r\n                    onClick={() => manager.setPenRendererType(IBrushType.MARKER)}>\r\n                        <PenTypeTooltip placement=\"left\" title={\r\n                            <React.Fragment>\r\n                                <Typography color=\"inherit\">Pen Type</Typography>\r\n                                <em>{\"펜과 형광펜, 지우개 중 하나를 선택하는 버튼입니다.\"}</em>\r\n                                <br></br>\r\n                                <b>{\"Q 펜, W 형광펜, E 지우개, A~G 굵기 선택\"}</b>\r\n                            </React.Fragment>\r\n                                }>\r\n                            <div className=\"c2\">\r\n                                <img src= { require(\"../../icons/icon_highlight_n.png\") } className=\"normal-image\"></img>\r\n                                <img src= { require(\"../../icons/icon_highlight_p.png\") } className=\"hover-image\"></img>\r\n                            </div>\r\n                        </PenTypeTooltip>\r\n                    </button>\r\n                    <button id=\"btn_eraser\" type=\"button\" className=\"btn btn-neo btn-neo-dropdown\" \r\n                    onClick={() => manager.setPenRendererType(IBrushType.ERASER)}>\r\n                        <PenTypeTooltip placement=\"left\" title={\r\n                            <React.Fragment>\r\n                                <Typography color=\"inherit\">Pen Type</Typography>\r\n                                <em>{\"펜과 형광펜, 지우개 중 하나를 선택하는 버튼입니다.\"}</em>\r\n                                <br></br>\r\n                                <b>{\"Q 펜, W 형광펜, E 지우개, A~G 굵기 선택\"}</b>\r\n                            </React.Fragment>\r\n                                }>\r\n                            <div className=\"c2\">\r\n                                <img src = { require(\"../../icons/icon_eraser_n.png\") } className=\"normal-image\"></img>\r\n                                <img src = { require(\"../../icons/icon_eraser_p.png\") } className=\"hover-image\"></img>\r\n                            </div>\r\n                        </PenTypeTooltip>\r\n                    </button>\r\n                </div>\r\n\r\n                {/* 선 굵기 */}\r\n                <div className=\"dropdown-divider\"></div>\r\n                <div className=\"btn-group\">\r\n                    <button id=\"btn_thick_1\" type=\"button\" className=\"btn btn-neo btn-neo-dropdown\" onClick={() => manager.setThickness(1)}>\r\n                        <PenTypeTooltip placement=\"left\" title={\r\n                            <React.Fragment>\r\n                                <Typography color=\"inherit\">Pen Type</Typography>\r\n                                <em>{\"펜과 형광펜, 지우개 중 하나를 선택하는 버튼입니다.\"}</em>\r\n                                <br></br>\r\n                                <b>{\"Q 펜, W 형광펜, E 지우개, A~G 굵기 선택\"}</b>\r\n                            </React.Fragment>\r\n                                }>\r\n                            <div className=\"c2\">\r\n                                <img src = { require(\"../../icons/icon_thickness_01_n.png\") } className=\"normal-image\"></img>\r\n                                <img src = { require(\"../../icons/icon_thickness_01_p.png\") } className=\"hover-image\"></img>\r\n                            </div>\r\n                        </PenTypeTooltip>\r\n                    </button>\r\n                    <button id=\"btn_thick_2\" type=\"button\" className=\"btn btn-neo btn-neo-dropdown\" onClick={() => manager.setThickness(2)}>\r\n                        <PenTypeTooltip placement=\"left\" title={\r\n                            <React.Fragment>\r\n                                <Typography color=\"inherit\">Pen Type</Typography>\r\n                                <em>{\"펜과 형광펜, 지우개 중 하나를 선택하는 버튼입니다.\"}</em>\r\n                                <br></br>\r\n                                <b>{\"Q 펜, W 형광펜, E 지우개, A~G 굵기 선택\"}</b>\r\n                            </React.Fragment>\r\n                                }>\r\n                            <div className=\"c2\">\r\n                                <img src = { require(\"../../icons/icon_thickness_02_n.png\") } className=\"normal-image\"></img>\r\n                                <img src = { require(\"../../icons/icon_thickness_02_p.png\") } className=\"hover-image\"></img>\r\n                            </div>\r\n                        </PenTypeTooltip> \r\n                    </button>\r\n                    <button id=\"btn_thick_3\" type=\"button\" className=\"btn btn-neo btn-neo-dropdown\" onClick={() => manager.setThickness(3)}>\r\n                        <PenTypeTooltip placement=\"left\" title={\r\n                            <React.Fragment>\r\n                                <Typography color=\"inherit\">Pen Type</Typography>\r\n                                <em>{\"펜과 형광펜, 지우개 중 하나를 선택하는 버튼입니다.\"}</em>\r\n                                <br></br>\r\n                                <b>{\"Q 펜, W 형광펜, E 지우개, A~G 굵기 선택\"}</b>\r\n                            </React.Fragment>\r\n                                }>\r\n                            <div className=\"c2\">\r\n                                <img src = { require(\"../../icons/icon_thickness_03_n.png\") } className=\"normal-image\"></img>\r\n                                <img src = { require(\"../../icons/icon_thickness_03_p.png\") } className=\"hover-image\"></img>\r\n                            </div>\r\n                        </PenTypeTooltip> \r\n                    </button>\r\n                    <button id=\"btn_thick_4\" type=\"button\" className=\"btn btn-neo btn-neo-dropdown\" onClick={() => manager.setThickness(4)}>\r\n                        <PenTypeTooltip placement=\"left\" title={\r\n                            <React.Fragment>\r\n                                <Typography color=\"inherit\">Pen Type</Typography>\r\n                                <em>{\"펜과 형광펜, 지우개 중 하나를 선택하는 버튼입니다.\"}</em>\r\n                                <br></br>\r\n                                <b>{\"Q 펜, W 형광펜, E 지우개, A~G 굵기 선택\"}</b>\r\n                            </React.Fragment>\r\n                                }>\r\n                            <div className=\"c2\">\r\n                                <img src = { require(\"../../icons/icon_thickness_04_n.png\") } className=\"normal-image\"></img>\r\n                                <img src = { require(\"../../icons/icon_thickness_04_p.png\") } className=\"hover-image\"></img>\r\n                            </div>\r\n                        </PenTypeTooltip> \r\n                    </button>\r\n                    <button id=\"btn_thick_5\" type=\"button\" className=\"btn btn-neo btn-neo-dropdown\" onClick={() => manager.setThickness(5)}>\r\n                        <PenTypeTooltip placement=\"left\" title={\r\n                            <React.Fragment>\r\n                                <Typography color=\"inherit\">Pen Type</Typography>\r\n                                <em>{\"펜과 형광펜, 지우개 중 하나를 선택하는 버튼입니다.\"}</em>\r\n                                <br></br>\r\n                                <b>{\"Q 펜, W 형광펜, E 지우개, A~G 굵기 선택\"}</b>\r\n                            </React.Fragment>\r\n                                }>\r\n                            <div className=\"c2\">\r\n                                <img src = { require(\"../../icons/icon_thickness_05_n.png\") } className=\"normal-image\"></img>\r\n                                <img src = { require(\"../../icons/icon_thickness_05_p.png\") } className=\"hover-image\"></img>\r\n                            </div>\r\n                        </PenTypeTooltip> \r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n}","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\ConnectButton.tsx",["470","471","472","473","474","475","476"],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\RotateButton.tsx",["477","478","479","480","481","482","483"],"import React, { Component, useState } from \"react\";\r\nimport '../../styles/buttons.css';\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport { Theme, Typography, withStyles } from '@material-ui/core';\r\n\r\nconst RotateTooltip = withStyles((theme: Theme) => ({\r\n  tooltip: {\r\n      backgroundColor: '#f5f5f9',\r\n      color: 'rgba(0, 0, 0, 0.87)',\r\n      maxWidth: 240,\r\n      fontSize: theme.typography.pxToRem(12),\r\n      border: '1px solid #dadde9',\r\n  },\r\n}))(Tooltip);\r\n\r\nexport default class RotateButton extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"btn-group dropright\" role=\"group\">\r\n      <button type=\"button\" id=\"btn_rotate\" title=\"Rotate\" className=\"btn btn-neo btn-neo-vertical\">\r\n        <RotateTooltip placement=\"left\" title={\r\n            <React.Fragment>\r\n                <Typography color=\"inherit\">Rotate</Typography>\r\n                <em>{\"종이 또는 스마트 플레이트의 입력이 회전되어 반영될지 아닐지를 선택합니다.\"}</em>\r\n                <br></br>\r\n                <b>{\"TAB 가로쓰기/세로쓰기 전환\"}</b>\r\n            </React.Fragment>\r\n                }>\r\n            <div className=\"c2\">\r\n              <img src= { require('../../icons/icon_portrait_n.png') } className=\"toggle-off normal-image\"></img>\r\n              <img src= { require(\"../../icons/icon_portrait_p.png\") } className=\"toggle-off hover-image\"></img>\r\n              <img src= { require(\"../../icons/icon_landscape_n.png\") } className=\"toggle-on normal-image\"></img>\r\n              <img src= { require(\"../../icons/icon_landscape_p.png\") } className=\"toggle-on hover-image\"></img>\r\n            </div>\r\n        </RotateTooltip>\r\n      </button>\r\n    </div>\r\n      );\r\n  }\r\n}","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\FitButton.tsx",["484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504"],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\ZoomButton.tsx",["505","506","507","508"],"import React, { Component, useState } from \"react\";\r\nimport '../../styles/buttons.css';\r\n\r\nexport default class ZoomButton extends React.Component {\r\n  render() {\r\n    return (\r\n      <button id=\"btn_zoom\" type=\"button\" disabled className=\"btn btn-neo has-badge\" title=\"Zoom\" data-container=\"body\"\r\n          data-toggle=\"popover\" data-placement=\"left\" data-trigger=\"focus\" data-html=\"true\"\r\n          data-target=\"#my-popover-content\">\r\n          <div className=\"c2 disabled\">\r\n              <img src={ require(\"../../icons/icon_zoom_n.png\") } className=\"normal-image\"></img>\r\n              <img src={ require(\"../../icons/icon_zoom_p.png\") } className=\"hover-image\"></img>\r\n          </div>\r\n          <span id=\"zoom-ratio\" className=\"zoom-badge badge badge-pill badge-info\">100%</span>\r\n      </button>\r\n      );\r\n  }\r\n}","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\BackgroundButton.tsx",["509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529"],"import React, { Component, useState } from \"react\";\r\nimport '../../styles/buttons.css';\r\nimport ThemeManager from \"../../styles/ThemeManager\";\r\n\r\nconst themeManager: ThemeManager = ThemeManager.getInstance();\r\n\r\nexport default class BackgroundButton extends React.Component {\r\n  render() {\r\n    return (\r\n        <div className=\"btn-group dropright\" role=\"group\">\r\n          <button type=\"button\" id=\"btn_background\" title=\"Backgrounds\" className=\"btn btn-neo btn-neo-vertical\"\r\n              data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n              <div className=\"c2\">\r\n                  <img src={require(\"../../icons/icon_background_n.png\")} className=\"normal-image\"></img>\r\n                  <img src={require(\"../../icons/icon_background_p.png\")} className=\"hover-image\"></img>\r\n              </div>\r\n          </button>\r\n\r\n          <div className=\"dropdown-menu p-0 border border-0 \" aria-labelledby=\"btn_background\">\r\n            <a className=\"dropdown-item\" href=\"#\">\r\n\r\n              <a id=\"btn_bg_gd\" className=\"dropdown-item\" href=\"javascript:void(0)\"\r\n              onClick={() => themeManager.setT1()}>\r\n                  <div className=\"c2\">\r\n                      <img src={require(\"../../icons/icon_bg_gd01_n.png\")} className=\"normal-image\"></img>\r\n                      <img src={require(\"../../icons/icon_bg_gd01_p.png\")} className=\"hover-image\"></img>\r\n                      <span className=\"bg-dropmenu\">Gurodong</span>\r\n                  </div>\r\n              </a>\r\n\r\n              <a id=\"btn_bg_avan\" className=\"dropdown-item\" href=\"javascript:void(0)\"\r\n              onClick={() => themeManager.setT2()}>\r\n                  <div className=\"c2\">\r\n                      <img src={require(\"../../icons/icon_bg_gd02_n.png\")} className=\"normal-image\"></img>\r\n                      <img src={require(\"../../icons/icon_bg_gd02_p.png\")} className=\"hover-image\"></img>\r\n                      <span className=\"bg-dropmenu\">Aubergine</span>\r\n                  </div>\r\n              </a>\r\n\r\n              <a id=\"btn_bg_white\" className=\"dropdown-item\" href=\"javascript:void(0)\"\r\n              onClick={() => themeManager.setT4()}>\r\n                  <div className=\"c2\">\r\n                      <img src={require(\"../../icons/icon_bg_wh_n.png\")} className=\"normal-image\"></img>\r\n                      <img src={require(\"../../icons/icon_bg_wh_p.png\")} className=\"hover-image\"></img>\r\n                      <span className=\"bg-dropmenu\">White</span>\r\n                  </div>\r\n              </a>\r\n\r\n              <a id=\"btn_bg_black\" className=\"dropdown-item\" href=\"javascript:void(0)\" \r\n              onClick={() => themeManager.setT5()}>\r\n                  <div className=\"c2\">\r\n                      <img src={require(\"../../icons/icon_bg_bk_n.png\")} className=\"normal-image\"></img>\r\n                      <img src={require(\"../../icons/icon_bg_bk_p.png\")} className=\"hover-image\"></img>\r\n                      <span className=\"bg-dropmenu\">Black</span>\r\n                  </div>\r\n              </a>\r\n            </a>  \r\n          </div> \r\n        </div>\r\n      );\r\n  }\r\n}","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\navbar\\ColorButtons.tsx",["530"],"import React from 'react';\r\nimport '../../styles/main.css';\r\nimport PenManager from \"../../neosmartpen/pencomm/PenManager\";\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport { Theme, Typography, withStyles } from '@material-ui/core';\r\n\r\nconst manager: PenManager = PenManager.getInstance();\r\n\r\nconst PenColorTooltip = withStyles((theme: Theme) => ({\r\n    tooltip: {\r\n        backgroundColor: '#f5f5f9',\r\n        color: 'rgba(0, 0, 0, 0.87)',\r\n        maxWidth: 240,\r\n        fontSize: theme.typography.pxToRem(12),\r\n        border: '1px solid #dadde9',\r\n    },\r\n}))(Tooltip);\r\n\r\nconst ColorButtons = () => {\r\n    \r\n    return (\r\n        // <div className=\"color_bar neo_shadow float-left bottom_text color_bar\">\r\n        <React.Fragment>\r\n          <div className=\"btn-group\">\r\n              <button id=\"clr_1\" type=\"button\" className=\"btn btn-neo color_btn othercolors\" title=\"color 1\" \r\n                onClick={() => manager.setColor(1)}>\r\n                  <PenColorTooltip placement=\"top\" title={\r\n                        <React.Fragment>\r\n                            <Typography color=\"inherit\">Pen Color [RED]</Typography>\r\n                            <em>{\"표시되는 펜의 색상을 선택합니다\"}</em>\r\n                            <br></br>\r\n                            <b>{\"키보드 버튼 1로 선택 가능합니다\"}</b>\r\n                        </React.Fragment>\r\n                    }>\r\n                        <div className=\"color_icon color_1\">\r\n                        </div>\r\n                    </PenColorTooltip>\r\n              </button>\r\n\r\n              <button id=\"clr_2\" type=\"button\" className=\"btn btn-neo color_btn\" title=\"Pen color\"\r\n                onClick={() => manager.setColor(2)}>\r\n                  <PenColorTooltip placement=\"top\" title={\r\n                        <React.Fragment>\r\n                            <Typography color=\"inherit\">Pen Color [YELLOW]</Typography>\r\n                            <em>{\"표시되는 펜의 색상을 선택합니다\"}</em>\r\n                            <br></br>\r\n                            <b>{\"키보드 버튼 2로 선택 가능합니다\"}</b>\r\n                        </React.Fragment>\r\n                    }>\r\n                        <div className=\"color_icon color_2\">\r\n                        </div>\r\n                    </PenColorTooltip>\r\n              </button>\r\n              <button id=\"clr_3\" type=\"button\" className=\"btn btn-neo color_btn othercolors\" title=\"color 3\"\r\n                onClick={() => manager.setColor(3)}>\r\n                  <PenColorTooltip placement=\"top\" title={\r\n                        <React.Fragment>\r\n                            <Typography color=\"inherit\">Pen Color [NAVY]</Typography>\r\n                            <em>{\"표시되는 펜의 색상을 선택합니다\"}</em>\r\n                            <br></br>\r\n                            <b>{\"키보드 버튼 3로 선택 가능합니다\"}</b>\r\n                        </React.Fragment>\r\n                    }>\r\n                        <div className=\"color_icon color_3\">\r\n                        </div>\r\n                    </PenColorTooltip>\r\n              </button>\r\n              <button id=\"clr_4\" type=\"button\" className=\"btn btn-neo color_btn othercolors\" title=\"color 4\"\r\n                onClick={() => manager.setColor(4)}>\r\n                  <PenColorTooltip placement=\"top\" title={\r\n                        <React.Fragment>\r\n                            <Typography color=\"inherit\">Pen Color [BLACK]</Typography>\r\n                            <em>{\"표시되는 펜의 색상을 선택합니다\"}</em>\r\n                            <br></br>\r\n                            <b>{\"키보드 버튼 4로 선택 가능합니다\"}</b>\r\n                        </React.Fragment>\r\n                    }>\r\n                        <div className=\"color_icon color_4\">\r\n                        </div>\r\n                    </PenColorTooltip>\r\n              </button>\r\n              <button id=\"clr_5\" type=\"button\" className=\"btn btn-neo  color_btn othercolors\" title=\"color 5\"\r\n                onClick={() => manager.setColor(5)}>\r\n                  <PenColorTooltip placement=\"top\" title={\r\n                        <React.Fragment>\r\n                            <Typography color=\"inherit\">Pen Color [LIGHT_GRAY]</Typography>\r\n                            <em>{\"표시되는 펜의 색상을 선택합니다\"}</em>\r\n                            <br></br>\r\n                            <b>{\"키보드 버튼 5로 선택 가능합니다\"}</b>\r\n                        </React.Fragment>\r\n                    }>\r\n                        <div className=\"color_icon color_5\">\r\n                        </div>\r\n                    </PenColorTooltip>\r\n              </button>\r\n              <button id=\"clr_6\" type=\"button\" className=\"btn btn-neo  color_btn othercolors\" title=\"color 6\"\r\n                onClick={() => manager.setColor(6)}>\r\n                  <PenColorTooltip placement=\"top\" title={\r\n                        <React.Fragment>\r\n                            <Typography color=\"inherit\">Pen Color [ORANGE]</Typography>\r\n                            <em>{\"표시되는 펜의 색상을 선택합니다\"}</em>\r\n                            <br></br>\r\n                            <b>{\"키보드 버튼 6로 선택 가능합니다\"}</b>\r\n                        </React.Fragment>\r\n                    }>\r\n                        <div className=\"color_icon color_6\">\r\n                        </div>\r\n                    </PenColorTooltip>\r\n              </button>\r\n              <button id=\"clr_7\" type=\"button\" className=\"btn btn-neo  color_btn othercolors\" title=\"color 7\"\r\n                onClick={() => manager.setColor(7)}>\r\n                  <PenColorTooltip placement=\"top\" title={\r\n                        <React.Fragment>\r\n                            <Typography color=\"inherit\">Pen Color [GREEN]</Typography>\r\n                            <em>{\"표시되는 펜의 색상을 선택합니다\"}</em>\r\n                            <br></br>\r\n                            <b>{\"키보드 버튼 7로 선택 가능합니다\"}</b>\r\n                        </React.Fragment>\r\n                    }>\r\n                        <div className=\"color_icon color_7\">\r\n                        </div>\r\n                    </PenColorTooltip>\r\n              </button>\r\n              <button id=\"clr_8\" type=\"button\" className=\"btn btn-neo  color_btn othercolors\" title=\"color 8\"\r\n                onClick={() => manager.setColor(8)}>\r\n                  <PenColorTooltip placement=\"top\" title={\r\n                        <React.Fragment>\r\n                            <Typography color=\"inherit\">Pen Color [BLUE]</Typography>\r\n                            <em>{\"표시되는 펜의 색상을 선택합니다\"}</em>\r\n                            <br></br>\r\n                            <b>{\"키보드 버튼 8로 선택 가능합니다\"}</b>\r\n                        </React.Fragment>\r\n                    }>\r\n                        <div className=\"color_icon color_8\">\r\n                        </div>\r\n                    </PenColorTooltip>\r\n              </button>\r\n              <button id=\"clr_9\" type=\"button\" className=\"btn btn-neo  color_btn othercolors\" title=\"color 9\"\r\n                onClick={() => manager.setColor(9)}>\r\n                  <PenColorTooltip placement=\"top\" title={\r\n                        <React.Fragment>\r\n                            <Typography color=\"inherit\">Pen Color [PURPLE]</Typography>\r\n                            <em>{\"표시되는 펜의 색상을 선택합니다\"}</em>\r\n                            <br></br>\r\n                            <b>{\"키보드 버튼 9로 선택 가능합니다\"}</b>\r\n                        </React.Fragment>\r\n                    }>\r\n                        <div className=\"color_icon color_9\">\r\n                        </div>\r\n                    </PenColorTooltip>\r\n              </button>\r\n              <button id=\"clr_0\" type=\"button\" className=\"btn btn-neo color_btn othercolors\" title=\"color 0\"\r\n                onClick={() => manager.setColor(0)}>\r\n                  <PenColorTooltip placement=\"top\" title={\r\n                        <React.Fragment>\r\n                            <Typography color=\"inherit\">Pen Color [DARK_GRAY]</Typography>\r\n                            <em>{\"표시되는 펜의 색상을 선택합니다\"}</em>\r\n                            <br></br>\r\n                            <b>{\"키보드 버튼 0로 선택 가능합니다\"}</b>\r\n                        </React.Fragment>\r\n                    }>\r\n                        <div className=\"color_icon color_0\">\r\n                        </div>\r\n                    </PenColorTooltip>\r\n              </button>\r\n          </div>\r\n      {/* </div> */}\r\n      </React.Fragment>\r\n    );\r\n  }\r\nexport default ColorButtons;","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\FullScreenButton.tsx",["531","532","533","534","535"],"import React, { Component, useState } from \"react\";\r\nimport '../../styles/buttons.css';\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport { Theme, Typography, withStyles } from '@material-ui/core';\r\nimport ThemeManager from \"../../styles/ThemeManager\";\r\n\r\nconst FullscreenTooltip = withStyles((theme: Theme) => ({\r\n  tooltip: {\r\n      backgroundColor: '#f5f5f9',\r\n      color: 'rgba(0, 0, 0, 0.87)',\r\n      maxWidth: 240,\r\n      fontSize: theme.typography.pxToRem(12),\r\n      border: '1px solid #dadde9',\r\n  },\r\n}))(Tooltip);\r\n\r\nexport default class FullScreenButton extends React.Component {\r\n  render() {\r\n    return (\r\n      <button id=\"btn_fullscreen\" type=\"button\" className=\"btn btn-neo btn-neo-vertical\" title=\"Fullscreen\"\r\n      onClick = {() => ThemeManager.getInstance().toggleFullScreen()}>\r\n          <FullscreenTooltip placement=\"left\" title={\r\n          <React.Fragment>\r\n              <Typography color=\"inherit\">Fullscreen</Typography>\r\n              <em>{\"전체 화면으로 표시합니다. \"}</em>\r\n              <br></br>\r\n              <b>{\"돌아가려면 [ESC]키를 눌러야 합니다.\"}</b>\r\n          </React.Fragment>\r\n              }>\r\n          <div className=\"c2\">\r\n              <img src={ require(\"../../icons/icon_fullscreen_n.png\") } className=\"normal-image\"></img>\r\n              <img src={ require(\"../../icons/icon_fullscreen_p.png\") } className=\"hover-image\"></img>\r\n          </div>\r\n        </FullscreenTooltip>\r\n      </button>\r\n      );\r\n  }\r\n}","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\buttons\\TracePointButton.tsx",["536","537","538","539","540","541","542","543"],"import React, { Component, useState } from \"react\";\r\nimport '../../styles/buttons.css';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { setPointerTracer } from '../../store/reducers/pointerTracer';\r\nimport jQuery from \"jquery\";\r\nimport { RootState } from '../../store/rootReducer';\r\n\r\nlet $ = jQuery;\r\n\r\nconst TracePointButton = () => {\r\n  const isTrace = useSelector((state:RootState) => state.pointerTracer.isTrace)\r\n  const dispatch = useDispatch();\r\n\r\n  const setEnable = (elem_name: string, sw: boolean) => {\r\n    var $elem = $(`#${elem_name}`);\r\n    if (sw) {\r\n        let $elem = $(\"#btn_tracepoint\").find(\".c2\");\r\n        $elem.addClass(\"checked\");\r\n    } else {\r\n        let $elem = $(\"#btn_tracepoint\").find(\".c2\");\r\n        $elem.removeClass(\"checked\");\r\n    }\r\n  }\r\n  \r\n  const onTogglePointerTracer = () => {\r\n    dispatch(setPointerTracer(!isTrace));\r\n    setEnable(\"btn_tracepoint\", isTrace);\r\n  }\r\n\r\n    return (\r\n      <button id=\"btn_tracepoint\" type=\"button\" className=\"btn btn-neo btn-neo-vertical\" title=\"Trace Point\"\r\n      onClick = {() => onTogglePointerTracer()}>\r\n          <div className=\"c2 checked\">\r\n              <img src={ require(\"../../icons/icon_point_d.png\") } className=\"toggle-off normal-image\"></img>\r\n              <img src={ require(\"../../icons/icon_point_p.png\") } className=\"toggle-off hover-image\"></img>\r\n              <img src={ require(\"../../icons/icon_point_n.png\") } className=\"toggle-on normal-image\"></img>\r\n              <img src={ require(\"../../icons/icon_point_p.png\") } className=\"toggle-on hover-image\"></img>\r\n          </div>\r\n      </button>\r\n    );\r\n}\r\nexport default TracePointButton;","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\navbar\\PageNumbering.tsx",["544","545","546","547","548"],"import React from 'react';\r\nimport '../../styles/main.css';\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport { Theme, Typography, withStyles } from '@material-ui/core';\r\n\r\nconst PageTooltip = withStyles((theme: Theme) => ({\r\n  tooltip: {\r\n      backgroundColor: '#f5f5f9',\r\n      color: 'rgba(0, 0, 0, 0.87)',\r\n      maxWidth: 240,\r\n      fontSize: theme.typography.pxToRem(12),\r\n      border: '1px solid #dadde9',\r\n  },\r\n}))(Tooltip);\r\n\r\nclass pageNumbering extends React.Component {\r\n  render() {\r\n    return (\r\n      // <div className=\"navbar-menu d-flex justify-content-center align-items-center neo_shadow\">\r\n      <React.Fragment>\r\n        <button id=\"btn_prevpage\" type=\"button\" className=\"btn btn-neo \" title=\"Previous page\">\r\n          <PageTooltip placement=\"top\" title={\r\n            <React.Fragment>\r\n                <Typography color=\"inherit\">Pre Page</Typography>\r\n                <em>{\"현재 필기 중인 페이지를, 앞쪽 페이지로 이동시킵니다.\"}</em>\r\n                <br></br>\r\n                <b>{\"키보드 버튼 Page Up으로 이동 가능합니다\"}</b>\r\n            </React.Fragment>\r\n                }>\r\n            <div className=\"c2\">\r\n              <img src={require('../../icons/icon_prev_n.png')} className=\"normal-image\"></img>\r\n              <img src={require('../../icons/icon_prev_p.png')} className=\"hover-image\"></img>\r\n            </div>\r\n          </PageTooltip>\r\n        </button>\r\n        <input type=\"text\" className=\"form-control-plaintext form-control-sm neo-form-pdf-number\" placeholder=\".form-control-sm\"\r\n            value=\"Page:\" readOnly />\r\n        <input id=\"curr_page_num\" type=\"text\" className=\"form-control form-control-sm neo-form-pdf-number\"\r\n            placeholder=\".form-control-sm\" value=\" \" />\r\n        <input id=\"page_count\" type=\"text\" className=\"form-control-plaintext form-control-sm neo-form-pdf-number\"\r\n            placeholder=\".form-control-sm\" value=\"/\" readOnly />\r\n        <button id=\"btn_nextpage\" type=\"button\" className=\"btn btn-neo \" title=\"Next page\">\r\n        <PageTooltip placement=\"top\" title={\r\n          <React.Fragment>\r\n                <Typography color=\"inherit\">Next Page</Typography>\r\n                <em>{\"현재 필기 중인 페이지를, 뒤쪽 페이지로 이동시킵니다.\"}</em>\r\n                <br></br>\r\n                <b>{\"키보드 버튼 Page Down으로 이동 가능합니다\"}</b>\r\n            </React.Fragment>\r\n                }>\r\n            <div className=\"c2\">\r\n                <img src={require('../../icons/icon_next_n.png')} className=\"normal-image\"></img>\r\n                <img src={require('../../icons/icon_next_p.png')} className=\"hover-image\"></img>\r\n            </div>\r\n          </PageTooltip>\r\n        </button>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default pageNumbering;","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\navbar\\PrintButton.tsx",["549","550"],"import React from 'react';\r\nimport '../../styles/main.css';\r\n\r\nclass printFunction extends React.Component {\r\n  render() {\r\n    return (\r\n      // <div className=\"navbar-menu d-flex justify-content-center align-items-center neo_shadow\">\r\n      <React.Fragment>\r\n        <button id=\"btn_print_pdf\" type=\"button\" disabled className=\"btn btn-neo \" title=\"Print PDF\">\r\n            <div className=\"c2 disabled\">\r\n                <img src={require('../../icons/icon_print_n.png')} className=\"normal-image\"></img>\r\n                <img src={require('../../icons/icon_print_p.png')} className=\"hover-image\"></img>\r\n            </div>\r\n        </button>\r\n        </React.Fragment>\r\n      // </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default printFunction;","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\navbar\\FileLoad.tsx",["551","552","553"],"import React from 'react';\r\nimport '../../styles/main.css';\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport { Theme, Typography, withStyles } from '@material-ui/core';\r\n\r\nconst PdfFileTooltip = withStyles((theme: Theme) => ({\r\n  tooltip: {\r\n      backgroundColor: '#f5f5f9',\r\n      color: 'rgba(0, 0, 0, 0.87)',\r\n      maxWidth: 240,\r\n      fontSize: theme.typography.pxToRem(12),\r\n      border: '1px solid #dadde9',\r\n  },\r\n}))(Tooltip);\r\n\r\nclass fileLoad extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <button id=\"btn_file_open\" type=\"button\" className=\"btn btn-neo \" title=\"Open a file\">\r\n          <PdfFileTooltip placement=\"top\" title={\r\n            <React.Fragment>\r\n                <Typography color=\"inherit\">PDF File Open</Typography>\r\n                <em>{\"배경으로 쓸 PDF 파일을 엽니다. 스마트 플레이트로 조작하거나, 인쇄하여 덧필기할 수 있습니다.\"}</em>\r\n                <br></br>\r\n                <b>{\"키보드 버튼 Ctrl + O으로 이동 가능합니다\"}</b>\r\n            </React.Fragment>\r\n                }>\r\n            <div className=\"c2\">\r\n                <img src={require('../../icons/icon_file_n.png')} className=\"normal-image\"></img>\r\n                <img src={require('../../icons/icon_file_p.png')} className=\"hover-image\"></img>\r\n            </div>\r\n          </PdfFileTooltip>\r\n        </button>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default fileLoad;","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\navbar\\UpperNav.tsx",["554"],"import React from 'react';\r\nimport '../../styles/main.css';\r\nimport Upload from './Upload';\r\n// import Get from './Get';\r\n\r\nclass upperNav extends React.Component {\r\n    render() {\r\n        return (\r\n            <nav id=\"uppernav\" className=\"navbar navbar-light bg-transparent\" style={{float: \"left\"}}>\r\n                <a id=\"grida_board\" className=\"navbar-brand\" href=\"#\">Grida board\r\n                    <small id=\"neo_smartpen\" className=\"text-muted\">\r\n                        <span data-l10n-id=\"by_neosmart_pen\"> by Neo smartpen</span>\r\n                    </small>\r\n                </a>\r\n                <Upload />\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default upperNav;","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\navbar\\CalibrationMenual.tsx",["555","556"],"import React from 'react';\r\nimport '../../styles/main.css';\r\n\r\nconst style = {\r\n  width: '36px',\r\n  height: '36px',\r\n  padding: '4px'\r\n}\r\n\r\nclass calibrationMenual extends React.Component {\r\n  render() {\r\n    return (\r\n          <button id=\"btn_start_calibration\" disabled type=\"button\" className=\"btn btn-neo\" title=\"Pairing paper with PDF\">\r\n              <div className=\"c2 disabled\">\r\n                  <img style={style} src={require('../../icons/icon_calibration_n.png')} className=\"normal-image\"></img>\r\n                  <img style={style} src={require('../../icons/icon_calibration_p.png')} className=\"hover-image\"></img>\r\n              </div>\r\n          </button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default calibrationMenual;","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\index.js",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\neosmartpen.ts",["557"],"import PenComm, { deviceSelectDlg } from \"./pencomm\";\nimport InkStorage, { IOpenStrokeArg } from \"../penstorage/InkStorage\";\nimport { paperInfo } from \"../noteserver/PaperInfo\";\nimport Dispatcher from \"../penstorage/EventSystem\";\nimport PenManager from \"./PenManager\";\nimport \"../types\";\nimport { IPenEvent, IBrushState } from \"../DataStructure/Structures\";\nimport { NeoStroke, PEN_STATE, PenEventName } from \"../DataStructure\";\nimport { IWritingSurfaceInfo } from \"../DataStructure/Structures\";\nimport NeoDot from \"../DataStructure/NeoDot\";\nimport { IBrushType } from \"../DataStructure/Enums\"\nimport { fabric } from \"fabric\";\n\ninterface IPenMovement {\n  downEvent: IPenEvent,\n  infoEvent: IPenEvent,\n  moveEvents: IPenEvent[],\n  upEvent: IPenEvent,\n  numMovement: number,\n  stroke: NeoStroke,\n\n}\n\nconst NUM_HOVER_POINTERS = 6;\n\nexport class NeoSmartpen {\n  currPenMovement: IPenMovement = {\n    downEvent: null,\n    infoEvent: null,\n    moveEvents: [],\n    upEvent: null,\n    numMovement: 0,\n    stroke: null,\n  };\n\n  /** 펜 종류 마다의 굵기와 색깔 */\n  penState: IBrushState[] = new Array(Object.keys(IBrushType).length);\n\n  /** 펜 종류 (렌더러 종류) */\n  penRendererType: IBrushType = IBrushType.PEN;\n\n  lastInfoEvent: IPenEvent = null;\n  protocolHandler: PenComm = new PenComm(this);\n  mac: string = null;\n  \n  lastState: PEN_STATE = PEN_STATE.NONE;\n\n  surfaceInfo: IWritingSurfaceInfo = {\n    section: 3,\n    owner: 27,\n    book: 168,\n    Xmin: 3.12,\n    Ymin: 3.12,\n    Xmax: 91.68,\n    Ymax: 128.36,\n    Mag: 1,\n  }\n\n  storage: InkStorage = InkStorage.getInstance();\n  manager: PenManager = PenManager.getInstance();\n  dispatcher: Dispatcher = new Dispatcher();\n\n  visibleHoverPoints = NUM_HOVER_POINTERS;\n  pathHoverPoints: Array<fabric.Circle> = new Array(0);\n  timeOut = null;\n  waitCount: number = 0;\n  eraserLastPoint:object = {};\n\n  pathPenTracker: fabric.Circle;\n  /**\n   *\n   * @param customStorage\n   */\n  constructor(customStorage: InkStorage = null) {\n    // this.appPen = appPenHandler;\n    if (customStorage) {\n      console.log(\"use custom Ink Storage\");\n      this.storage = customStorage;\n    }\n    else {\n      console.log(\"use default Ink Storage\");\n      this.storage = InkStorage.getInstance();\n    }\n\n    for (let i = 0; i < this.penState.length; i++) {\n      this.penState[i] = {\n        thickness: 0.1,\n        color: \"rgba(0,0,0,255)\",\n      };\n    }\n\n  }\n\n  initPenTracker() {\n    this.pathPenTracker = new fabric.Circle({\n      left : -30,\n      top : -30,\n      radius: 5,\n      opacity : 0.3,\n      fill: \"#7a7aff\",\n      stroke: \"#7a7aff\",\n      dirty: true,\n      name : 'penTracker',\n      data : 'pt'\n    });\n  }\n\n  initHoverCursor() {\n    for (var i = 0; i < 6; i++) {\n      var path = new fabric.Circle({\n          radius: (NUM_HOVER_POINTERS - i) ,\n          fill: \"#ff2222\",\n          stroke: \"#ff2222\",\n          opacity: (NUM_HOVER_POINTERS - i) / NUM_HOVER_POINTERS / 2,\n          left : -30,\n          top : -30,\n          hasControls : false,\n          dirty: true,\n          name : 'hoverPoint',\n          data : 'hp'\n      });\n      this.pathHoverPoints.push(path);\n    }\n  }\n\n  /**\n   *\n   */\n  getMac = (): string => {\n    return this.mac;\n  }\n\n\n  /**\n   *\n   */\n  getBtDevice = (): BluetoothDevice => {\n    return this.protocolHandler.getBtDevice();\n  }\n\n\n  /**\n   *\n   */\n  async connect(): Promise<boolean> {\n    let device = null;\n    try {\n      device = await deviceSelectDlg();\n    }\n    catch (e) {\n      console.log(e);\n      return false;\n    }\n\n    if (this.manager.isAlreadyConnected(device)) {\n      console.error(`bluetooth device(id:${device.id}) already connectged or connecting process is being processed`);\n      return false;\n    }\n\n    if (device) {\n      this.protocolHandler.connect(device);\n      this.manager.add(this, device);\n    }\n    else {\n      console.error(\"Device NULL\");\n      return false;\n    }\n\n    return true;\n  }\n\n\n  /**\n   *\n   * @param device\n   */\n  async connectByWebBtDevice(device: BluetoothDevice) {\n    this.protocolHandler.connect(device);\n  }\n\n\n  /**\n   *\n   * @param mac\n   */\n  async connectByMacAddress(mac: string) {\n    throw new Error(`connectByMacAddress() not implemented yet.`);\n  }\n\n  /**\n   *\n   */\n  resetPenStroke = () => {\n    // let { currPenMovement} = this;\n    let p = this.currPenMovement;\n\n    p.downEvent = null;\n    p.infoEvent = null;\n    p.numMovement = 0;\n    p.moveEvents = [];\n    p.upEvent = null;\n  }\n\n\n  /**\n   *\n   * @param event\n   */\n  onPenDown = (event: IPenEvent) => {\n    this.resetPenStroke();\n    this.currPenMovement.downEvent = event;\n    this.lastState = PEN_STATE.PEN_DOWN;\n\n    // console.log(event);\n\n    // storage에 저장\n    if (!this.storage) {\n      console.error(\"Ink Storage has not been initialized\");\n    }\n\n    let mac = this.mac;\n    let time = event.timeStamp;\n\n    const openStrokeArg: IOpenStrokeArg = {\n      mac,\n      time,\n      penTipMode: event.penTipMode,\n      brushType: this.penRendererType,\n      thickness: this.penState[this.penRendererType].thickness,\n      color: this.penState[this.penRendererType].color,\n    }\n\n    let stroke = this.storage.openStroke(openStrokeArg);\n    let strokeKey = stroke.key;\n    this.currPenMovement.stroke = stroke;\n\n    console.log(`NeoSmartpen dispatch event ON_PEN_DOWN`);\n    this.dispatcher.dispatch(PenEventName.ON_PEN_DOWN, { strokeKey, mac, time, stroke });\n\n    this.manager.setActivePen(event.penId);\n    // event 전달\n    // let ph = this.appPen;\n    // ph.onPenDown(event);\n  }\n\n  /**\n   * 펜의 움직임\n   *    1) down/up이 있는 경우: DOWN -> INFO -> MOVE -> MOVE -> ... -> UP -> INFO와 같이 나옴\n   *    2) hove의 경우: (페이지가 바뀌면) INFO -> HOVER_MOVE -> HOVER_MOVE...\n   *\n   * pen down 된 후의 page info, 실질적으로 pen_down과 같음\n   *\n   * @param event\n   * @param hover\n   */\n  onPageInfo = (event: IPenEvent, hover: boolean) => {\n    // console.log(event);\n    this.lastInfoEvent = event;\n\n\n    // margin 값을 가져오기 위해서\n    let info = paperInfo.getPaperInfo({ section: event.section, book: event.book, owner: event.owner, page: event.page });\n    if (info) this.surfaceInfo = info;\n\n    // 이전에 펜 down이 있었으면\n    if (this.lastState === PEN_STATE.PEN_DOWN) {\n      this.currPenMovement.infoEvent = event;\n      // this.currPenMovement.infoEvent = {\n      //   section: event.section,\n      //   owner: event.owner,\n      //   book: event.book,\n      //   page: event.page,\n\n      //   ...event,\n      // };\n\n      if (!this.storage) {\n        console.error(\"Ink Storage has not been initialized\");\n      }\n      else {\n        const { section, owner, book, page, timeStamp } = event;\n        let mac = this.mac;\n        if (!mac) {\n          throw new Error(\"mac address was not registered\");\n        }\n\n        if (!hover) {\n          // storage에 저장\n          let stroke = this.currPenMovement.stroke;\n          let strokeKey = stroke.key;\n          this.storage.setStrokeInfo(strokeKey, section, owner, book, page, timeStamp);\n\n          // hand pen page the event\n          this.dispatcher.dispatch(PenEventName.ON_PEN_PAGEINFO, {\n            strokeKey, mac, stroke, section, owner, book, page,\n            time: event.timeStamp\n          });\n        }\n        else {\n          // hand hover page the event\n          this.dispatcher.dispatch(PenEventName.ON_PEN_HOVER_PAGEINFO, {\n            mac, section, owner, book, page, time: event.timeStamp\n          });\n\n        }\n      }\n      \n      // let ph = this.appPen;\n      // ph.onPageInfo(event);\n    }\n    \n    if (hover) {\n      const { section, owner, book, page, timeStamp } = event;\n      let mac = this.mac;\n\n      this.dispatcher.dispatch(PenEventName.ON_PEN_HOVER_PAGEINFO, {\n        mac, section, owner, book, page, time: event.timeStamp, pen:this\n      });\n    }\n    \n    // event 전달\n    // let ph = this.appPen;\n    // if (hover) ph.onHoverPageInfo(event);\n\n    return;\n  }\n\n\n\n  private adjustPaperXminYmin = (event: IPenEvent) => {\n    event.x -= this.surfaceInfo.Xmin;\n    event.y -= this.surfaceInfo.Ymin;\n\n    return event;\n  }\n\n  /**\n   * pen down 상태에서 움직임\n   * @param event\n   */\n  onPenMove = (event: IPenEvent) => {\n    this.lastState = PEN_STATE.PEN_MOVE;\n\n    // margin을 paperInfo의 Xmin, Ymin 값에 따라 조정\n    // event = this.adjustPaperXminYmin(event);\n\n    // 기존의 방식에서는 처리하지 않았던 것, redundant할 수 있다.\n    if (this.currPenMovement.infoEvent) {\n      event.owner = this.currPenMovement.infoEvent.owner;\n      event.book = this.currPenMovement.infoEvent.book;\n      event.page = this.currPenMovement.infoEvent.page;\n    } else {\n      /**\n       * 종이에 터치되지 않고 들어오는 호버 이벤트\n       *\n       */\n      event.owner = -1;\n      event.book = -1;\n      event.page = -1;\n      // let srcLine = getFunctionName();\n      // console.error(`Get PEN_MOVE without PEN_INFO ${srcLine}`);\n      // throw new Error( `Get PEN_MOVE without PEN_INFO`);\n    }\n\n    this.currPenMovement.numMovement++;\n    event.isFirstDot = (this.currPenMovement.numMovement === 1);\n\n    // storage에 저장\n    if (!this.storage) {\n      console.error(\"Ink Storage has not been initialized\");\n    }\n\n    const dot = new NeoDot({\n      dotType: 2,   // moving\n      deltaTime: event.timediff,\n      time: event.timeStamp,\n      f: event.force,\n      x: event.x,\n      y: event.y,\n    });\n\n    let stroke = this.currPenMovement.stroke;\n    let strokeKey = stroke.key;\n    this.storage.appendDot(strokeKey, dot);\n    let pen = this;\n\n    // hand the event\n    this.dispatcher.dispatch(PenEventName.ON_PEN_MOVE, { strokeKey, mac: stroke.mac, stroke, dot, pen });\n\n    // 이벤트 전달\n    // console.log(\"    -> onPenMove\" + event);\n    // let ph = this.appPen;\n    // ph.onPenMove(event);\n  }\n\n  /**\n   * hover 상태에서 움직임\n   * @param event\n   */\n  onHoverMove = (event: IPenEvent) => {\n    this.lastState = PEN_STATE.HOVER_MOVE;\n\n    // margin을 paperInfo의 Xmin, Ymin 값에 따라 조정\n    // event = this.adjustPaperXminYmin(event);\n\n\n    // console.log(\"    -> onHoverMove\" + event);\n    // let ph = this.appPen;\n    // ph.onHoverMove(event);\n    let mac = this.mac;\n    if (!mac) {\n      throw new Error(\"mac address was not registered\");\n    }\n    this.dispatcher.dispatch(PenEventName.ON_HOVER_MOVE, { pen: this, mac, event });\n  }\n\n    /**\n   * hover 상태에서 움직임\n   * @param event\n   */\n  onHoverPageInfo = (event: IPenEvent) => {\n    this.lastState = PEN_STATE.HOVER_MOVE;\n;\n    let mac = this.mac;\n    if (!mac) {\n      throw new Error(\"mac address was not registered\");\n    }\n\n    this.dispatcher.dispatch(PenEventName.ON_PEN_HOVER_PAGEINFO, { pen: this, mac, event });\n  }\n\n  /**\n   * pen up\n   * @param event\n   */\n  onPenUp = (event: IPenEvent) => {\n    this.lastState = PEN_STATE.PEN_UP;\n\n    this.currPenMovement.upEvent = event;\n\n    // storage에 저장\n    if (!this.storage) {\n      console.error(\"Ink Storage has not been initialized\");\n    }\n\n    if (this.penRendererType !== IBrushType.ERASER) {\n      let stroke = this.currPenMovement.stroke;\n      let strokeKey = stroke.key;\n      this.storage.closeStroke(strokeKey);\n\n      const { mac, section, owner, book, page } = stroke;\n      this.dispatcher.dispatch(PenEventName.ON_PEN_UP, { strokeKey, mac, pen: this, stroke, section, owner, book, page });\n\n      this.resetPenStroke();\n    }\n  }\n\n  /**\n   * ncode error\n   * @param event\n   */\n  onNcodeError = (event: IPenEvent) => {\n    // console.log(event);\n\n    // let ph = this.appPen;\n    // ph.onNcodeError(event);\n    let mac = this.mac;\n    if (!mac) {\n      throw new Error(\"mac address was not registered\");\n    }\n\n    this.manager.onNcodeError({ pen: this, event });\n    this.dispatcher.dispatch(PenEventName.ON_NCODE_ERROR, { pen: this, mac, event });\n  }\n\n\n\n  /**\n   *\n   * @param event\n   */\n  onPasscodeRequired = (event: IPenEvent) => {\n    console.log(\"onPasscodeRequired\" + event);\n    let passcode = prompt(\"please enter passcode \" + (9 - event.retryCount));\n    this.protocolHandler.sendPasscode(passcode);\n\n    let mac = this.protocolHandler.getMac();\n    if (!mac) {\n      throw new Error(\"mac address was not registered\");\n    }\n    this.dispatcher.dispatch(PenEventName.ON_PW_REQUIRED, { pen: this, mac, event });\n    // throw new Error(\"Not implemented: onPasscodeRequired\");\n  }\n\n\n\n  /**\n   *\n   * @param event\n   */\n  onConnected = (event: IPenEvent) => {\n    // let ph = this.appPen;\n    // ph.onConnected(event);\n\n    console.log(\"CONNECTED\");\n    let mac = this.protocolHandler.getMac();\n    this.mac = mac;\n    console.log(`Connected: ${mac}`);\n\n    this.manager.onConnected({ pen: this, event });\n    this.dispatcher.dispatch(PenEventName.ON_CONNECTED, { pen: this, mac, event });\n  }\n\n\n  /**\n   *\n   * @param event\n   */\n  onFirmwareUpgradeNeeded = (event: IPenEvent) => {\n    // let ph = this.appPen;\n    // ph.onFirmwareUpgradeNeeded(event);\n\n    let mac = this.mac;\n    if (!mac) {\n      throw new Error(\"mac address was not registered\");\n    }\n    this.dispatcher.dispatch(PenEventName.ON_UPGRADE_NEEDED, { pen: this, mac, event });\n  }\n\n\n  /**\n   *\n   * @param event\n   */\n  onDisconnected = (event: IPenEvent) => {\n    // let event = makePenEvent(DeviceTypeEnum.PEN, PenEventEnum.ON_DISCONNECTED);\n    // let ph = this.appPen;\n    // ph.onDisconnected(event);\n    let mac = this.mac;\n    if (!mac) {\n      console.error(`mac address was not registered`);\n      console.error(event);\n    }\n    else {\n      this.manager.onDisconnected({ pen: this, event });\n      this.dispatcher.dispatch(PenEventName.ON_DISCONNECTED, { pen: this, mac, event });\n    }\n  }\n\n  setColor(color: string) {\n    this.penState[this.penRendererType].color = color;\n  }\n\n  setThickness(thickness: number) {\n    this.penState[this.penRendererType].thickness = thickness;\n  }\n  \n  setPenRendererType(type) {\n    this.penRendererType = type;\n  }\n  \n  /**\n   *\n   * @param eventName\n   * @param listener\n   */\n  public addEventListener(eventName: PenEventName, listener: Function) {\n    if (eventName === PenEventName.ON_PEN_DOWN) {\n      console.log(`NeoSmartpen: addEventListener ${eventName}`);\n    }\n\n    this.dispatcher.on(eventName, listener, null);\n  }\n\n\n  /**\n   *\n   * @param eventName\n   * @param listener\n   */\n  public removeEventListener(eventName: PenEventName, listener: Function) {\n    this.dispatcher.off(eventName, listener);\n  }\n}\n","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\index.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\styles\\ThemeManager.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\penstorage\\EventSystem.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\components\\navbar\\Upload.js",["558","559","560","561","562","563"],"import React from 'react';\r\nimport { gapi } from 'gapi-script';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport * as PdfJs from \"pdfjs-dist\";\r\n\r\nimport { resolve } from 'path';\r\n\r\nvar FOLDER_ID = \"root\";\r\n\r\nexport default class Upload extends React.Component {\r\n  \r\n  mappingInfoUploadProcess = async () => {\r\n    var self = this;\r\n    var folderId;\r\n    gapi.load('client', function () {\r\n      gapi.client.load('drive', 'v2', async function () {\r\n        const folderResponse = await gapi.client.drive.files.list({\r\n          q: \"mimeType = 'application/vnd.google-apps.folder'\" //폴더만 걸러주는 filter\r\n        })\r\n\r\n        var folders = folderResponse.result.items;\r\n        var isGridaFolderExist = false;\r\n\r\n        if (folders && folders.length > 0) {\r\n          for (var i = 0; i < folders.length; i++) {\r\n            var folder = folders[i];\r\n            if (folder.title === 'Grida') {\r\n              isGridaFolderExist = true;\r\n              folderId = folderId;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (isGridaFolderExist) {\r\n          //mappingInfo.json 있는지 확인 후 없으면\r\n          const fileResponse = await gapi.client.drive.files.list();\r\n          var files = fileResponse.result.items;\r\n          var isMappingFileExist = false;\r\n          if (files && files.length > 0) {\r\n            for (var i = 0; i < files.length; i++) {\r\n              var file = files[i];\r\n              if (file.title === 'mappingInfo.json') {\r\n                var fileId = file.id;\r\n                var getFileRequest = gapi.client.drive.files.get({\r\n                  fileId: fileId,\r\n                  alt: 'media'\r\n                })\r\n                var content = `\r\n                  {\"sobp\" : {\"s\":3,\"o\":281,\"b\":123,\"p\":2},\r\n                   \"pdf_info\" : {\"file_name\" : \"filename\",\"fp\" : \"finger print\"}\r\n                  }\r\n                `; //여기에다가 새로운 content 내용을 받을거야\r\n                getFileRequest.then(await function(response) {\r\n\r\n                  var currentMappingObj = JSON.parse(response.body);\r\n                  var newMappingObj = JSON.parse(content);\r\n\r\n                  currentMappingObj.mapping_info.push(newMappingObj);\r\n                  \r\n                  content = JSON.stringify(currentMappingObj);\r\n                  \r\n                  var contentBlob = new Blob([content], {'type': 'application/json'});\r\n                  self.updateMappingInfo(fileId, contentBlob, function(resp) {\r\n                  });\r\n                }, function(error) {\r\n                  console.error(error)\r\n                })\r\n                isMappingFileExist = true;\r\n                break;\r\n              } \r\n              if (!isMappingFileExist) {\r\n                self.createNewMappingInfo(folderId);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else if (!isGridaFolderExist) {\r\n          await self.createGridaFolder();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  updateMappingInfo = (fileId, contentBlob, callback) => {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.responseType = 'json';\r\n    xhr.onreadystatechange = function() {\r\n      if (xhr.readyState != XMLHttpRequest.DONE) {\r\n        return;\r\n      }\r\n      callback(xhr.response);\r\n    };\r\n    xhr.open('PATCH', 'https://www.googleapis.com/upload/drive/v3/files/' + fileId + '?uploadType=media');\r\n    xhr.setRequestHeader('Authorization', 'Bearer ' + gapi.auth.getToken().access_token);\r\n    xhr.send(contentBlob);\r\n  }\r\n\r\n  createNewMappingInfo = async (folderId) => {\r\n    var fileContent = `\r\n    {\"mapping_info\":[\r\n      {\"sobp\" : {\"s\":3,\"o\":281,\"b\":123,\"p\":1},\r\n       \"pdf_info\" : {\"file_name\" : \"filename\",\"fp\" : \"finger print\"}\r\n      }\r\n    ]}`; //sobp object와 pdf info를 object로 받아서 stringfy해준 뒤 fileContent에 삽입\r\n    var file = new Blob([fileContent], {type: 'text/plain'});\r\n    var metadata = {\r\n        'name': 'mappingInfo.json', // Filename at Google Drive\r\n        'mimeType': 'application/json', // mimeType at Google Drive\r\n        'parents': [folderId], // Folder ID at Google Drive\r\n    };\r\n    \r\n    var accessToken = gapi.auth.getToken().access_token; // Here gapi is used for retrieving the access token.\r\n\r\n    var form = new FormData();\r\n    form.append('metadata', new Blob([JSON.stringify(metadata)], {type: 'application/json'}));\r\n    form.append('file', file);\r\n    \r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open('post', 'https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id');\r\n    xhr.setRequestHeader('Authorization', 'Bearer ' + accessToken);\r\n    xhr.responseType = 'json';\r\n    xhr.onload = () => {\r\n        console.log('mapping info file id : ');\r\n        console.log(xhr.response.id); // Retrieve uploaded file ID.\r\n    };\r\n    xhr.send(form);\r\n  }\r\n\r\n  createGridaFolder = async () => {\r\n    var self = this;\r\n    var access_token = gapi.auth.getToken().access_token;\r\n\r\n    var request = gapi.client.request({\r\n        'path': '/drive/v2/files/',\r\n        'method': 'POST',\r\n        'headers': {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + access_token,             \r\n        },\r\n        'body':{\r\n            \"title\" : \"Grida\",\r\n            \"mimeType\" : \"application/vnd.google-apps.folder\",\r\n        }\r\n    });\r\n\r\n    request.execute(await function(resp) { \r\n      self.createNewMappingInfo(resp.id);\r\n    });\r\n  }\r\n\r\n  listFiles = () => {\r\n    gapi.load('client', function () {\r\n      gapi.client.load('drive', 'v2', function () {\r\n\r\n        var fileId = \"\";\r\n\r\n        gapi.client.drive.files.list({\r\n          'pageSize': 10,\r\n          'fields': \"*\"\r\n        }).then(function(response) {\r\n          console.log(response);\r\n          var files = response.result.items;\r\n          console.log(response.result.items);\r\n    \r\n          if (files && files.length > 0) {\r\n            for (var i = 0; i < files.length; i++) {\r\n              var file = files[i];\r\n              if (file.title === 'hi.pdf') {\r\n                console.log('file : ');\r\n                console.log(file);\r\n                fileId = file.id;\r\n              }\r\n            }\r\n          }\r\n\r\n          var request = gapi.client.drive.files.get({\r\n            fileId: fileId,\r\n            alt: 'media'\r\n          })\r\n          request.then(function(response) {\r\n            console.log(response);\r\n          }, function(error) {\r\n            console.error(error)\r\n          })\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  readMappingInfo = () => {\r\n\r\n    gapi.load('client', function () {\r\n      gapi.client.load('drive', 'v2', async function () {\r\n        const fileResponse = await gapi.client.drive.files.list();\r\n        var files = fileResponse.result.items;\r\n\r\n        if (files && files.length > 0) {\r\n          for (var i = 0; i < files.length; i++) {\r\n            var file = files[i];\r\n            if (file.title === 'mappingInfo.json') {\r\n              var fileId = file.id;\r\n              var getFileRequest = gapi.client.drive.files.get({\r\n                fileId: fileId,\r\n                alt: 'media'\r\n              })\r\n\r\n              getFileRequest.then(await function(response) {\r\n                var currentMappingObj = JSON.parse(response.body);\r\n                var content = JSON.stringify(currentMappingObj);\r\n                console.log(content);\r\n              }, function(error) {\r\n                console.error(error)\r\n              })\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  readPDF = () => {\r\n    gapi.load('client', function () {\r\n      gapi.client.load('drive', 'v2', async function () {\r\n        const fileResponse = await gapi.client.drive.files.list();\r\n        var files = fileResponse.result.items;\r\n\r\n        if (files && files.length > 0) {\r\n          for (var i = 0; i < files.length; i++) {\r\n            var file = files[i];\r\n            var fileId = file.id;\r\n            var getFileRequest = gapi.client.drive.files.get({\r\n              fileId: fileId,\r\n              alt: 'media',\r\n            });\r\n\r\n            if (file.mimeType === 'application/pdf') {\r\n              console.log(getFileRequest);\r\n              console.log(file.mimeType);\r\n\r\n              getFileRequest.then(await function(response) {\r\n                var docInitParams = { data: response.body };\r\n                PdfJs.getDocument(docInitParams).promise.then(function(pdf) {\r\n                  console.log('finger : ');\r\n                  console.log(pdf.fingerprint);\r\n                });\r\n              }, function(error) {\r\n                console.error(error)\r\n              })\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n      return (\r\n        <div>\r\n        <button id=\"mapping_info_process\" onClick={this.mappingInfoUploadProcess}>\r\n          Upload Mapping Info\r\n        </button>\r\n        <button id=\"read_mapping_info\" onClick={this.readMappingInfo}>\r\n          Read Mapping Info\r\n        </button>\r\n        <button id=\"read_mapping_info\" onClick={this.readPDF}>\r\n          Read PDF\r\n        </button>\r\n          <GoogleLogin \r\n            clientId=\"169738066451-5u100n2i6rko17jhmtpvq0bnjuedj7g4.apps.googleusercontent.com\"\r\n            buttonText=\"Login\"\r\n            onSuccess={this.responseGoogle}\r\n            onFailure={this.responseGoogle}\r\n            cookiePolicy={'single_host_origin'}\r\n          />\r\n        </div>\r\n      )\r\n  }\r\n}","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\DataStructure\\Enums.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\constants.js",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\StorageRenderer.js",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\noteserver\\NoteserverClient.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\noteserver\\PaperInfo.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\utils\\UtilsFunc.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\MixedPageView.tsx",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\types\\index.js",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\PenBasedRenderer.tsx",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\RenderWorkerBase.tsx",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\DefaultOption.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\CanvasColorConverter.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintDataTypes.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\DataStructure\\index.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Locales\\i18n.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PdfPrintButton.tsx",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\Modal\\PrintOptionDialog.tsx",["564","565","566","567"],"import React, {useState} from \"react\";\r\n// import { Container, Modal, Row, Col, Button } from \"react-bootstrap\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { Button, Box, Input } from \"@material-ui/core\";\r\n\r\nimport { IPrintingProgress, IPrintOption, MediaSize, PageInfo } from '../PrintDataTypes';\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport $ from 'jquery';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    margin: 'auto',\r\n    width: 'fit-content',\r\n  },\r\n  formControl: {\r\n    marginTop: theme.spacing(2),\r\n    minWidth: 120,\r\n  },\r\n  formControlLabel: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n}));\r\nexport default function PrintOptionDialog () {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [IPrintOption, setIPrintOption] = useState({\r\n    codeDensity: 2,\r\n    printDpi: 600,\r\n    pdfRenderingDpi: 300,\r\n    putCalibrationMark: true,\r\n    printNcode: true,\r\n    dotsInACell: 7,\r\n    mediaSize: MediaSize.A4,\r\n    direction: \"auto\",\r\n    colorMode: 1,\r\n    scaleUpToMedia: true,\r\n    scaleDownToMedia: true,\r\n    targetPages: \"\",\r\n    pagesPerSheet: 1,\r\n    pageInfo: PageInfo.first_page,\r\n    debugMode: 0,\r\n    hasToPutNcode: true\r\n  })\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleClose = (e) => {\r\n    setIPrintOption({\r\n      ...IPrintOption,\r\n      codeDensity: 2,\r\n      printDpi: 600,\r\n      pdfRenderingDpi: 300,\r\n      putCalibrationMark: true,\r\n      printNcode: true,\r\n      dotsInACell: 7,\r\n      mediaSize: MediaSize.A4,\r\n      direction: \"auto\",\r\n      colorMode: 1,\r\n      scaleUpToMedia: true,\r\n      scaleDownToMedia: true,\r\n      targetPages: \"\",\r\n      pagesPerSheet: 1,\r\n      pageInfo: PageInfo.first_page,\r\n      debugMode: 0,\r\n      hasToPutNcode: true\r\n    })\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleSave = (e) => {\r\n    //저장 로직 추가\r\n    setIPrintOption({\r\n      ...IPrintOption,\r\n      targetPages : $('#targetPages').val(),\r\n      [e.target.name] : e.target.value\r\n    });\r\n\r\n    setOpen(false);\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    setIPrintOption({\r\n      ...IPrintOption,\r\n      [e.target.name] : e.target.value\r\n    });\r\n\r\n    console.log(e.target.value);\r\n    // console.log(MediaSize);\r\n    // console.log(MediaSize.A4);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        <Box fontSize={16} fontWeight=\"fontWeightBold\" >\r\n          인쇄 옵션 설정\r\n        </Box>\r\n      </Button>\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">인쇄 설정</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Dialog의 Body\r\n          </DialogContentText>\r\n\r\n          {/* 코드의 농도 Dialog */}\r\n          <form className={classes.form} noValidate>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"codeDensity\">코드 농도</InputLabel>\r\n              <Select\r\n                autoFocus\r\n                value={IPrintOption.codeDensity}\r\n                onChange={onChange}\r\n                inputProps={{\r\n                  name: 'codeDensity',\r\n                  id: 'codeDensity',\r\n                }}\r\n              >\r\n                <MenuItem value=\"1\">연하게</MenuItem>\r\n                <MenuItem value=\"2\">보통</MenuItem>\r\n                <MenuItem value=\"3\">진하게</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* 인쇄의 품질 Dialog */}\r\n          <form className={classes.form} noValidate style={{float:\"left\"}}>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel htmlFor=\"printDpi\">인쇄 품질</InputLabel>\r\n                <Select\r\n                  value={IPrintOption.printDpi}\r\n                  onChange={onChange}\r\n                  inputProps={{\r\n                    name: 'printDpi',\r\n                    id: 'printDpi',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"600\">품질 우선</MenuItem>\r\n                  <MenuItem value=\"300\">보통 품질</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* PDF의 Rendering DPI Dialog */}\r\n          <form className={classes.form} noValidate>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"pdfRenderingDpi\">PDFRendering</InputLabel>\r\n              <Select\r\n                value={IPrintOption.pdfRenderingDpi}\r\n                onChange={onChange}\r\n                inputProps={{\r\n                  name: 'pdfRenderingDpi',\r\n                  id: 'pdfRenderingDpi'\r\n                }}\r\n              >\r\n                <MenuItem value=\"150\">150DPI</MenuItem>\r\n                <MenuItem value=\"200\">200DPI</MenuItem>\r\n                <MenuItem value=\"300\">300DPI</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* Calibration 유무 체크 Dialog */}\r\n          <form className={classes.form} noValidate style={{clear:\"both\", float:\"left\"}}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"putCalibrationMark\">CalibrationMark</InputLabel>\r\n              <Select\r\n                value={IPrintOption.putCalibrationMark}\r\n                onChange={onChange}\r\n                inputProps={{\r\n                  name: 'putCalibrationMark',\r\n                  if: 'putCalibrationMark',\r\n                }}\r\n              >\r\n                <MenuItem value=\"true\">true</MenuItem>\r\n                <MenuItem value=\"false\">false</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* Print시 Ncode 유무 Dialog */}\r\n          <form className={classes.form} noValidate>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"printNcode\">PrintNcode</InputLabel>\r\n              <Select\r\n                value={IPrintOption.printNcode}\r\n                onChange={onChange}\r\n                inputProps={{\r\n                  name: 'printNcode',\r\n                  id: 'printNcode'\r\n                }}\r\n              >\r\n                <MenuItem value=\"true\">true</MenuItem>\r\n                <MenuItem value=\"false\">false</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* DotsInACell의 Dialog - 보이지는 않는다 */}\r\n          <form className={classes.form} noValidate style={{display:\"none\"}}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"dotsInACell\" disabled>DotsInACell</InputLabel>\r\n                <Input value=\"7\" id=\"dotsInACell\" name=\"dotsInACell\" />\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* MediaSize의 Dialog */}\r\n          <form className={classes.form} noValidate>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"mediaSize\">MediaSize</InputLabel>\r\n              <Select\r\n                value={IPrintOption.mediaSize}\r\n                onChange={onChange}\r\n                inputProps={{\r\n                  name: 'mediaSize',\r\n                  id: 'mediaSize'\r\n                }}\r\n              >\r\n                <MenuItem value={\"A4\"}>A4</MenuItem>\r\n                <MenuItem value={\"A3\"}>A3</MenuItem>\r\n                <MenuItem value={\"B4\"}>B4</MenuItem>\r\n                <MenuItem value={\"B5\"}>B5</MenuItem>\r\n                <MenuItem value={\"Letter\"}>Letter</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* ColorMode에 대한 Dialog */}\r\n          <form className={classes.form} noValidate>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"colorMode\">ColorMode</InputLabel>\r\n              <Select\r\n                value={IPrintOption.colorMode}\r\n                onChange={onChange}\r\n                inputProps={{\r\n                  name: 'colorMode',\r\n                  id: 'colorMode'\r\n                }}\r\n              >\r\n                <MenuItem value=\"0\">BLUEPRINT</MenuItem>\r\n                <MenuItem value=\"1\">ANDROID_STYLE</MenuItem>\r\n                <MenuItem value=\"2\">IPHONE_STYLE</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* Direction에 대한 Dialog */}\r\n          <form className={classes.form} noValidate>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"direction\">Direction</InputLabel>\r\n              <Select\r\n                value={IPrintOption.direction}\r\n                onChange={onChange}\r\n                inputProps={{\r\n                  name: 'direction',\r\n                  id: 'direction'\r\n                }}\r\n              >\r\n                <MenuItem value=\"auto\">auto</MenuItem>\r\n                <MenuItem value=\"protrait\">protrait</MenuItem>\r\n                <MenuItem value=\"landscape\">landscape</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* ScaleUp에 대한 Dialog */}\r\n          <form className={classes.form} noValidate style={{clear:\"both\", float:\"left\"}}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"scaleUpToMedia\">ScaleUpToMedia</InputLabel>\r\n              <Select\r\n                value={IPrintOption.scaleUpToMedia}\r\n                onChange={onChange}\r\n                inputProps={{\r\n                  name: 'scaleUpToMedia',\r\n                  id: 'scaleUpToMedia'\r\n                }}\r\n              >\r\n                <MenuItem value=\"true\">true</MenuItem>\r\n                <MenuItem value=\"false\">false</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* ScaleDown에 대한 Dialog */}\r\n          <form className={classes.form} noValidate>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"scaleDownToMedia\">ScaleDownToMedia</InputLabel>\r\n              <Select\r\n                value={IPrintOption.scaleDownToMedia}\r\n                onChange={onChange}\r\n                inputProps={{\r\n                  name: 'scaleDownToMedia',\r\n                  id: 'scaleDownToMedia'\r\n                }}\r\n              >\r\n                <MenuItem value=\"true\">true</MenuItem>\r\n                <MenuItem value=\"false\">false</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* TargetPage에 대한 Dialog */}\r\n          <form className={classes.form} noValidate>\r\n            <FormControl className={classes.formControl}>\r\n              {/* <TextField id=\"targetPages\" margin=\"dense\" label=\"TargetPages\" type=\"text\" /> */}\r\n              {/* <InputLabel htmlFor=\"targetPages\">TargetPages</InputLabel> */}\r\n              <TextField id=\"targetPages\" name=\"targetPages\" margin=\"dense\" label=\"TargetPages\"\r\n                     type=\"text\" onSubmit={(e) => handleSave}/>\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* PagePerSheet에 대한 Dialog */}\r\n          <form className={classes.form} noValidate style={{float:\"left\"}}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"pagesPerSheet\">PagesPerSheet</InputLabel>\r\n              <Select\r\n                value={IPrintOption.pagesPerSheet}\r\n                onChange={onChange}\r\n                inputProps={{\r\n                  name: 'pagesPerSheet',\r\n                  id: 'pagesPerSheet'\r\n                }}\r\n              >\r\n                <MenuItem value=\"1\">1</MenuItem>\r\n                <MenuItem value=\"2\">2</MenuItem>\r\n                <MenuItem value=\"4\">4</MenuItem>\r\n                <MenuItem value=\"8\">8</MenuItem>\r\n                <MenuItem value=\"9\">9</MenuItem>\r\n                <MenuItem value=\"16\">16</MenuItem>\r\n                <MenuItem value=\"18\">18</MenuItem>\r\n                <MenuItem value=\"25\">25</MenuItem>\r\n                <MenuItem value=\"32\">32</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* PageInfo에 대한 Dialog */}\r\n          <form className={classes.form} noValidate>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"pageInfo\">PageInfo</InputLabel>\r\n              <Select\r\n                value={IPrintOption.pageInfo}\r\n                onChange={onChange}\r\n                inputProps={{\r\n                  name: 'pageInfo',\r\n                  id: 'pageInfo'\r\n                }}\r\n              >\r\n                <MenuItem value={1}>3, 27, 1068, 1</MenuItem>\r\n                <MenuItem value={2}>3, 27, 1069, 1</MenuItem>\r\n                <MenuItem value={3}>3, 27, 1070, 1</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* DebugMode에 대한 Dialog */}\r\n          <form className={classes.form} noValidate style={{float:\"left\"}}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"debugMode\">DebugMode</InputLabel>\r\n              <Select\r\n                value={IPrintOption.debugMode}\r\n                onChange={onChange}\r\n                inputProps={{\r\n                  name: 'debugMode',\r\n                  id: 'debugMode'\r\n                }}\r\n              >\r\n                <MenuItem value=\"0\">0</MenuItem>\r\n                <MenuItem value=\"1\">1</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n          {/* HasToPutNcode에 대한 Dialog */}\r\n          <form className={classes.form} noValidate>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"debugMode\">HasToPutNcode</InputLabel>\r\n              <Select\r\n                value={IPrintOption.hasToPutNcode}\r\n                onChange={onChange}\r\n                inputProps={{\r\n                  name: 'hasToPutNcode',\r\n                  id: 'hasToPutNcode'\r\n                }}\r\n              >\r\n                <MenuItem value=\"true\">true</MenuItem>\r\n                <MenuItem value=\"false\">false</MenuItem>\r\n\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleSave} color=\"primary\">\r\n            Save\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\FileBrowserButton.tsx",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Save\\SavePdf.tsx",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\Calibration\\CalibrationButton.tsx",["568","569","570"],"import React, { useState } from \"react\";\r\n// import { Container, Modal, Row, Col, Button } from \"react-bootstrap\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button, Box } from \"@material-ui/core\";\r\nimport CalibrationDialog from \"./CalibrationDialog\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    margin: 'auto',\r\n    width: 'fit-content',\r\n  },\r\n  formControl: {\r\n    marginTop: theme.spacing(2),\r\n    minWidth: 120,\r\n  },\r\n  formControlLabel: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function CalibrationButton(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [pageNo, setPageNo] = useState(1);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleClose = (e: {}, reason: \"backdropClick\" | \"escapeKeyDown\") => {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button {...props} onClick={handleClickOpen}>\r\n        {props.children}\r\n      </Button>\r\n\r\n      <CalibrationDialog open={open} handleClose={handleClose} pageNo={pageNo} />\r\n    </div>\r\n  );\r\n}","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\StorageRenderWorker.js",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\utils\\JsUtils.js",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\penstorage\\index.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\types\\typedef.js",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\DrawCurves.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\DataStructure\\NeoStroke.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\DataStructure\\NeoDot.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\PenBasedRenderWorker.tsx",["571","572","573"],"import \"../../types\";\nimport RenderWorkerBase, { IRenderWorkerOption } from \"./RenderWorkerBase\";\n\nimport { fabric } from \"fabric\";\n\n// import { PLAYSTATE } from \"./StorageRenderer\";\nimport { InkStorage } from \"../..\";\nimport { drawPath } from \"./DrawCurves\";\n// import { NCODE_TO_SCREEN_SCALE } from \"../../constants\";\nimport { paperInfo } from \"../../noteserver/PaperInfo\";\nimport { NeoDot, NeoStroke } from \"../../DataStructure\";\nimport { IBrushType } from \"../../DataStructure/Enums\";\nimport { INeoStrokeProps } from \"../../DataStructure/NeoStroke\";\nimport { IPageSOBP } from \"../../DataStructure/Structures\";\n\nimport jQuery from \"jquery\";\nlet $ = jQuery;\n\n// const timeTickDuration = 20; // ms\n// const DISABLED_STROKE_COLOR = \"rgba(0, 0, 0, 0.1)\";\n// const INVISIBLE_STROKE_COLOR = \"rgba(255, 255, 255, 0)\";\n// const INCOMPLETE_STROKE_COLOR = \"rgba(255, 0, 255, 0.4)\";\n// const CURRENT_POINT_STROKE_COLOR = \"rgba(255, 255, 255, 1)\";\n\nconst NUM_HOVER_POINTERS = 6;\nconst REMOVE_HOVER_POINTS_INTERVAL = 50; // 50ms\nconst REMOVE_HOVER_POINTS_WAIT = 20; // 20 * 50ms = 1sec\n\n/** @enum {string}  */\nexport const ZoomFitEnum = {\n  WIDTH: \"width\",\n  HEIGHT: \"height\",\n  FULL: \"full\",\n  ACTUAL: \"100%\",\n}\n\nconst STROKE_OBJECT_ID = \"ns\";\n// const GRID_OBJECT_ID = \"g\";\n\nexport default class PenBasedRenderWorker extends RenderWorkerBase {\n\n  /** @type {Array<fabric.Path>} */\n  localPathArray = new Array(0);\n\n\n  /** @type {Object.<string, {stroke:NeoStroke, path:fabric.Path}>} */\n  livePaths = {};\n\n\n  storage = InkStorage.getInstance();\n\n  visibleHoverPoints: number = NUM_HOVER_POINTERS;\n  pathHoverPoints: Array<fabric.Circle> = new Array(0);\n  \n\n  /**\n   * \n   * @param options \n   */\n  constructor(options: IRenderWorkerOption) {\n    super(options);\n\n    this.name = \"PenBasedRenderWorker\";\n\n    const { storage } = options;\n    if (storage !== undefined) {\n      if (!(storage instanceof InkStorage)) {\n        throw new Error(\"storage is not an instance of InkStorage\");\n      }\n      this.storage = storage;\n    }\n\n\n    const { section, owner, book, page } = this.surfaceInfo;\n    this.changePage(section, owner, book, page, true);\n\n    console.log(`constructor size ${options.width}, ${options.height}`)\n    this.resize({ width: options.width, height: options.height });\n  }\n\n  // /**\n  //  * @override\n  //  */\n  // init = () => {\n  //   super.init();\n  // }\n\n\n  /**\n   * Pen Down이 들어왔다. 그러나 아직 page 정보가 들어오지 않아서,\n   * 이 페이지에 붙여야 할 것인가 아니면, 새로운 페이지에 붙여야 할 것인가를 모른다.\n   *\n   * 렌더러 처리 순서\n   * 1) Pen Down: live stroke의 path를 생성\n   * 2) Page Info: 페이지를 전환하고, 잉크 스토리지에 있는 이전의 스트로크를 path로 등록한다.\n   *      2-1) 이 클래스를 new 하는 container에서 setPageStrokePath(strokes)를 불러줘야 한다.\n   * 3) Pen Move:\n   *      3-1) live stroke path의 처음 나오는 점이면, path를 canvas에 등록한다.\n   *      3-2) 두번째 점부터는 path에 append 한다.\n   * 4) Pen Up: Live stroke path는 없애고, 잉크스토리지에 2) 이후의 stroke를 받아 path에 추가 등록한다.\n   *\n   *\n   * 조심해야 할 것은, 위의 2의 처리를 container가 담당하고 있는데, 2에 앞서서 3이 처리되면\n   * 이전의 페이지에 획이 추가되고, 2-1에 의해 clear되어 버린다. 순서에 유의할 것\n   *\n   * @public\n   * @param {{strokeKey:string, mac:string, time:number, stroke:NeoStroke}} event\n   */\n  createLiveStroke = (event: any) => {\n    console.log(`Stroke created = ${event.strokeKey}`);\n    this.livePaths[event.strokeKey] = {\n      stroke: event.stroke,\n      path: null\n    }\n  }\n\n  /**\n   *\n   * @param {{strokeKey:string, mac:string, stroke:NeoStroke, dot:NeoDot}} event\n   */\n  pushLiveDot = (event: any) => {\n    //pen tracker rendering\n    this.movePenTracker(event);\n    \n    let pathData = this.livePaths[event.strokeKey];\n    const { path, stroke } = pathData;\n    const dot = event.dot;\n\n    if (path) {\n      this.canvasFb.remove(path);\n    }\n    \n    \n\n    //지우개 구현\n    const canvas_xy = this.getCanvasXY(dot);\n    const screen_xy = this.getScreenXY(canvas_xy);\n    const pen = event.pen;\n    if (pen.penRendererType === IBrushType.ERASER) {\n      console.log('ERASE');\n      if (Object.keys(pen.eraserLastPoint).length) {\n        this.eraseOnLine(pen.eraserLastPoint.x, pen.eraserLastPoint.y, screen_xy.x, screen_xy.y, stroke);\n      }\n\n      pen.eraserLastPoint = { x: screen_xy.x, y: screen_xy.y };\n    }\n    else {\n      let new_path = this.createPenPathFromStroke(stroke);\n      \n      if (this.canvasFb) {\n        this.canvasFb.add(new_path);\n        pathData.path = new_path;\n      }\n      \n      \n      this.focusToDot(dot);\n    }\n  }\n\n  /**\n   *\n   * @param {{strokeKey:string, mac:string, stroke, section:number, owner:number, book:number, page:number}} event\n   */\n  closeLiveStroke = (event) => {\n    let pathData = this.livePaths[event.strokeKey];\n\n    if (!pathData || pathData.path === undefined) {\n      console.log(`undefined path`);\n    }\n\n    let path = pathData.path;\n\n    if (path) {\n      this.localPathArray.push(path);\n      path.fill = path.color;\n      path.stroke = path.color;\n      // this.canvas.renderAll();\n    }\n\n    delete this.livePaths[event.strokeKey];\n  }\n\n  movePenTracker = (event:any) => {\n    const dot = event.dot;\n    const canvas_xy = this.getCanvasXY(dot);\n    const screen_xy = this.getScreenXY(canvas_xy);\n    const penTracker = event.pen.pathPenTracker;\n    \n    let objects = this.canvasFb.getObjects();\n    let penTrackerObj = objects.filter(obj => obj.data === 'pt');\n\n    if (penTrackerObj.length === 0) {\n        this.canvasFb.add(event.pen.pathPenTracker);\n      }\n    else {\n    }\n\n    var radius = penTracker.radius;\n    penTracker.visible = true;\n    penTracker.set({left : screen_xy.x - radius, top: screen_xy.y - radius});\n    penTracker.setCoords();\n    this.canvasFb.renderAll();\n\n    const pen = event.pen;\n\n    pen.waitCount = REMOVE_HOVER_POINTS_WAIT;\n    pen.visibleHoverPoints--;\n    if (pen.visibleHoverPoints >= 0) {\n      pen.pathHoverPoints[pen.visibleHoverPoints].visible = false;\n    }\n\n    if (pen.timeOut) {\n        clearInterval(pen.timeOut);\n        pen.timeOut = null;\n    }\n\n\n  }\n\n  eraseOnLine(ink_x0, ink_y0, ink_x1, ink_y1, stroke) {\n    var pathData = 'M ' + ink_x0 + ' ' + ink_y0 + ' L ' + ink_x1 + ' ' + ink_y1;\n    var eraserPath = new fabric.Path(pathData);\n    eraserPath.set({left : ink_x0, top: ink_y0, opacity: 0});\n\n    let paths = this.canvasFb.getObjects().filter(obj => obj.data === 'ns');\n\n    for (var i = 0; i < this.localPathArray.length; i++) {\n      var path = this.localPathArray[i];\n      \n      if (path.intersectsWithObject(eraserPath)) {\n        this.canvasFb.remove(path);\n\n        const { section, book, owner, page } = stroke;\n        const pageId = InkStorage.getPageId({ section, book, owner, page });\n\n        this.storage.completed = this.storage.completedOnPage.get(pageId)\n        const idx = this.storage.completed.findIndex(ns => ns.key === path.key);\n        this.storage.completed.splice(idx, 1);\n      }\n    }\n  }\n\n  addHoverPoints = (e) => {\n    for (var i=0; i<e.pen.pathHoverPoints.length; i++) {\n      this.canvasFb.add(e.pen.pathHoverPoints[i]);\n    }\n    \n    this.canvasFb.add(e.pen.pathPenTracker);\n    console.log('hover points & pen tracker added')\n  }\n\n  moveHoverPoint = (e) => {\n\n    let objects = this.canvasFb.getObjects();\n    let hoverPoints = objects.filter(obj => obj.data === 'hp');\n\n    if (hoverPoints.length === 0) {\n      for (var i=0; i<e.pen.pathHoverPoints.length; i++) {\n        this.canvasFb.add(e.pen.pathHoverPoints[i]);\n      }\n    }\n    else {\n    }\n\n    const dot = {x:e.event.x, y:e.event.y}\n    const canvas_xy = this.getCanvasXY(dot);\n    \n    var i: number;\n    for (i = NUM_HOVER_POINTERS - 1; i > 0; i--) {\n      e.pen.pathHoverPoints[i].left = e.pen.pathHoverPoints[i-1].left;\n      e.pen.pathHoverPoints[i].top = e.pen.pathHoverPoints[i-1].top;\n      e.pen.pathHoverPoints[i].setCoords();\n      this.canvasFb.renderAll();\n    }\n\n    e.pen.pathHoverPoints[0].left = canvas_xy.x;\n    e.pen.pathHoverPoints[0].top = canvas_xy.y;\n    e.pen.pathHoverPoints[0].setCoords();\n    this.canvasFb.renderAll();\n\n    var isPointerVisible = $(\"#btn_tracepoint\").find(\".c2\").hasClass(\"checked\");\n\n    e.pen.visibleHoverPoints = NUM_HOVER_POINTERS;\n\n    for (i = 0; i < e.pen.visibleHoverPoints; i++) {\n      e.pen.pathHoverPoints[i].visible = isPointerVisible;\n      this.canvasFb.renderAll();\n    }\n\n    if (e.pen.timeOut) {\n        clearInterval(e.pen.timeOut);\n        e.pen.timeOut = null;\n    }\n    e.pen.waitCount = 0;\n\n    var pen = e.pen;\n    var self = this;\n\n    e.pen.timeOut = setInterval(() => {\n      pen.waitCount++;\n        // 1초 뒤\n        if (pen.waitCount > 20) {\n            for (i = NUM_HOVER_POINTERS - 1; i > 0; i--) {\n                pen.pathHoverPoints[i].left = pen.pathHoverPoints[i - 1].left;\n                pen.pathHoverPoints[i].top = pen.pathHoverPoints[i - 1].top;\n            }\n            pen.pathHoverPoints[0].left = -30;\n            pen.pathHoverPoints[0].top = -30;\n\n            pen.visibleHoverPoints--;\n            if (pen.visibleHoverPoints >= 0) {\n                pen.pathHoverPoints[pen.visibleHoverPoints].visible = false;\n                self.canvasFb.renderAll();\n            } else {\n                clearInterval(pen.timeOut);\n            }\n        }\n    }, REMOVE_HOVER_POINTS_INTERVAL);\n  }\n\n\n  /**\n   *\n   * @param {number} section\n   * @param {number} owner\n   * @param {number} book\n   * @param {number} page\n   * @param {boolean} forceToRefresh\n   */\n  changePage = (section: number, owner: number, book: number, page: number, forceToRefresh: boolean) => {\n    console.log(\"changePage\");\n    let currPage = this.surfaceInfo;\n\n    if ((!forceToRefresh)\n      && (section === currPage.section\n        && owner === currPage.owner\n        && book === currPage.book\n        && page === currPage.page)) return;\n\n\n    // 페이지 정보와 scale을 조정한다.\n    let info = paperInfo.getPaperInfo({ section, owner, book, page });\n    if (info) {\n      this.surfaceInfo = {\n        section, owner, book, page,\n        Xmin: info.Xmin, Ymin: info.Ymin, Xmax: info.Xmax, Ymax: info.Ymax,\n        Mag: info.Mag\n      };\n\n    }\n    let szPaper = paperInfo.getPaperSize({ section, owner, book, page });\n    this.scale = this.calcScaleFactor(this.viewFit, szPaper, this.base_scale);\n\n    // 현재 모든 stroke를 지운다.\n    this.removeAllCanvasObject();\n    this.resetLocalPathArray();\n\n    // grid를 그려준다\n    this.drawPageLayout();\n\n    // page에 있는 stroke를 가져온다\n    let pageInfo = { section, owner, book, page };\n    let strokes = this.storage.getPageStrokes(pageInfo);\n\n    //test\n    const testStroke = this.generateA4CornerStrokeForTest(pageInfo);\n    strokes.push(testStroke);\n\n    // 페이지의 stroke를 fabric.Path로 바꾼다.\n    this.addStrokePaths(strokes);\n\n    // page refresh\n    this.canvasFb.requestRenderAll();\n  }\n\n  private generateDotForTest(x: number, y: number): NeoDot {\n    const dot = new NeoDot({\n      dotType: 2,   // moving\n      deltaTime: 2,\n      time: 0,\n      f: 255,\n      x, y,\n    });\n\n    return dot;\n  }\n\n  private generateA4CornerStrokeForTest(pageInfo: IPageSOBP): NeoStroke {\n    // for debug\n    const { section, owner, book, page } = pageInfo;\n    const strokeArg: INeoStrokeProps = {\n      section, owner, book, page,\n      startTime: 0,\n      mac: \"00:00:00:00:00:00\",\n      color: \"rgba(0,0,255,255)\",\n      brushType: IBrushType.PEN,\n      thickness: 1,\n    }\n    const defaultStroke = new NeoStroke(strokeArg);\n\n    let dot: NeoDot;\n\n    let dot0 = this.generateDotForTest(0, 0);\n    defaultStroke.addDot(dot0);\n\n    dot = this.generateDotForTest(88.56, 0);\n    defaultStroke.addDot(dot);\n    defaultStroke.addDot(dot);\n\n    dot = this.generateDotForTest(88.56, 125.24);\n    defaultStroke.addDot(dot);\n    defaultStroke.addDot(dot);\n\n    dot = this.generateDotForTest(0, 125.24);\n    defaultStroke.addDot(dot);\n    defaultStroke.addDot(dot);\n\n    dot = this.generateDotForTest(0, 0);\n    defaultStroke.addDot(dot);\n\n    return defaultStroke;\n  }\n\n\n  /**\n   * @private\n   */\n  resetLocalPathArray = () => {\n    this.localPathArray = new Array(0);\n\n  }\n\n  /**\n   * @private\n   */\n  removeAllPaths = () => {\n    if (!this.canvasFb) return;\n    this.localPathArray.forEach(path => {\n      this.canvasFb.remove(path);\n    });\n\n    this.localPathArray = new Array(0);\n  }\n\n  /**\n   * @private\n   */\n  removeAllStrokeObject = () => {\n    if (this.canvasFb) {\n      let objects = this.canvasFb.getObjects();\n      let strokes = objects.filter(obj => obj.data === STROKE_OBJECT_ID);\n\n      strokes.forEach((path) => {\n        this.canvasFb.remove(path);\n      });\n    }\n  };\n\n  removeAllCanvasObject = () => {\n    if (this.canvasFb) {\n      this.canvasFb.clear();\n    }\n  };\n\n\n  /**\n   * @private\n   * @param {Array<NeoStroke>} strokes\n   */\n  addStrokePaths = (strokes) => {\n    if (!this.canvasFb) return;\n\n    strokes.forEach((stroke) => {\n      if (stroke.dotArray.length > 0) {\n        let path = this.createPenPathFromStroke(stroke);\n        this.canvasFb.add(path);\n        this.localPathArray.push(path);\n      }\n    });\n  }\n\n  createPenPathFromStroke = (stroke: NeoStroke) => {\n    const { dotArray, color, thickness, brushType, key } = stroke;\n\n    let pointArray = [];\n    dotArray.forEach((dot) => {\n      let pt = this.getCanvasXY_scaled(dot);\n      pointArray.push(pt);\n    });\n\n    var opacity: number;\n    switch (brushType) {\n      case 0 : opacity = 1; break;\n      case 1 : opacity = 0.3; break;\n      default: opacity = 1; break;\n    }\n\n    const pathOption = {\n      objectCaching: false,\n      stroke: color, //\"rgba(0,0,0,255)\"\n      fill: color, //위에 두놈은 그려지는 순간의 color\n      color: color, //얘가 canvas에 저장되는 color\n      opacity: opacity,\n      // strokeWidth: 10,\n      originX: 'left',\n      originY: 'top',\n      selectable: false,\n\n      data: STROKE_OBJECT_ID,    // neostroke\n      evented: true,\n      key : key,\n    };\n\n    let strokeThickness = thickness / 64;\n    let pathData = drawPath(pointArray, strokeThickness);\n    let path = new fabric.Path(pathData, pathOption);\n\n    return path;\n  }\n\n}\n","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfManager.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintPdfMain.tsx",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\FileBrowser.tsx",["574"],"import { uuidv4 } from \"../NcodePrint\";\r\n\r\nexport const _uuid: string = uuidv4();\r\nconst _fileInputId = _uuid;\r\n\r\nlet _fileOpenPromise: Promise<IFileBrowserResult> = null;\r\nlet _resolveFunc = null;\r\nlet _filename = \"\";\r\n\r\n\r\nexport type IFileBrowserResult = {\r\n  result: \"success\" | \"canceled\" | \"failed\",\r\n  file: any,\r\n  url?: any\r\n}\r\n\r\n\r\nexport async function openFileBrowser(): Promise<IFileBrowserResult> {\r\n  let result = await performClick(_fileInputId);\r\n  const file = result.file;\r\n  if (file) {\r\n    const url = URL.createObjectURL(file);\r\n    result = {\r\n      ...result,\r\n      url,\r\n    }\r\n    console.log(file.name);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n\r\nasync function performClick(elemId): Promise<IFileBrowserResult> {\r\n  _filename = \"\";\r\n\r\n\r\n  _fileOpenPromise = new Promise(resolve => {\r\n    const elem = document.getElementById(elemId);\r\n    if (elem && document.createEvent) {\r\n      const evt = document.createEvent(\"MouseEvents\");\r\n      evt.initEvent(\"click\", true, false);\r\n      elem.dispatchEvent(evt);\r\n      _resolveFunc = resolve;\r\n\r\n      return _fileOpenPromise;\r\n    }\r\n    else {\r\n      resolve({ result: \"failed\", file: null });\r\n    }\r\n  });\r\n\r\n  return _fileOpenPromise;\r\n}\r\n\r\n\r\nasync function performClick_old(elemId): Promise<IFileBrowserResult> {\r\n  _filename = \"\";\r\n  const elem = document.getElementById(elemId);\r\n  if (elem && document.createEvent) {\r\n    _fileOpenPromise = new Promise(resolve => {\r\n      const evt = document.createEvent(\"MouseEvents\");\r\n      evt.initEvent(\"click\", true, false);\r\n      elem.dispatchEvent(evt);\r\n      _resolveFunc = resolve;\r\n    });\r\n\r\n    return _fileOpenPromise;\r\n  }\r\n\r\n  return Promise.resolve({ result: \"failed\", file: null });\r\n}\r\n\r\nexport function onSuccess(e) {\r\n  window.removeEventListener('focus', handleFocusBack);\r\n\r\n  const file = e.target.files[0];\r\n  console.log(\"OK : \" + file.name);\r\n\r\n  _filename = file.name;\r\n  e.target.value = null;\r\n\r\n  _resolveFunc({ result: \"success\", file });\r\n}\r\n\r\nfunction handleFocusBack(e) {\r\n  // console.log('focus-back');\r\n  setTimeout(() => {\r\n    if (_filename.length) {\r\n      // 이것은 time delay를 주어야 동작한다.\r\n      console.log('Files Loaded');\r\n    }\r\n    // Alert the user if the number\r\n    // of file is zero\r\n    else {\r\n      console.log('Cancel clicked');\r\n      _resolveFunc(\"\");\r\n    }\r\n  }, 300);\r\n\r\n  document.body.onfocus = null;\r\n  // window.removeEventListener('focus', handleFocusBack);\r\n}\r\n\r\nexport function onOpenClicked(e) {\r\n  document.body.onfocus = handleFocusBack;\r\n  // window.addEventListener('focus', handleFocusBack);\r\n}\r\n\r\n","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\Calibration\\CalibrationDialog.tsx",["575","576","577","578","579","580","581","582","583"],"import React, { useState } from \"react\";\r\n\r\n// import { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Button, makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@material-ui/core\";\r\nimport { t } from \"../../Locales/i18n\";\r\n\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   form: {\r\n//     display: 'flex',\r\n//     flexDirection: 'column',\r\n//     margin: 'auto',\r\n//     width: 'fit-content',\r\n//   },\r\n//   formControl: {\r\n//     marginTop: theme.spacing(2),\r\n//     minWidth: 120,\r\n//   },\r\n//   formControlLabel: {\r\n//     marginTop: theme.spacing(1),\r\n//   },\r\n// }));\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 400,\r\n  },\r\n});\r\n\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 2000,\r\n  },\r\n});\r\n\r\n\r\ntype Props = {\r\n  open: boolean,\r\n  handleClose: any,\r\n  pageNo: number,\r\n}\r\n\r\n\r\n\r\n\r\nconst TAX_RATE = 0.07;\r\n\r\n\r\nfunction ccyFormat(num: number) {\r\n  return `${num.toFixed(2)}`;\r\n}\r\n\r\nfunction priceRow(qty: number, unit: number) {\r\n  return qty * unit;\r\n}\r\n\r\nfunction createRow(desc: string, qty: number, unit: number) {\r\n  const price = priceRow(qty, unit);\r\n  return { desc, qty, unit, price };\r\n}\r\n\r\ninterface Row {\r\n  desc: string;\r\n  qty: number;\r\n  unit: number;\r\n  price: number;\r\n}\r\n\r\nfunction subtotal(items: Row[]) {\r\n  return items.map(({ price }) => price).reduce((sum, i) => sum + i, 0);\r\n}\r\n\r\nconst rows = [\r\n  createRow('Paperclips (Box)', 100, 1.15),\r\n  createRow('Paper (Case)', 10, 45.99),\r\n  createRow('Waste Basket', 2, 17.99),\r\n];\r\n\r\nconst invoiceSubtotal = subtotal(rows);\r\nconst invoiceTaxes = TAX_RATE * invoiceSubtotal;\r\nconst invoiceTotal = invoiceTaxes + invoiceSubtotal;\r\n\r\ntype maxWidthType = \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\r\n\r\nexport default function CalibrationDialog(props: Props) {\r\n  const { open, handleClose, pageNo } = props;\r\n  const classes = useStyles();\r\n  const classes2 = useStyles2();\r\n\r\n  const handleSave = (e) => {\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    console.log(e.target.value);\r\n  }\r\n\r\n\r\n  const maxWidth = \"md\";\r\n\r\n  const img_src = \"https://www.k-voucher.kr/bbs/service/2020-09/16010263390201_1_1601026339.PNG\";\r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={open} onClose={handleClose}\r\n        fullWidth={true}\r\n        maxWidth={maxWidth}\r\n        aria-labelledby=\"form-dialog-title\">\r\n\r\n        <DialogTitle id=\"form-dialog-title\">{t('calibration_dlg_title')}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Dialog의 Body\r\n          </DialogContentText>\r\n        </DialogContent>\r\n\r\n\r\n\r\n\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table className={classes.table} aria-label=\"spanning table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell align=\"center\" colSpan={3}>\r\n                  Details\r\n            </TableCell>\r\n                <TableCell align=\"right\">Price</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Desc</TableCell>\r\n                <TableCell align=\"right\">Qty.</TableCell>\r\n                <TableCell align=\"right\">Unit</TableCell>\r\n                <TableCell align=\"right\">Sum</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map((row) => (\r\n                <TableRow key={row.desc}>\r\n                  <TableCell>{row.desc}</TableCell>\r\n                  <TableCell align=\"right\">{row.qty}</TableCell>\r\n                  <TableCell align=\"right\">{row.unit}</TableCell>\r\n                  <TableCell align=\"right\">{ccyFormat(row.price)}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n              <TableRow>\r\n                <TableCell rowSpan={3} />\r\n                <TableCell colSpan={2}>Subtotal</TableCell>\r\n                <TableCell align=\"right\">{ccyFormat(invoiceSubtotal)}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Tax</TableCell>\r\n                <TableCell align=\"right\">{`${(TAX_RATE * 100).toFixed(0)} %`}</TableCell>\r\n                <TableCell align=\"right\">{ccyFormat(invoiceTaxes)}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell colSpan={2}>Total</TableCell>\r\n                <TableCell align=\"right\">{ccyFormat(invoiceTotal)}</TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table className={classes2.table} aria-label=\"spanning table\">\r\n\r\n\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell>\r\n                  <img src={img_src} style={{ width: \"400px\", height: \"400px\" }} />\r\n                </TableCell>\r\n                <TableCell>\r\n                  <img src={img_src} style={{ width: \"400px\", height: \"400px\" }} />\r\n                </TableCell>\r\n                <TableCell>\r\n                  <img src={img_src} style={{ width: \"400px\", height: \"400px\" }} />\r\n                </TableCell>\r\n                <TableCell>\r\n                  <img src={img_src} style={{ width: \"400px\", height: \"400px\" }} />\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            취소\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfDocument.ts",["584","585","586"],"import * as PdfJs from \"pdfjs-dist\";\r\nimport { CoordinateTanslater, IPolygonArea } from \"../Coordinates\";\r\nimport { stringToDpiNum, } from \"../DataStructure/Structures\";\r\nimport { getDocumentId, } from \"../NcodePrint\";\r\nimport { IPageOverview } from \"../NcodePrint/PagesForPrint\";\r\nimport { ColorConvertMethod } from \"../NcodeSurface/CanvasColorConverter\";\r\nimport { getNcodeAtCanvasPixel, getNcodeRectAtCanvasPixel, ICellsOnSheetDesc } from \"../NcodeSurface/NcodeRasterizer\";\r\nimport { MappingItem } from \"../SurfaceMapper/MappingItem\";\r\nimport MappingStorage from \"../SurfaceMapper/MappingStorage\";\r\nimport NeoPdfPage, { IPdfPageCanvasDesc, PDF_VIEWPORT_DESC } from \"./NeoPdfPage\";\r\n\r\nPdfJs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${PdfJs.version}/pdf.worker.js`;\r\nvar CMAP_URL = \"./cmaps/\";\r\nvar CMAP_PACKED = true;\r\n\r\nexport type IGetDocumentOptions = {\r\n  url?: string,\r\n  fingerprint?: string,\r\n  cMapUrl?: string,\r\n  cMapPacked?: boolean,\r\n}\r\n\r\nexport type IPdfDocDesc = {\r\n  /** PDF url */\r\n  url: string,\r\n\r\n  /** PDF finger print */\r\n  fingerprint: string,\r\n\r\n  /** POD id = fingerprint + \"/\" + pagesPerSheet */\r\n  id: string,\r\n\r\n  /** total pages in pdf file */\r\n  numPages: number,\r\n};\r\n\r\n\r\n\r\n\r\nexport default class NeoPdfDocument {\r\n  _pdfDoc: PdfJs.PDFDocumentProxy = null;\r\n\r\n  _ready: PdfJs.PDFLoadingTask<PdfJs.PDFDocumentProxy>;\r\n\r\n  _url: string;\r\n\r\n  _fingerprint: string;\r\n\r\n  _id: string;\r\n\r\n  private _pages: NeoPdfPage[];\r\n\r\n  pagesOverview: IPageOverview[];\r\n\r\n  direction: \"portrait\" | \"landscape\";\r\n\r\n  load = async (options: IGetDocumentOptions) => {\r\n    await this.justLoad(options);\r\n\r\n    // const { url, cMapUrl, cMapPacked } = options;\r\n\r\n    // this._url = url;\r\n    // this._ready = PdfJs.getDocument(\r\n    //   {\r\n    //     url: url,\r\n    //     cMapUrl: cMapUrl ? cMapUrl : CMAP_URL,\r\n    //     cMapPacked: cMapPacked ? cMapPacked : CMAP_PACKED,\r\n    //   });\r\n\r\n    // const _pdfDoc = await this._ready.promise;\r\n    // this._pdfDoc = _pdfDoc;\r\n    // this._fingerprint = _pdfDoc.fingerprint;\r\n\r\n    // page를 로드한다\r\n    this._pages = [];\r\n    for (let i = 1; i <= this._pdfDoc.numPages; i++) {\r\n      const neoPage = new NeoPdfPage(this, i);\r\n      this._pages.push(neoPage);\r\n    }\r\n\r\n    await this.setPageOverview(this);\r\n    return this;\r\n  }\r\n\r\n  destroy = () => {\r\n    this._pages = [];\r\n    this._pdfDoc.destroy();\r\n  }\r\n\r\n  justLoad = async (options: IGetDocumentOptions) => {\r\n    const { url, cMapUrl, cMapPacked } = options;\r\n\r\n    this._url = url;\r\n    this._ready = PdfJs.getDocument(\r\n      {\r\n        url: url,\r\n        cMapUrl: cMapUrl ? cMapUrl : CMAP_URL,\r\n        cMapPacked: cMapPacked ? cMapPacked : CMAP_PACKED,\r\n      });\r\n\r\n    const pdfDoc = await this._ready.promise;\r\n    this._pdfDoc = pdfDoc;\r\n    this._fingerprint = pdfDoc.fingerprint;\r\n\r\n    return this;\r\n  }\r\n\r\n  get numPages() {\r\n    return this._pdfDoc.numPages;\r\n  }\r\n\r\n  get url() {\r\n    return this._url;\r\n  }\r\n\r\n  get fingerprint() {\r\n    return this._fingerprint;\r\n  }\r\n\r\n  getPageAsync = async (pageNo: number) => {\r\n    await this._pages[pageNo - 1]._ready;\r\n    return this._pages[pageNo - 1];\r\n  }\r\n\r\n  /** page가 로드된 것이 확실할 때만 쓸 것! */\r\n  getPage = (pageNo: number) => {\r\n    if (!this._pages[pageNo - 1]._loaded) {\r\n      throw new Error(`PDF page ${pageNo} has not been loaded`);\r\n    }\r\n\r\n    return this._pages[pageNo - 1];\r\n  }\r\n\r\n  getMetadata = async () => {\r\n    return this._pdfDoc.getMetadata();\r\n  }\r\n\r\n  public renderPages_dpi = async (pageNums: number[], dpi: number, colorConvertMode?: ColorConvertMethod)\r\n    : Promise<IPdfPageCanvasDesc[]> => {\r\n    const pdfDpi = dpi;\r\n\r\n    const promises: Promise<IPdfPageCanvasDesc>[] = [];\r\n    for (let i = 0; i < pageNums.length; i++) {\r\n      const pageNo = pageNums[i];\r\n      const neoPage = await this.getPageAsync(pageNo);\r\n      const pr = neoPage.render_dpi(i, pdfDpi).then(async (canvasDesc) => {\r\n        return await neoPage.convertColor(canvasDesc, colorConvertMode);\r\n      })\r\n      promises.push(pr);\r\n    }\r\n    const descs = await Promise.all(promises);\r\n\r\n    const pageImageDescs: IPdfPageCanvasDesc[] = new Array(descs.length);\r\n    descs.forEach(async (canvasDesc) => {\r\n      const { index } = canvasDesc;\r\n      pageImageDescs[index] = canvasDesc;\r\n      // console.log(`[Multipage] page rendered ${canvasDesc.pdfPageInfo.pageNo}, index ${index}`);\r\n    });\r\n\r\n    // let converterPromises = [];\r\n    // descs.forEach(async (canvasDesc) => {\r\n    //   const { index } = canvasDesc;\r\n    //   pageImageDescs[index] = canvasDesc;\r\n\r\n    //   const pdfCanvas = canvasDesc.canvas;\r\n    //   const converter = new CanvasColorConverter(pdfCanvas);\r\n    //   const pr = converter.convert(colorConvertMode);\r\n    //   converterPromises.push(pr);\r\n    // });\r\n    return pageImageDescs;\r\n  }\r\n\r\n\r\n  registerMappingItem = (pageImagesDesc: IPdfPageCanvasDesc[], ncodePlane: ICellsOnSheetDesc, assignNewCode: boolean) => {\r\n    for (let i = 0; i < ncodePlane.ncodeAreas.length; i++) {\r\n      const desc = pageImagesDesc[i];\r\n      const pdfRect = desc.drawnRect;\r\n      const ncode = ncodePlane.ncodeAreas[i];\r\n\r\n      const mapData = new MappingItem();\r\n\r\n      /** canvas 좌표계 */\r\n      const { x, y, unit, width, height } = pdfRect;\r\n      const dpi = stringToDpiNum(unit);\r\n\r\n      /** Ncode 좌표계 */\r\n      const pt0_nu = getNcodeAtCanvasPixel({ x, y, dpi }, ncodePlane);\r\n      const pt1_nu = getNcodeAtCanvasPixel({ x: x + width, y: y + height, dpi }, ncodePlane);\r\n\r\n      const pdfRect_nu = getNcodeRectAtCanvasPixel({ dpi, x, y, width, height }, ncodePlane);\r\n\r\n      /** 페이지에 해당하는 ncode가 인쇄된 영역 */\r\n      const r_nu = ncode.rect;\r\n      const polygon: IPolygonArea = [\r\n        { x: r_nu.x, y: r_nu.y },\r\n        { x: r_nu.x + r_nu.width, y: r_nu.y },\r\n        { x: r_nu.x + r_nu.width, y: r_nu.y + r_nu.height },\r\n        { x: r_nu.x, y: r_nu.y + r_nu.height },\r\n      ];\r\n\r\n      mapData.setNcodeArea({\r\n        pageInfo: ncode.pageInfo,\r\n        pdfDrawnRect: { ...pdfRect_nu },\r\n        npageArea: polygon,\r\n      });\r\n\r\n\r\n      /** PDF 좌표계 */\r\n      mapData.setPdfArea({\r\n        pdfPageInfo: { ...desc.pdfPageInfo },\r\n        rect: {\r\n          unit: \"pu\",\r\n          x: 0, y: 0,\r\n          width: desc.width_pu,\r\n          height: desc.height_pu,\r\n        }\r\n      });\r\n\r\n      const trans = new CoordinateTanslater();\r\n      trans.calc(mapData);\r\n      const pageNo = desc.pdfPageInfo.pageNo;\r\n      const page = this.getPage(pageNo);\r\n      page.setTranslater(trans);\r\n\r\n      if (assignNewCode) {\r\n        const st = MappingStorage.getInstance();\r\n        st.register(trans);\r\n\r\n\r\n      }\r\n      // trans.dump(`[dump-${this._url}]-${i} `);\r\n    }\r\n\r\n    if (assignNewCode) {\r\n      const st = MappingStorage.getInstance();\r\n      // st.dump(\"MAP\");\r\n    }\r\n  }\r\n\r\n  setDocumentId = (pagesPerSheet: number) => {\r\n    this._id = getDocumentId(this._fingerprint, pagesPerSheet);\r\n  }\r\n\r\n  get id() {\r\n    return this._id;\r\n  }\r\n\r\n  setPageOverview = async (pdf) => {\r\n    // const pdf = this.props.pdf;\r\n    this.pagesOverview = new Array(pdf.numPages + 1);\r\n    // const { pagesPerSheet } = this.printOption;\r\n\r\n    let numPortraitPages = 0;\r\n    let numLandscapePages = 0;\r\n\r\n    for (let i = 0; i < pdf.numPages; i++) {\r\n      const page = await pdf.getPageAsync(i + 1);\r\n      const vpt: PDF_VIEWPORT_DESC = page.getViewport({ scale: 1, rotation: 0 });\r\n      const { width, height } = vpt;\r\n\r\n      const landscape = width > height;\r\n      landscape ? numLandscapePages++ : numPortraitPages++;\r\n\r\n      const pageOverview = {\r\n        rotation: vpt.rotation,\r\n        landscape,\r\n        sizePu: { width, height },\r\n      }\r\n      this.pagesOverview[i] = pageOverview;\r\n    }\r\n\r\n\r\n    if (numPortraitPages >= numLandscapePages) {\r\n      this.direction = \"portrait\";\r\n    } else {\r\n      this.direction = \"landscape\";\r\n    }\r\n\r\n    return this.direction;\r\n  }\r\n}\r\n","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\UtilFunc.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\SurfaceSplitter.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PagesForPrint.tsx",["587"],"import React from \"react\";\r\n\r\nimport { PageForPrint } from \"./PageForPrint\";\r\nimport \"./print.css\";\r\n\r\nimport { ISize } from \"../DataStructure/Structures\";\r\nimport { IPrintOption } from \"./PrintDataTypes\";\r\nimport NeoPdfDocument from \"../NeoPdf/NeoPdfDocument\";\r\nimport { PDF_VIEWPORT_DESC } from \"../NeoPdf/NeoPdfPage\";\r\n\r\ninterface Props { // tslint:disable-line interface-over-type-literal\r\n  text: string,\r\n  pdf: NeoPdfDocument,\r\n  shouldRenderPage: boolean,\r\n  /** null이면 화면 전용 */\r\n  OnPagePrepared: Function,\r\n\r\n  printOption: IPrintOption,\r\n\r\n  pagesOverview: IPageOverview[],\r\n\r\n};\r\n\r\ntype State = {\r\n  renderState: string,\r\n};\r\n\r\nexport type IPageOverview = {\r\n  rotation: number,\r\n\r\n  /** pdf의 viewport가 rotation 0일 때의 크기로 판단(rotation은 고려하지 않음) */\r\n  landscape: boolean,\r\n\r\n  /** pdf의 viewport의 rotation은 고려하지 않음, 각 페이지에서 rotation된 것으로 rendering */\r\n  sizePu: ISize,\r\n}\r\n\r\nexport class PagesForPrint extends React.Component<Props, State> {\r\n\r\n  printOption: IPrintOption = null;\r\n\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.printOption = this.props.printOption;\r\n    this.state = {\r\n      renderState: \"rendering\",\r\n    };\r\n    // console.time('Function #1');\r\n  }\r\n\r\n  setPageOverview_old = async (pdf) => {\r\n    this.setState({\r\n      renderState: \"ready\",\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.pdf) {\r\n      this.setPageOverview_old(this.props.pdf);\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\r\n\r\n    if (this.state.renderState !== \"ready\" && nextState.renderState === \"ready\") {\r\n      return true;\r\n    }\r\n\r\n    if (this.props.pdf !== nextProps.pdf) {\r\n      console.log(`[yyy] setPageOverview_old called`);\r\n      this.setPageOverview_old(nextProps.pdf);\r\n      return true;\r\n    }\r\n\r\n\r\n    return false;\r\n  }\r\n\r\n  componentDidUpdate(nextProps, nextState) {\r\n    // console.log(\"[xxx] PagesForPrint componentDidUpdate\");\r\n  }\r\n\r\n  public render() {\r\n    const { renderState } = this.state;\r\n    const { pdf, OnPagePrepared, pagesOverview } = this.props;\r\n\r\n    const printOption = this.printOption;\r\n    const { pagesPerSheet, targetPages, } = printOption;\r\n\r\n    const numPages = targetPages.length;\r\n    const numSheets = Math.ceil(numPages / pagesPerSheet);\r\n    const pageNumsInSheet: number[][] = new Array(numSheets);\r\n\r\n\r\n    for (let i = 0; i < numSheets; i++) {\r\n      pageNumsInSheet[i] = new Array(0);\r\n\r\n      for (let j = 0; j < pagesPerSheet && (i * pagesPerSheet + j) < numPages; j++) {\r\n        const pageNo = targetPages[i * pagesPerSheet + j];\r\n        pageNumsInSheet[i].push(pageNo);\r\n      }\r\n    }\r\n\r\n\r\n    return (\r\n      // <div className=\"relativeCSS\">\r\n      <div>\r\n        {renderState === \"ready\" ? pageNumsInSheet.map(\r\n          (v, i) => {\r\n            // console.log(`Page displaying ${i}`);\r\n            return (\r\n              <div>\r\n                {/* { isLandscape ? (<LandscapeOrientation />) : (<PortraitOrientation />)} */}\r\n                { console.log(`[key] page-${pdf.fingerprint}-${i}`)}\r\n\r\n                <PageForPrint\r\n                  pdf={pdf}\r\n                  sheetIndex={i}\r\n                  key={`page-${pdf.fingerprint}-${i}`}\r\n                  name={`page-${pdf.fingerprint}-${i}`}\r\n                  OnPagePrepared={OnPagePrepared}\r\n                  printOption={printOption}\r\n                  pageNums={pageNumsInSheet[i]}\r\n                  pagesOverview={pagesOverview}\r\n                />\r\n              </div>\r\n            )\r\n          }\r\n        ) : <></>}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PageOrientation.jsx",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\MappingItem.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\MappingStorage.ts",["588","589","590"],"import { CoordinateTanslater, IMappingParams, IPdfPageDesc } from \"../Coordinates\";\r\nimport { INcodeSOBPxy, IPageSOBP } from \"../DataStructure/Structures\";\r\nimport { isSamePage } from \"../NcodeSurface\";\r\nimport { IPdfDocDesc } from \"../NeoPdf/NeoPdfDocument\";\r\n\r\nvar _instance: MappingStorage = null;\r\nconst LOCAL_STORAGE_ID = \"GridaBoard_codeMappingInfo_v2\";\r\n\r\nexport default class MappingStorage {\r\n  _arrMapped: IMappingParams[] = [];\r\n\r\n  private constructor() {\r\n  }\r\n\r\n  static getInstance() {\r\n    if (_instance) return _instance;\r\n\r\n    _instance = new MappingStorage();\r\n    return _instance;\r\n  }\r\n\r\n  register = (item: CoordinateTanslater) => {\r\n    const params = item.mappingParams;\r\n\r\n    var now = new Date();\r\n    var timeStr =\r\n      `${addZeros(now.getFullYear(), 2)}/` +\r\n      `${addZeros(now.getMonth() + 1, 2)}/` +\r\n      `${addZeros(now.getDate(), 2)} ` +\r\n      `${addZeros(now.getHours(), 2)}:` +\r\n      `${addZeros(now.getMinutes(), 2)}:` +\r\n      `${addZeros(now.getSeconds(), 2)}.` +\r\n      `${addZeros(now.getMilliseconds(), 4)}`;\r\n\r\n    params.timeString = timeStr; // JSON.stringify(new Date());\r\n    this._arrMapped.push(params);\r\n  }\r\n\r\n  /**\r\n   * pen down시에 새로운 SOBP라면, 관련된 PDF가 있는지 찾을 때 쓰인다\r\n   */\r\n  findPdfPage = (ncodeXy: INcodeSOBPxy) => {\r\n    // const pdfPageInfo: IPdfPageDesc = null;\r\n    // const pdfDocInfo: IPdfDocDesc = null;\r\n\r\n    // let found = -1;\r\n    // for ( let i=0; i<this._arrMapped.length; i++ ) {\r\n    //   const trans = this._arrMapped[i];\r\n    //   if ( isSamePage(ncodeXy as IPageSOBP, trans.pageInfo) ) {\r\n    //     found = i;\r\n    //     break;\r\n    //   }\r\n    // }\r\n\r\n\r\n    /** 원래는 폴리곤에 속했는지 점검해야 하지만, 현재는 같은 페이지인지만 점검한다  2020/12/06 */\r\n    const found = this._arrMapped.find(trans => isSamePage(ncodeXy, trans.pageInfo));\r\n    return found;\r\n  }\r\n\r\n  /**\r\n   * Ncode가 발행된 적이 있는지를 점검하기 위해서 쓰인다.\r\n   */\r\n  findMappedNcode = (pdfId: string) => {\r\n    const found = this._arrMapped.find(trans => pdfId === trans.pdfDesc.id);\r\n    return found;\r\n  }\r\n\r\n  dump = (prefix: string) => {\r\n    console.log(`[${prefix}]----------------------------------------------------------------------`);\r\n    const str = JSON.stringify(this._arrMapped, null, \"  \");\r\n    const arr = str.split(\"\\n\");\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n      console.log(`[${prefix}] ${arr[i]}`);\r\n    }\r\n    console.log(`[${prefix}]----------------------------------------------------------------------`);\r\n  }\r\n\r\n\r\n\r\n  storeMappingInfo = () => {\r\n    if (storageAvailable(\"localStorage\")) {\r\n      const key = LOCAL_STORAGE_ID;\r\n      const value = JSON.stringify(this._arrMapped);\r\n      // console.log(`Pdf Ncode Info Saved   ${key}: ${value}`);\r\n      localStorage.setItem(key, value);\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n\r\n  /**\r\n   * app이 기동되면 반드시 처음에 load하자\r\n   *\r\n   * @return {boolean}\r\n   */\r\n  loadMappingInfo = () => {\r\n    if (storageAvailable(\"localStorage\")) {\r\n      const key = LOCAL_STORAGE_ID;\r\n      const value = localStorage.getItem(key);\r\n\r\n      if (value) {\r\n        this._arrMapped = JSON.parse(value);\r\n\r\n        this._arrMapped.sort(function (a, b) {\r\n          if (a.timeString < b.timeString) return 1;\r\n          else if (a.timeString > b.timeString) return -1;\r\n          else return 0;\r\n        });\r\n\r\n        // const debug = JSON.stringify(this._arrMapped);\r\n        // console.log(`Pdf Ncode Info Loaded   ${key}: ${debug}`);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\n\r\nfunction storageAvailable(type) {\r\n  var storage;\r\n  try {\r\n    storage = window[type];\r\n    var x = \"__storage_test__\";\r\n    storage.setItem(x, x);\r\n    storage.removeItem(x);\r\n    return true;\r\n  } catch (e) {\r\n    return (\r\n      e instanceof DOMException &&\r\n      // Firefox를 제외한 모든 브라우저\r\n      (e.code === 22 ||\r\n        // Firefox\r\n        e.code === 1014 ||\r\n        // 코드가 존재하지 않을 수도 있기 떄문에 이름 필드도 확인합니다.\r\n        // Firefox를 제외한 모든 브라우저\r\n        e.name === \"QuotaExceededError\" ||\r\n        // Firefox\r\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\r\n      // 이미 저장된 것이있는 경우에만 QuotaExceededError를 확인하십시오.\r\n      storage &&\r\n      storage.length !== 0\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction addZeros(num, digit) {\r\n  // 자릿수 맞춰주기\r\n  var zero = \"\";\r\n  num = num.toString();\r\n  if (num.length < digit) {\r\n    for (var i = 0; i < digit - num.length; i++) {\r\n      zero += \"0\";\r\n    }\r\n  }\r\n  return zero + num;\r\n}\r\n","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfPage.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\DataStructure\\Structures.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\index.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\SurfaceInfo.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeRasterizer.tsx",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PageForPrint.tsx",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeConstans.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\index.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeSurfaceDataJson.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeFetcher.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\index.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\DataTypes.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\CoordinateTanslater.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\SolveTransform.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\EchelonMatrix.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\GaussianElimination.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pdf\\NeoPdfViewer.tsx",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\renderer\\pdf\\Page.tsx",["591","592"],"/// <reference types=\"pdfjs-dist\" />\r\n\r\nimport React, { Component } from 'react';\r\nimport { pdfSizeToDIsplayPixel } from \"../../utils/UtilsFunc\";\r\n\r\nimport \"pdfjs-dist\";\r\nimport * as PdfJs from \"pdfjs-dist\";\r\n\r\n\r\n/**\r\n * Page.js\r\n * Component rendering page of PDF\r\n **/\r\n\r\ninterface PageProps {\r\n  pdf: PdfJs.PDFDocumentProxy,\r\n  index: number,\r\n  scale?: number,\r\n  position: { offsetX: number, offsetY: number, zoom: number },\r\n}\r\n\r\ninterface PageState {\r\n  status: string,\r\n  page: PdfJs.PDFPageProxy | null,\r\n  width: number,\r\n  height: number,\r\n  imgSrc: string,\r\n  renderCount: number;\r\n}\r\n\r\nclass Page extends Component<PageProps> {\r\n  state: PageState = {\r\n    status: 'N/A',\r\n    page: null,\r\n    width: 0,\r\n    height: 0,\r\n    imgSrc: URL.createObjectURL(new Blob()),\r\n    renderCount: 0,\r\n  };\r\n\r\n  canvas: HTMLCanvasElement | null = null;\r\n  inRendering: boolean = false;\r\n  inImageRendering: boolean = false;\r\n\r\n  scaleCanvas(canvas: HTMLCanvasElement, width: number, height: number, zoom: number) {\r\n    // assume the device pixel ratio is 1 if the browser doesn't specify it\r\n    const devicePixelRatio = window.devicePixelRatio || 1;\r\n    const context = canvas.getContext('2d');\r\n\r\n    // determine the 'backing store ratio' of the canvas context\r\n    const backingStoreRatio = 1;\r\n    // (\r\n    //   context.webkitBackingStorePixelRatio ||\r\n    //   context.mozBackingStorePixelRatio ||\r\n    //   context.msBackingStorePixelRatio ||\r\n    //   context.oBackingStorePixelRatio ||\r\n    //   context.backingStorePixelRatio || 1\r\n    // );\r\n\r\n    // determine the actual ratio we want to draw at\r\n    const ratio = devicePixelRatio * zoom / backingStoreRatio;\r\n\r\n    if (devicePixelRatio !== backingStoreRatio) {\r\n      // set the 'real' canvas size to the higher width/height\r\n      canvas.width = width * ratio;\r\n      canvas.height = height * ratio;\r\n\r\n      // ...then scale it back down with CSS\r\n      canvas.style.width = width + 'px';\r\n      canvas.style.height = height + 'px';\r\n    }\r\n    else {\r\n      // this is a normal 1:1 device; just scale it simply\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      canvas.style.width = '';\r\n      canvas.style.height = '';\r\n    }\r\n\r\n    // scale the drawing context so everything will work at the higher ratio\r\n    context.scale(ratio, ratio);\r\n  }\r\n\r\n\r\n  shouldComponentUpdate(nextProps: PageProps, nextState: PageState) {\r\n    const ret = this.state.status !== nextState.status || this.state.renderCount !== nextState.renderCount || this.state.page !== nextState.page;\r\n    const zoomChanged = nextProps.position.zoom !== this.props.position.zoom;\r\n    const imageChanged = nextState.imgSrc !== this.state.imgSrc;\r\n\r\n    if (zoomChanged) {\r\n      this.renderPage(this.state.page, nextProps.position.zoom);\r\n      return false;\r\n    }\r\n\r\n    const pdfChanged = this.props.pdf !== nextProps.pdf;\r\n    if (pdfChanged) {\r\n      this._update(nextProps.pdf);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n    // return ret || zoomChanged || imageChanged;\r\n  }\r\n\r\n  componentDidUpdate(nextProps: PageProps) {\r\n    // this._update(nextProps.pdf);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { pdf } = this.props;\r\n    this._update(pdf);\r\n  }\r\n\r\n  setCanvasRef = (canvas: HTMLCanvasElement) => {\r\n    this.canvas = canvas;\r\n  };\r\n\r\n  /**\r\n   *\r\n   */\r\n  _update = (pdf: PdfJs.PDFDocumentProxy) => {\r\n    if (pdf) {\r\n      this._loadPage(pdf);\r\n    } else {\r\n      this.setState({ status: 'loading' });\r\n    }\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param page\r\n   * @param zoom\r\n   */\r\n  renderPage = (page: PdfJs.PDFPageProxy, zoom: number) => {\r\n    if (!this.inRendering) {\r\n      this._renderPage(page);\r\n    }\r\n    if (!this.inImageRendering) {\r\n      // this.renderPageToImage(page, zoom);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  _loadPage = (pdf: PdfJs.PDFDocumentProxy) => {\r\n    if (this.state.status === 'rendering') return;\r\n\r\n    pdf.getPage(this.props.index).then(\r\n      (page) => {\r\n        this.setState({ page, status: 'rendering' });\r\n        this.renderPage(page, this.props.position.zoom);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n\r\n  renderPageToImage = (page: PdfJs.PDFPageProxy, zoom: number): HTMLImageElement => {\r\n    let img = document.createElement(\"img\");\r\n    var canvas = document.createElement(\"canvas\");\r\n\r\n    this.inImageRendering = true;\r\n\r\n    console.log(this.props);\r\n    // let { scale } = this.props;\r\n\r\n    // let aa = 2;\r\n\r\n    let viewport: any = page.getViewport({ scale: 1 });\r\n    let { width, height } = viewport;\r\n\r\n    let size = { width, height };\r\n    const displaySize = pdfSizeToDIsplayPixel(size);\r\n    const new_scale = displaySize.width / viewport.width;\r\n\r\n    viewport = page.getViewport({ scale: new_scale });\r\n\r\n    let ctx = canvas.getContext('2d');\r\n\r\n    // scaleCanvas(canvas, ctx, width, height);\r\n    this.scaleCanvas(canvas, displaySize.width, displaySize.height, zoom);\r\n\r\n    ctx.save();\r\n    ctx.fillStyle = \"rgba(255, 255, 255, 255)\";     // 투명 캔버스\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    console.log(viewport);\r\n    ctx.restore();\r\n\r\n    let renderTask = page.render({\r\n      canvasContext: ctx,\r\n      viewport,\r\n      // intent: \"print\",\r\n    });\r\n\r\n    let self = this;\r\n    renderTask.promise.then(() => {\r\n      self.setState({ status: 'rendered', page, width, height });\r\n\r\n      const canvasAny: any = canvas;\r\n      if (\"toBlob\" in canvasAny) {\r\n        canvasAny.toBlob(function (blob) {\r\n          self.setState({ imgSrc: URL.createObjectURL(blob) });\r\n        });\r\n      } else {\r\n        self.setState({ imgSrc: canvasAny.toDataURL() });\r\n      }\r\n\r\n      // self.setState({ status: 'rendered', page, width, height });\r\n\r\n      this.inImageRendering = false;\r\n    });\r\n\r\n    return img;\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   */\r\n  _renderPage = (page: PdfJs.PDFPageProxy) => {\r\n    // return;\r\n    this.inRendering = true;\r\n\r\n    console.log(this.props);\r\n    // let { scale } = this.props;\r\n\r\n    // let aa = 2;\r\n\r\n    let viewport: any = page.getViewport({ scale: 1 });\r\n    let { width, height } = viewport;\r\n    let canvas = this.canvas;\r\n\r\n    let size = { width, height };\r\n    const displaySize = pdfSizeToDIsplayPixel(size);\r\n    const new_scale = displaySize.width / viewport.width;\r\n\r\n    viewport = page.getViewport({ scale: new_scale });\r\n    // viewport.viewBox[2] = 100;\r\n    let ctx = canvas.getContext('2d');\r\n\r\n    // scaleCanvas(canvas, ctx, width, height);\r\n    this.scaleCanvas(canvas, displaySize.width, displaySize.height, this.props.position.zoom);\r\n    console.log(viewport);\r\n\r\n    let renderTask = page.render({\r\n      canvasContext: ctx,\r\n      viewport,\r\n      // intent: \"print\",\r\n    });\r\n\r\n    let self = this;\r\n    renderTask.promise.then(() => {\r\n      let renderCount = this.state.renderCount + 1;\r\n      self.setState({ status: 'rendered', page, width, height, renderCount });\r\n      this.inRendering = false;\r\n    });\r\n  }\r\n\r\n  render = () => {\r\n    let { status } = this.state;\r\n\r\n    return (\r\n      <div className={`pdf-page ${status}`} >\r\n        {/* <img src={this.state.imgSrc} /> */}\r\n        <canvas ref={this.setCanvasRef} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Page };","C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_enum.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_const.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_event.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_base.ts",[],"C:\\Users\\loite\\Documents\\GridaBoard2\\src\\neosmartpen\\pencomm\\pen_util_func.ts",[],{"ruleId":"593","replacedBy":"594"},{"ruleId":"595","replacedBy":"596"},{"ruleId":"597","severity":1,"message":"598","line":4,"column":26,"nodeType":"599","messageId":"600","endLine":4,"endColumn":41},{"ruleId":"597","severity":1,"message":"601","line":7,"column":7,"nodeType":"599","messageId":"600","endLine":7,"endColumn":19},{"ruleId":"593","replacedBy":"594"},{"ruleId":"595","replacedBy":"596"},{"ruleId":"602","severity":1,"message":"603","line":32,"column":1,"nodeType":"604","endLine":52,"endColumn":3},{"ruleId":"602","severity":1,"message":"603","line":94,"column":1,"nodeType":"604","endLine":192,"endColumn":3},{"ruleId":"605","severity":1,"message":"606","line":5,"column":8,"nodeType":"599","messageId":"600","endLine":5,"endColumn":18},{"ruleId":"607","severity":1,"message":"608","line":123,"column":7,"nodeType":"609","endLine":123,"endColumn":61},{"ruleId":"610","severity":1,"message":"611","line":222,"column":27,"nodeType":"609","endLine":222,"endColumn":103},{"ruleId":"610","severity":1,"message":"611","line":223,"column":27,"nodeType":"609","endLine":223,"endColumn":102},{"ruleId":"605","severity":1,"message":"612","line":4,"column":8,"nodeType":"599","messageId":"600","endLine":4,"endColumn":24},{"ruleId":"613","severity":1,"message":"614","line":171,"column":15,"nodeType":"599","messageId":"615","endLine":171,"endColumn":16},{"ruleId":"616","severity":1,"message":"617","line":184,"column":14,"nodeType":"618","messageId":"619","endLine":184,"endColumn":16},{"ruleId":"616","severity":1,"message":"617","line":189,"column":21,"nodeType":"618","messageId":"619","endLine":189,"endColumn":23},{"ruleId":"616","severity":1,"message":"617","line":194,"column":21,"nodeType":"618","messageId":"619","endLine":194,"endColumn":23},{"ruleId":"605","severity":1,"message":"620","line":1,"column":17,"nodeType":"599","messageId":"600","endLine":1,"endColumn":26},{"ruleId":"605","severity":1,"message":"621","line":1,"column":28,"nodeType":"599","messageId":"600","endLine":1,"endColumn":36},{"ruleId":"605","severity":1,"message":"622","line":3,"column":19,"nodeType":"599","messageId":"600","endLine":3,"endColumn":31},{"ruleId":"610","severity":1,"message":"611","line":40,"column":25,"nodeType":"609","endLine":40,"endColumn":107},{"ruleId":"610","severity":1,"message":"611","line":41,"column":25,"nodeType":"609","endLine":41,"endColumn":106},{"ruleId":"610","severity":1,"message":"611","line":43,"column":25,"nodeType":"609","endLine":43,"endColumn":113},{"ruleId":"610","severity":1,"message":"611","line":44,"column":25,"nodeType":"609","endLine":44,"endColumn":112},{"ruleId":"610","severity":1,"message":"611","line":46,"column":25,"nodeType":"609","endLine":46,"endColumn":110},{"ruleId":"610","severity":1,"message":"611","line":47,"column":25,"nodeType":"609","endLine":47,"endColumn":109},{"ruleId":"610","severity":1,"message":"611","line":68,"column":29,"nodeType":"609","endLine":68,"endColumn":107},{"ruleId":"610","severity":1,"message":"611","line":69,"column":29,"nodeType":"609","endLine":69,"endColumn":106},{"ruleId":"610","severity":1,"message":"611","line":84,"column":33,"nodeType":"609","endLine":84,"endColumn":116},{"ruleId":"610","severity":1,"message":"611","line":85,"column":33,"nodeType":"609","endLine":85,"endColumn":115},{"ruleId":"610","severity":1,"message":"611","line":100,"column":33,"nodeType":"609","endLine":100,"endColumn":114},{"ruleId":"610","severity":1,"message":"611","line":101,"column":33,"nodeType":"609","endLine":101,"endColumn":113},{"ruleId":"610","severity":1,"message":"611","line":120,"column":33,"nodeType":"609","endLine":120,"endColumn":120},{"ruleId":"610","severity":1,"message":"611","line":121,"column":33,"nodeType":"609","endLine":121,"endColumn":119},{"ruleId":"610","severity":1,"message":"611","line":135,"column":33,"nodeType":"609","endLine":135,"endColumn":120},{"ruleId":"610","severity":1,"message":"611","line":136,"column":33,"nodeType":"609","endLine":136,"endColumn":119},{"ruleId":"610","severity":1,"message":"611","line":150,"column":33,"nodeType":"609","endLine":150,"endColumn":120},{"ruleId":"610","severity":1,"message":"611","line":151,"column":33,"nodeType":"609","endLine":151,"endColumn":119},{"ruleId":"610","severity":1,"message":"611","line":165,"column":33,"nodeType":"609","endLine":165,"endColumn":120},{"ruleId":"610","severity":1,"message":"611","line":166,"column":33,"nodeType":"609","endLine":166,"endColumn":119},{"ruleId":"610","severity":1,"message":"611","line":180,"column":33,"nodeType":"609","endLine":180,"endColumn":120},{"ruleId":"610","severity":1,"message":"611","line":181,"column":33,"nodeType":"609","endLine":181,"endColumn":119},{"ruleId":"605","severity":1,"message":"620","line":1,"column":17,"nodeType":"599","messageId":"600","endLine":1,"endColumn":26},{"ruleId":"605","severity":1,"message":"621","line":1,"column":28,"nodeType":"599","messageId":"600","endLine":1,"endColumn":36},{"ruleId":"605","severity":1,"message":"622","line":4,"column":19,"nodeType":"599","messageId":"600","endLine":4,"endColumn":31},{"ruleId":"610","severity":1,"message":"611","line":58,"column":13,"nodeType":"609","endLine":58,"endColumn":85},{"ruleId":"610","severity":1,"message":"611","line":59,"column":13,"nodeType":"609","endLine":59,"endColumn":89},{"ruleId":"610","severity":1,"message":"611","line":60,"column":13,"nodeType":"609","endLine":60,"endColumn":85},{"ruleId":"610","severity":1,"message":"611","line":61,"column":13,"nodeType":"609","endLine":61,"endColumn":87},{"ruleId":"605","severity":1,"message":"620","line":1,"column":17,"nodeType":"599","messageId":"600","endLine":1,"endColumn":26},{"ruleId":"605","severity":1,"message":"621","line":1,"column":28,"nodeType":"599","messageId":"600","endLine":1,"endColumn":36},{"ruleId":"605","severity":1,"message":"622","line":3,"column":19,"nodeType":"599","messageId":"600","endLine":3,"endColumn":31},{"ruleId":"610","severity":1,"message":"611","line":30,"column":15,"nodeType":"609","endLine":30,"endColumn":108},{"ruleId":"610","severity":1,"message":"611","line":31,"column":15,"nodeType":"609","endLine":31,"endColumn":107},{"ruleId":"610","severity":1,"message":"611","line":32,"column":15,"nodeType":"609","endLine":32,"endColumn":108},{"ruleId":"610","severity":1,"message":"611","line":33,"column":15,"nodeType":"609","endLine":33,"endColumn":107},{"ruleId":"605","severity":1,"message":"620","line":1,"column":17,"nodeType":"599","messageId":"600","endLine":1,"endColumn":26},{"ruleId":"605","severity":1,"message":"621","line":1,"column":28,"nodeType":"599","messageId":"600","endLine":1,"endColumn":36},{"ruleId":"605","severity":1,"message":"622","line":3,"column":19,"nodeType":"599","messageId":"600","endLine":3,"endColumn":31},{"ruleId":"610","severity":1,"message":"611","line":43,"column":19,"nodeType":"609","endLine":43,"endColumn":68},{"ruleId":"610","severity":1,"message":"611","line":44,"column":19,"nodeType":"609","endLine":44,"endColumn":67},{"ruleId":"607","severity":1,"message":"608","line":49,"column":15,"nodeType":"609","endLine":49,"endColumn":89},{"ruleId":"623","severity":1,"message":"624","line":49,"column":68,"nodeType":"625","messageId":"626","endLine":49,"endColumn":88},{"ruleId":"610","severity":1,"message":"611","line":51,"column":23,"nodeType":"609","endLine":51,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":52,"column":23,"nodeType":"609","endLine":52,"endColumn":75},{"ruleId":"607","severity":1,"message":"608","line":56,"column":15,"nodeType":"609","endLine":56,"endColumn":90},{"ruleId":"623","severity":1,"message":"624","line":56,"column":69,"nodeType":"625","messageId":"626","endLine":56,"endColumn":89},{"ruleId":"610","severity":1,"message":"611","line":58,"column":23,"nodeType":"609","endLine":58,"endColumn":77},{"ruleId":"610","severity":1,"message":"611","line":59,"column":23,"nodeType":"609","endLine":59,"endColumn":76},{"ruleId":"607","severity":1,"message":"608","line":63,"column":15,"nodeType":"609","endLine":63,"endColumn":90},{"ruleId":"623","severity":1,"message":"624","line":63,"column":69,"nodeType":"625","messageId":"626","endLine":63,"endColumn":89},{"ruleId":"610","severity":1,"message":"611","line":65,"column":23,"nodeType":"609","endLine":65,"endColumn":77},{"ruleId":"610","severity":1,"message":"611","line":66,"column":23,"nodeType":"609","endLine":66,"endColumn":76},{"ruleId":"607","severity":1,"message":"608","line":70,"column":15,"nodeType":"609","endLine":70,"endColumn":89},{"ruleId":"623","severity":1,"message":"624","line":70,"column":68,"nodeType":"625","messageId":"626","endLine":70,"endColumn":88},{"ruleId":"610","severity":1,"message":"611","line":72,"column":23,"nodeType":"609","endLine":72,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":73,"column":23,"nodeType":"609","endLine":73,"endColumn":75},{"ruleId":"605","severity":1,"message":"620","line":1,"column":17,"nodeType":"599","messageId":"600","endLine":1,"endColumn":26},{"ruleId":"605","severity":1,"message":"621","line":1,"column":28,"nodeType":"599","messageId":"600","endLine":1,"endColumn":36},{"ruleId":"610","severity":1,"message":"611","line":11,"column":15,"nodeType":"609","endLine":11,"endColumn":92},{"ruleId":"610","severity":1,"message":"611","line":12,"column":15,"nodeType":"609","endLine":12,"endColumn":91},{"ruleId":"605","severity":1,"message":"620","line":1,"column":17,"nodeType":"599","messageId":"600","endLine":1,"endColumn":26},{"ruleId":"605","severity":1,"message":"621","line":1,"column":28,"nodeType":"599","messageId":"600","endLine":1,"endColumn":36},{"ruleId":"610","severity":1,"message":"611","line":14,"column":19,"nodeType":"609","endLine":14,"endColumn":100},{"ruleId":"610","severity":1,"message":"611","line":15,"column":19,"nodeType":"609","endLine":15,"endColumn":99},{"ruleId":"607","severity":1,"message":"608","line":20,"column":13,"nodeType":"609","endLine":20,"endColumn":51},{"ruleId":"607","severity":1,"message":"608","line":22,"column":15,"nodeType":"609","endLine":23,"endColumn":52},{"ruleId":"623","severity":1,"message":"624","line":22,"column":64,"nodeType":"625","messageId":"626","endLine":22,"endColumn":84},{"ruleId":"610","severity":1,"message":"611","line":25,"column":23,"nodeType":"609","endLine":25,"endColumn":101},{"ruleId":"610","severity":1,"message":"611","line":26,"column":23,"nodeType":"609","endLine":26,"endColumn":100},{"ruleId":"607","severity":1,"message":"608","line":31,"column":15,"nodeType":"609","endLine":32,"endColumn":52},{"ruleId":"623","severity":1,"message":"624","line":31,"column":66,"nodeType":"625","messageId":"626","endLine":31,"endColumn":86},{"ruleId":"610","severity":1,"message":"611","line":34,"column":23,"nodeType":"609","endLine":34,"endColumn":101},{"ruleId":"610","severity":1,"message":"611","line":35,"column":23,"nodeType":"609","endLine":35,"endColumn":100},{"ruleId":"607","severity":1,"message":"608","line":40,"column":15,"nodeType":"609","endLine":41,"endColumn":52},{"ruleId":"623","severity":1,"message":"624","line":40,"column":67,"nodeType":"625","messageId":"626","endLine":40,"endColumn":87},{"ruleId":"610","severity":1,"message":"611","line":43,"column":23,"nodeType":"609","endLine":43,"endColumn":99},{"ruleId":"610","severity":1,"message":"611","line":44,"column":23,"nodeType":"609","endLine":44,"endColumn":98},{"ruleId":"607","severity":1,"message":"608","line":49,"column":15,"nodeType":"609","endLine":50,"endColumn":52},{"ruleId":"623","severity":1,"message":"624","line":49,"column":67,"nodeType":"625","messageId":"626","endLine":49,"endColumn":87},{"ruleId":"610","severity":1,"message":"611","line":52,"column":23,"nodeType":"609","endLine":52,"endColumn":99},{"ruleId":"610","severity":1,"message":"611","line":53,"column":23,"nodeType":"609","endLine":53,"endColumn":98},{"ruleId":"605","severity":1,"message":"622","line":4,"column":19,"nodeType":"599","messageId":"600","endLine":4,"endColumn":31},{"ruleId":"605","severity":1,"message":"620","line":1,"column":17,"nodeType":"599","messageId":"600","endLine":1,"endColumn":26},{"ruleId":"605","severity":1,"message":"621","line":1,"column":28,"nodeType":"599","messageId":"600","endLine":1,"endColumn":36},{"ruleId":"605","severity":1,"message":"622","line":3,"column":19,"nodeType":"599","messageId":"600","endLine":3,"endColumn":31},{"ruleId":"610","severity":1,"message":"611","line":31,"column":15,"nodeType":"609","endLine":31,"endColumn":98},{"ruleId":"610","severity":1,"message":"611","line":32,"column":15,"nodeType":"609","endLine":32,"endColumn":97},{"ruleId":"605","severity":1,"message":"620","line":1,"column":17,"nodeType":"599","messageId":"600","endLine":1,"endColumn":26},{"ruleId":"605","severity":1,"message":"621","line":1,"column":28,"nodeType":"599","messageId":"600","endLine":1,"endColumn":36},{"ruleId":"605","severity":1,"message":"627","line":3,"column":10,"nodeType":"599","messageId":"600","endLine":3,"endColumn":17},{"ruleId":"605","severity":1,"message":"628","line":15,"column":9,"nodeType":"599","messageId":"600","endLine":15,"endColumn":14},{"ruleId":"610","severity":1,"message":"611","line":34,"column":15,"nodeType":"609","endLine":34,"endColumn":104},{"ruleId":"610","severity":1,"message":"611","line":35,"column":15,"nodeType":"609","endLine":35,"endColumn":103},{"ruleId":"610","severity":1,"message":"611","line":36,"column":15,"nodeType":"609","endLine":36,"endColumn":103},{"ruleId":"610","severity":1,"message":"611","line":37,"column":15,"nodeType":"609","endLine":37,"endColumn":102},{"ruleId":"605","severity":1,"message":"622","line":3,"column":19,"nodeType":"599","messageId":"600","endLine":3,"endColumn":31},{"ruleId":"610","severity":1,"message":"611","line":31,"column":15,"nodeType":"609","endLine":31,"endColumn":90},{"ruleId":"610","severity":1,"message":"611","line":32,"column":15,"nodeType":"609","endLine":32,"endColumn":89},{"ruleId":"610","severity":1,"message":"611","line":52,"column":17,"nodeType":"609","endLine":52,"endColumn":92},{"ruleId":"610","severity":1,"message":"611","line":53,"column":17,"nodeType":"609","endLine":53,"endColumn":91},{"ruleId":"610","severity":1,"message":"611","line":11,"column":17,"nodeType":"609","endLine":11,"endColumn":93},{"ruleId":"610","severity":1,"message":"611","line":12,"column":17,"nodeType":"609","endLine":12,"endColumn":92},{"ruleId":"605","severity":1,"message":"622","line":3,"column":19,"nodeType":"599","messageId":"600","endLine":3,"endColumn":31},{"ruleId":"610","severity":1,"message":"611","line":30,"column":17,"nodeType":"609","endLine":30,"endColumn":92},{"ruleId":"610","severity":1,"message":"611","line":31,"column":17,"nodeType":"609","endLine":31,"endColumn":91},{"ruleId":"607","severity":1,"message":"608","line":10,"column":17,"nodeType":"609","endLine":10,"endColumn":71},{"ruleId":"610","severity":1,"message":"611","line":15,"column":19,"nodeType":"609","endLine":15,"endColumn":115},{"ruleId":"610","severity":1,"message":"611","line":16,"column":19,"nodeType":"609","endLine":16,"endColumn":114},{"ruleId":"605","severity":1,"message":"629","line":313,"column":43,"nodeType":"599","messageId":"600","endLine":313,"endColumn":52},{"ruleId":"597","severity":1,"message":"630","line":6,"column":10,"nodeType":"599","messageId":"600","endLine":6,"endColumn":17},{"ruleId":"597","severity":1,"message":"631","line":8,"column":5,"nodeType":"599","messageId":"600","endLine":8,"endColumn":14},{"ruleId":"632","severity":1,"message":"633","line":29,"column":26,"nodeType":"599","messageId":"634","endLine":29,"endColumn":34},{"ruleId":"635","severity":1,"message":"614","line":40,"column":22,"nodeType":"599","messageId":"615","endLine":40,"endColumn":23},{"ruleId":"636","severity":1,"message":"637","line":53,"column":43,"nodeType":"638","messageId":"639","endLine":65,"endColumn":18},{"ruleId":"616","severity":1,"message":"640","line":88,"column":26,"nodeType":"618","messageId":"619","endLine":88,"endColumn":28},{"ruleId":"605","severity":1,"message":"641","line":17,"column":10,"nodeType":"599","messageId":"600","endLine":17,"endColumn":27},{"ruleId":"605","severity":1,"message":"642","line":17,"column":29,"nodeType":"599","messageId":"600","endLine":17,"endColumn":41},{"ruleId":"605","severity":1,"message":"643","line":20,"column":8,"nodeType":"599","messageId":"600","endLine":20,"endColumn":24},{"ruleId":"605","severity":1,"message":"644","line":24,"column":8,"nodeType":"599","messageId":"600","endLine":24,"endColumn":14},{"ruleId":"605","severity":1,"message":"645","line":5,"column":18,"nodeType":"599","messageId":"600","endLine":5,"endColumn":21},{"ruleId":"605","severity":1,"message":"646","line":25,"column":9,"nodeType":"599","messageId":"600","endLine":25,"endColumn":16},{"ruleId":"605","severity":1,"message":"647","line":27,"column":18,"nodeType":"599","messageId":"600","endLine":27,"endColumn":27},{"ruleId":"605","severity":1,"message":"648","line":225,"column":9,"nodeType":"599","messageId":"600","endLine":225,"endColumn":14},{"ruleId":"636","severity":1,"message":"649","line":237,"column":54,"nodeType":"650","messageId":"639","endLine":237,"endColumn":79},{"ruleId":"613","severity":1,"message":"614","line":268,"column":9,"nodeType":"599","messageId":"615","endLine":268,"endColumn":18},{"ruleId":"605","severity":1,"message":"651","line":57,"column":16,"nodeType":"599","messageId":"600","endLine":57,"endColumn":32},{"ruleId":"605","severity":1,"message":"621","line":1,"column":17,"nodeType":"599","messageId":"600","endLine":1,"endColumn":25},{"ruleId":"605","severity":1,"message":"652","line":90,"column":6,"nodeType":"599","messageId":"600","endLine":90,"endColumn":18},{"ruleId":"605","severity":1,"message":"653","line":93,"column":30,"nodeType":"599","messageId":"600","endLine":93,"endColumn":36},{"ruleId":"605","severity":1,"message":"654","line":97,"column":9,"nodeType":"599","messageId":"600","endLine":97,"endColumn":19},{"ruleId":"605","severity":1,"message":"655","line":100,"column":9,"nodeType":"599","messageId":"600","endLine":100,"endColumn":17},{"ruleId":"610","severity":1,"message":"611","line":182,"column":19,"nodeType":"609","endLine":182,"endColumn":84},{"ruleId":"610","severity":1,"message":"611","line":185,"column":19,"nodeType":"609","endLine":185,"endColumn":84},{"ruleId":"610","severity":1,"message":"611","line":188,"column":19,"nodeType":"609","endLine":188,"endColumn":84},{"ruleId":"610","severity":1,"message":"611","line":191,"column":19,"nodeType":"609","endLine":191,"endColumn":84},{"ruleId":"605","severity":1,"message":"656","line":187,"column":13,"nodeType":"599","messageId":"600","endLine":187,"endColumn":19},{"ruleId":"605","severity":1,"message":"657","line":188,"column":13,"nodeType":"599","messageId":"600","endLine":188,"endColumn":19},{"ruleId":"605","severity":1,"message":"658","line":235,"column":13,"nodeType":"599","messageId":"600","endLine":235,"endColumn":15},{"ruleId":"605","severity":1,"message":"659","line":9,"column":10,"nodeType":"599","messageId":"600","endLine":9,"endColumn":27},{"ruleId":"605","severity":1,"message":"660","line":1,"column":47,"nodeType":"599","messageId":"600","endLine":1,"endColumn":59},{"ruleId":"605","severity":1,"message":"661","line":2,"column":24,"nodeType":"599","messageId":"600","endLine":2,"endColumn":33},{"ruleId":"605","severity":1,"message":"662","line":4,"column":10,"nodeType":"599","messageId":"600","endLine":4,"endColumn":21},{"ruleId":"605","severity":1,"message":"663","line":86,"column":11,"nodeType":"599","messageId":"600","endLine":86,"endColumn":14},{"ruleId":"605","severity":1,"message":"664","line":88,"column":11,"nodeType":"599","messageId":"600","endLine":88,"endColumn":23},"no-native-reassign",["665"],"no-negated-in-lhs",["666"],"no-unused-vars","'combineReducers' is defined but never used.","Identifier","unusedVar","'prev_palette' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'PenManager' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'PenBasedRenderer' is defined but never used.","@typescript-eslint/no-redeclare","'i' is already defined.","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Component' is defined but never used.","'useState' is defined but never used.","'TooltipProps' is defined but never used.","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","'connect' is defined but never used.","'$elem' is assigned a value but never used.","'timeStamp' is assigned a value but never used.","'resolve' is defined but never used.","'FOLDER_ID' is assigned a value but never used.","no-self-assign","'folderId' is assigned to itself.","selfAssignment","no-redeclare","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'content', 'content', 'content', 'fileId'.","FunctionExpression","unsafeRefs","Expected '!==' and instead saw '!='.","'IPrintingProgress' is defined but never used.","'IPrintOption' is defined but never used.","'FormControlLabel' is defined but never used.","'Switch' is defined but never used.","'Box' is defined but never used.","'classes' is assigned a value but never used.","'setPageNo' is assigned a value but never used.","'paths' is assigned a value but never used.","Function declared in a loop contains unsafe references to variable(s) 'path'.","ArrowFunctionExpression","'performClick_old' is defined but never used.","'maxWidthType' is defined but never used.","'pageNo' is assigned a value but never used.","'handleSave' is assigned a value but never used.","'onChange' is assigned a value but never used.","'pt0_nu' is assigned a value but never used.","'pt1_nu' is assigned a value but never used.","'st' is assigned a value but never used.","'PDF_VIEWPORT_DESC' is defined but never used.","'IPdfPageDesc' is defined but never used.","'IPageSOBP' is defined but never used.","'IPdfDocDesc' is defined but never used.","'ret' is assigned a value but never used.","'imageChanged' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]