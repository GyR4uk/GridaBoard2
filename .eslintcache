[{"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\index.js":"1","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\serviceWorker.js":"2","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\client\\Root.js":"3","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\shared\\App.js":"4","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\styles\\theme.js":"5","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\rootReducer.ts":"6","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\reducers\\pointerTracer.js":"7","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\reducers\\authorization.js":"8","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\reducers\\ui.js":"9","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\Home.tsx":"10","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\penstorage\\InkStorage.ts":"11","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\UpperNav.tsx":"12","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\PrintButton.tsx":"13","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\CalibrationMenual.tsx":"14","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\FileLoad.tsx":"15","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\TracePointButton.tsx":"16","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\FullScreenButton.tsx":"17","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\ZoomButton.tsx":"18","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\RotateButton.tsx":"19","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\PageNumbering.tsx":"20","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\BackgroundButton.tsx":"21","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\FitButton.tsx":"22","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\ColorButtons.tsx":"23","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\ConnectButton.tsx":"24","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\PenTypeButton.tsx":"25","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\index.ts":"26","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\penstorage\\EventSystem.ts":"27","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\PenManager.ts":"28","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\utils\\UtilsFunc.ts":"29","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\styles\\ThemeManager.ts":"30","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\neosmartpen.ts":"31","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\noteserver\\PaperInfo.ts":"32","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\noteserver\\NoteserverClient.ts":"33","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\MixedPageView.tsx":"34","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\types\\index.js":"35","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\DefaultOption.ts":"36","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintDataTypes.ts":"37","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Locales\\i18n.ts":"38","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\PenBasedRenderer.tsx":"39","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\Upload.js":"40","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\CanvasColorConverter.ts":"41","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\index.ts":"42","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\RenderWorkerBase.tsx":"43","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Save\\SavePdf.tsx":"44","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\FileBrowserButton.tsx":"45","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\Calibration\\CalibrationButton.tsx":"46","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\Enums.ts":"47","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\utils\\JsUtils.js":"48","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\Modal\\PrintOptionDialog.tsx":"49","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\penstorage\\index.ts":"50","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\NeoDot.ts":"51","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pdf\\NeoPdfViewer.tsx":"52","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfManager.ts":"53","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\NeoStroke.ts":"54","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\DrawCurves.ts":"55","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm.ts":"56","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\FileBrowser.tsx":"57","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\PenBasedRenderWorker.tsx":"58","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintPdfMain.tsx":"59","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\Calibration\\CalibrationDialog.tsx":"60","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_event.ts":"61","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfDocument.ts":"62","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_const.ts":"63","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pen_util_func.ts":"64","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pdf\\Page.tsx":"65","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_enum.ts":"66","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_base.ts":"67","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\UtilFunc.ts":"68","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\SurfaceSplitter.ts":"69","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PagesForPrint.tsx":"70","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PageOrientation.jsx":"71","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\MappingItem.ts":"72","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\MappingStorage.ts":"73","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfPage.ts":"74","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\DataStructure\\Structures.ts":"75","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\index.ts":"76","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\SurfaceInfo.ts":"77","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeRasterizer.tsx":"78","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PageForPrint.tsx":"79","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeConstans.ts":"80","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\index.ts":"81","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeSurfaceDataJson.ts":"82","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeFetcher.ts":"83","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\index.ts":"84","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\DataTypes.ts":"85","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\CoordinateTanslater.ts":"86","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\SolveTransform.ts":"87","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\EchelonMatrix.ts":"88","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\GaussianElimination.ts":"89","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\Posts.tsx":"90","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\StorageRenderWorker.tsx":"91","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\StorageRenderer.tsx":"92","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\index.ts":"93","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\constants.ts":"94","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\index.tsx":"95","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\Post.tsx":"96","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\About.tsx":"97","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\GoogleBtn.js":"98","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\GridaController.tsx":"99","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintPdfButton.tsx":"100","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\cloud_util_func.ts":"101"},{"size":829,"mtime":1607317176919,"results":"102","hashOfConfig":"103"},{"size":5227,"mtime":1607317176967,"results":"104","hashOfConfig":"103"},{"size":930,"mtime":1607317176722,"results":"105","hashOfConfig":"103"},{"size":660,"mtime":1607317176968,"results":"106","hashOfConfig":"103"},{"size":1203,"mtime":1607317176984,"results":"107","hashOfConfig":"103"},{"size":402,"mtime":1607317176975,"results":"108","hashOfConfig":"103"},{"size":530,"mtime":1607317176974,"results":"109","hashOfConfig":"103"},{"size":1129,"mtime":1607319735934,"results":"110","hashOfConfig":"103"},{"size":4388,"mtime":1607317176975,"results":"111","hashOfConfig":"103"},{"size":10138,"mtime":1607412609443,"results":"112","hashOfConfig":"103"},{"size":9839,"mtime":1607324815358,"results":"113","hashOfConfig":"103"},{"size":690,"mtime":1607317176737,"results":"114","hashOfConfig":"103"},{"size":714,"mtime":1607347728021,"results":"115","hashOfConfig":"103"},{"size":703,"mtime":1607406204500,"results":"116","hashOfConfig":"103"},{"size":1475,"mtime":1607347728013,"results":"117","hashOfConfig":"103"},{"size":1606,"mtime":1607347728005,"results":"118","hashOfConfig":"103"},{"size":1488,"mtime":1607347727995,"results":"119","hashOfConfig":"103"},{"size":797,"mtime":1607347728008,"results":"120","hashOfConfig":"103"},{"size":1695,"mtime":1607347728002,"results":"121","hashOfConfig":"103"},{"size":2804,"mtime":1607347728018,"results":"122","hashOfConfig":"103"},{"size":3001,"mtime":1607347727985,"results":"123","hashOfConfig":"103"},{"size":4310,"mtime":1607347727992,"results":"124","hashOfConfig":"103"},{"size":8836,"mtime":1607322959894,"results":"125","hashOfConfig":"103"},{"size":2784,"mtime":1607347727989,"results":"126","hashOfConfig":"103"},{"size":11492,"mtime":1607347727998,"results":"127","hashOfConfig":"103"},{"size":808,"mtime":1607411234245,"results":"128","hashOfConfig":"103"},{"size":3336,"mtime":1607324316034,"results":"129","hashOfConfig":"103"},{"size":7539,"mtime":1607324316034,"results":"130","hashOfConfig":"103"},{"size":3268,"mtime":1607344776509,"results":"131","hashOfConfig":"103"},{"size":5627,"mtime":1607329529982,"results":"132","hashOfConfig":"103"},{"size":15253,"mtime":1607347728027,"results":"133","hashOfConfig":"103"},{"size":6464,"mtime":1607323506473,"results":"134","hashOfConfig":"103"},{"size":5612,"mtime":1607335184395,"results":"135","hashOfConfig":"103"},{"size":4070,"mtime":1607392366609,"results":"136","hashOfConfig":"103"},{"size":24,"mtime":1607317594439,"results":"137","hashOfConfig":"103"},{"size":870,"mtime":1607411398177,"results":"138","hashOfConfig":"103"},{"size":2868,"mtime":1607407357295,"results":"139","hashOfConfig":"103"},{"size":1201,"mtime":1607317176689,"results":"140","hashOfConfig":"103"},{"size":13265,"mtime":1607333846598,"results":"141","hashOfConfig":"103"},{"size":9744,"mtime":1607415111708,"results":"142","hashOfConfig":"103"},{"size":3185,"mtime":1607317176701,"results":"143","hashOfConfig":"103"},{"size":271,"mtime":1607317176924,"results":"144","hashOfConfig":"103"},{"size":19057,"mtime":1607392965884,"results":"145","hashOfConfig":"103"},{"size":1410,"mtime":1607329743138,"results":"146","hashOfConfig":"103"},{"size":2664,"mtime":1607347727977,"results":"147","hashOfConfig":"103"},{"size":754,"mtime":1607333748074,"results":"148","hashOfConfig":"103"},{"size":863,"mtime":1607323077606,"results":"149","hashOfConfig":"103"},{"size":286,"mtime":1607317176960,"results":"150","hashOfConfig":"103"},{"size":15311,"mtime":1607406965202,"results":"151","hashOfConfig":"103"},{"size":62,"mtime":1607317176937,"results":"152","hashOfConfig":"103"},{"size":528,"mtime":1607317176922,"results":"153","hashOfConfig":"103"},{"size":2868,"mtime":1607345035309,"results":"154","hashOfConfig":"103"},{"size":2396,"mtime":1607317176711,"results":"155","hashOfConfig":"103"},{"size":2645,"mtime":1607323506478,"results":"156","hashOfConfig":"103"},{"size":7529,"mtime":1607324815358,"results":"157","hashOfConfig":"103"},{"size":28941,"mtime":1607324178359,"results":"158","hashOfConfig":"103"},{"size":2599,"mtime":1607317176709,"results":"159","hashOfConfig":"103"},{"size":14814,"mtime":1607325076022,"results":"160","hashOfConfig":"103"},{"size":8689,"mtime":1607411070283,"results":"161","hashOfConfig":"103"},{"size":5823,"mtime":1607329052826,"results":"162","hashOfConfig":"103"},{"size":1813,"mtime":1607324178360,"results":"163","hashOfConfig":"103"},{"size":8004,"mtime":1607329747021,"results":"164","hashOfConfig":"103"},{"size":513,"mtime":1607317176933,"results":"165","hashOfConfig":"103"},{"size":1404,"mtime":1607317176930,"results":"166","hashOfConfig":"103"},{"size":8434,"mtime":1607396056444,"results":"167","hashOfConfig":"103"},{"size":461,"mtime":1607323792452,"results":"168","hashOfConfig":"103"},{"size":9241,"mtime":1607323753733,"results":"169","hashOfConfig":"103"},{"size":741,"mtime":1607329786188,"results":"170","hashOfConfig":"103"},{"size":7031,"mtime":1607333846598,"results":"171","hashOfConfig":"103"},{"size":3510,"mtime":1607327666928,"results":"172","hashOfConfig":"103"},{"size":322,"mtime":1607317176694,"results":"173","hashOfConfig":"103"},{"size":2343,"mtime":1607317176718,"results":"174","hashOfConfig":"103"},{"size":5937,"mtime":1607415111696,"results":"175","hashOfConfig":"103"},{"size":4375,"mtime":1607329737683,"results":"176","hashOfConfig":"103"},{"size":3704,"mtime":1607317176685,"results":"177","hashOfConfig":"103"},{"size":27,"mtime":1607317176700,"results":"178","hashOfConfig":"103"},{"size":4666,"mtime":1607329756411,"results":"179","hashOfConfig":"103"},{"size":19766,"mtime":1607333846599,"results":"180","hashOfConfig":"103"},{"size":15371,"mtime":1607327081604,"results":"181","hashOfConfig":"103"},{"size":905,"mtime":1607317176702,"results":"182","hashOfConfig":"103"},{"size":120,"mtime":1607317176683,"results":"183","hashOfConfig":"103"},{"size":2644,"mtime":1607317176705,"results":"184","hashOfConfig":"103"},{"size":3614,"mtime":1607329812291,"results":"185","hashOfConfig":"103"},{"size":220,"mtime":1607317176708,"results":"186","hashOfConfig":"103"},{"size":3033,"mtime":1607415111692,"results":"187","hashOfConfig":"103"},{"size":7527,"mtime":1607415111688,"results":"188","hashOfConfig":"103"},{"size":3929,"mtime":1607329819676,"results":"189","hashOfConfig":"103"},{"size":1068,"mtime":1607317176680,"results":"190","hashOfConfig":"103"},{"size":2144,"mtime":1607317176681,"results":"191","hashOfConfig":"103"},{"size":897,"mtime":1607331645289,"results":"192","hashOfConfig":"103"},{"size":33055,"mtime":1607333846599,"results":"193","hashOfConfig":"103"},{"size":10895,"mtime":1607332706285,"results":"194","hashOfConfig":"103"},{"size":1421,"mtime":1607333512688,"results":"195","hashOfConfig":"103"},{"size":854,"mtime":1607333395769,"results":"196","hashOfConfig":"103"},{"size":176,"mtime":1607333466116,"results":"197","hashOfConfig":"103"},{"size":198,"mtime":1607333540791,"results":"198","hashOfConfig":"103"},{"size":378,"mtime":1607333516955,"results":"199","hashOfConfig":"103"},{"size":3793,"mtime":1607415111703,"results":"200","hashOfConfig":"103"},{"size":4142,"mtime":1607347727982,"results":"201","hashOfConfig":"103"},{"size":7570,"mtime":1607412430347,"results":"202","hashOfConfig":"103"},{"size":5769,"mtime":1607415432387,"results":"203","hashOfConfig":"103"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},"5l6bpr",{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"343","usedDeprecatedRules":"217"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"348","usedDeprecatedRules":"217"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"357","usedDeprecatedRules":"217"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":6,"source":"364","usedDeprecatedRules":"217"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"217"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"378","usedDeprecatedRules":"217"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"409","usedDeprecatedRules":"206"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"412","usedDeprecatedRules":"217"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\index.js",[],[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\serviceWorker.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\client\\Root.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\shared\\App.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\styles\\theme.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\rootReducer.ts",[],[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\reducers\\pointerTracer.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\reducers\\authorization.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\store\\reducers\\ui.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\Home.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\penstorage\\InkStorage.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\UpperNav.tsx",[],[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\PrintButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\CalibrationMenual.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\FileLoad.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\TracePointButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\FullScreenButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\ZoomButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\RotateButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\PageNumbering.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\BackgroundButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\FitButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\ColorButtons.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\ConnectButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\buttons\\PenTypeButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\index.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\penstorage\\EventSystem.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\PenManager.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\utils\\UtilsFunc.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\styles\\ThemeManager.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\neosmartpen.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\noteserver\\PaperInfo.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\noteserver\\NoteserverClient.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\MixedPageView.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\types\\index.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\DefaultOption.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintDataTypes.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Locales\\i18n.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\PenBasedRenderer.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\navbar\\Upload.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\CanvasColorConverter.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\index.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\RenderWorkerBase.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Save\\SavePdf.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\FileBrowserButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\Calibration\\CalibrationButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\Enums.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\utils\\JsUtils.js",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\Modal\\PrintOptionDialog.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\penstorage\\index.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\NeoDot.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pdf\\NeoPdfViewer.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfManager.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\DataStructure\\NeoStroke.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\DrawCurves.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\FileBrowser.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\PenBasedRenderWorker.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintPdfMain.tsx",["417"],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\Calibration\\CalibrationDialog.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_event.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfDocument.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_const.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pen_util_func.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pdf\\Page.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_enum.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\pencomm\\pencomm_base.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\UtilFunc.ts",["418"],"export function compareObject(curr: Object, next: Object, header: string = \"\") {\r\n  for (const [key, value] of Object.entries(next)) {\r\n    if (curr[key] !== value) {\r\n      console.log(`[${header}] state[${key}] was changed, from \"${curr[key]} to \"${value}\"`);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nexport function uuidv4(): string {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n    // let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n    const r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\n\r\nexport function getDocumentId(fingerprint: string, pagesPerSheet: number): string {\r\n  return fingerprint + \"/\" + pagesPerSheet.toString();\r\n}\r\n","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\SurfaceSplitter.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PagesForPrint.tsx",["419"],"import React from \"react\";\r\n\r\nimport { PageForPrint } from \"./PageForPrint\";\r\nimport \"./print.css\";\r\n\r\nimport { ISize } from \"../DataStructure/Structures\";\r\nimport { IPrintOption } from \"./PrintDataTypes\";\r\nimport NeoPdfDocument from \"../NeoPdf/NeoPdfDocument\";\r\nimport { PDF_VIEWPORT_DESC } from \"../NeoPdf/NeoPdfPage\";\r\n\r\ninterface Props { // tslint:disable-line interface-over-type-literal\r\n  text: string,\r\n  pdf: NeoPdfDocument,\r\n  shouldRenderPage: boolean,\r\n  /** null이면 화면 전용 */\r\n  OnPagePrepared: Function,\r\n\r\n  printOption: IPrintOption,\r\n\r\n  pagesOverview: IPageOverview[],\r\n\r\n};\r\n\r\ntype State = {\r\n  renderState: string,\r\n};\r\n\r\nexport type IPageOverview = {\r\n  rotation: number,\r\n\r\n  /** pdf의 viewport가 rotation 0일 때의 크기로 판단(rotation은 고려하지 않음) */\r\n  landscape: boolean,\r\n\r\n  /** pdf의 viewport의 rotation은 고려하지 않음, 각 페이지에서 rotation된 것으로 rendering */\r\n  sizePu: ISize,\r\n}\r\n\r\nexport class PagesForPrint extends React.Component<Props, State> {\r\n\r\n  printOption: IPrintOption = null;\r\n\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.printOption = this.props.printOption;\r\n    this.state = {\r\n      renderState: \"rendering\",\r\n    };\r\n    // console.time('Function #1');\r\n  }\r\n\r\n  setPageOverview_old = async (pdf) => {\r\n    this.setState({\r\n      renderState: \"ready\",\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.pdf) {\r\n      this.setPageOverview_old(this.props.pdf);\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\r\n\r\n    if (this.state.renderState !== \"ready\" && nextState.renderState === \"ready\") {\r\n      return true;\r\n    }\r\n\r\n    if (this.props.pdf !== nextProps.pdf) {\r\n      console.log(`[yyy] setPageOverview_old called`);\r\n      this.setPageOverview_old(nextProps.pdf);\r\n      return true;\r\n    }\r\n\r\n\r\n    return false;\r\n  }\r\n\r\n  componentDidUpdate(nextProps, nextState) {\r\n    // console.log(\"[xxx] PagesForPrint componentDidUpdate\");\r\n  }\r\n\r\n  public render() {\r\n    const { renderState } = this.state;\r\n    const { pdf, OnPagePrepared, pagesOverview } = this.props;\r\n\r\n    const printOption = this.printOption;\r\n    const { pagesPerSheet, targetPages, } = printOption;\r\n\r\n    const numPages = targetPages.length;\r\n    const numSheets = Math.ceil(numPages / pagesPerSheet);\r\n    const pageNumsInSheet: number[][] = new Array(numSheets);\r\n\r\n\r\n    for (let i = 0; i < numSheets; i++) {\r\n      pageNumsInSheet[i] = new Array(0);\r\n\r\n      for (let j = 0; j < pagesPerSheet && (i * pagesPerSheet + j) < numPages; j++) {\r\n        const pageNo = targetPages[i * pagesPerSheet + j];\r\n        pageNumsInSheet[i].push(pageNo);\r\n      }\r\n    }\r\n\r\n\r\n    return (\r\n      // <div className=\"relativeCSS\">\r\n      <div>\r\n        {renderState === \"ready\" ? pageNumsInSheet.map(\r\n          (v, i) => {\r\n            // console.log(`Page displaying ${i}`);\r\n            return (\r\n              <div key={`page-div-${pdf.fingerprint}-${i}`}>\r\n                <PageForPrint\r\n                  pdf={pdf}\r\n                  key={`page-${pdf.fingerprint}-${i}`}\r\n                  sheetIndex={i}\r\n                  name={`page-${pdf.fingerprint}-${i}`}\r\n                  OnPagePrepared={OnPagePrepared}\r\n                  printOption={printOption}\r\n                  pageNums={pageNumsInSheet[i]}\r\n                  pagesOverview={pagesOverview}\r\n                />\r\n              </div>\r\n            )\r\n          }\r\n        ) : <></>}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PageOrientation.jsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\MappingItem.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\SurfaceMapper\\MappingStorage.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NeoPdf\\NeoPdfPage.ts",["420"],"import * as PdfJs from \"pdfjs-dist\";\r\nimport { CoordinateTanslater, IPdfPageDesc } from \"../Coordinates\";\r\nimport { IRectDpi,  } from \"../DataStructure/Structures\";\r\nimport { uuidv4 } from \"../NcodePrint\";\r\nimport { CanvasColorConverter } from \"../NcodeSurface\";\r\nimport { ColorConvertMethod } from \"../NcodeSurface/CanvasColorConverter\";\r\nimport { PDF_DEFAULT_DPI } from \"../NcodeSurface/NcodeConstans\";\r\nimport NeoPdfDocument from \"./NeoPdfDocument\";\r\nexport type PDF_VIEWPORT_DESC = PdfJs.ViewportParameters & PdfJs.PDFPageViewport;\r\n\r\n\r\n\r\nexport interface IPdfPageCanvasDesc {\r\n  pdfPageInfo: IPdfPageDesc,\r\n\r\n  /** splitted canvas 내의 index */\r\n  index: number,\r\n\r\n  /** 그려진 canvas */\r\n  canvas: HTMLCanvasElement,\r\n  rotation: number,\r\n\r\n\r\n  width_pu: number,\r\n  height_pu: number,\r\n\r\n  drawnRect: IRectDpi,\r\n}\r\n\r\n\r\nexport default class NeoPdfPage {\r\n  _pdfPage: PdfJs.PDFPageProxy;\r\n\r\n  _ready: PdfJs.PDFPromise<PdfJs.PDFPageProxy>;\r\n\r\n  _loaded: boolean = false;\r\n\r\n  private _defaultViewport: PDF_VIEWPORT_DESC;\r\n\r\n  _pageNo: number;\r\n\r\n  _doc: NeoPdfDocument;\r\n\r\n  _translater: CoordinateTanslater;\r\n\r\n  constructor(neoPdf: NeoPdfDocument, pageNo: number) {\r\n    this._pageNo = pageNo;\r\n    this._doc = neoPdf;\r\n\r\n\r\n    this._ready = neoPdf._pdfDoc.getPage(pageNo);\r\n    this._ready.then(_pdfPage => {\r\n      this._pdfPage = _pdfPage;\r\n      this._loaded = true;\r\n      this._defaultViewport = _pdfPage.getViewport({ scale: 1 });\r\n    });\r\n  }\r\n\r\n  getPage = async () => {\r\n    await this._ready;\r\n    return this._pdfPage;\r\n  }\r\n\r\n  render = async (params: PdfJs.PDFRenderParams) => {\r\n    await this._ready;\r\n    const renderTask: PdfJs.PDFRenderTask = this._pdfPage.render(params);\r\n    const ret = await renderTask.promise;\r\n    return ret;\r\n  }\r\n\r\n  public get viewport(): PDF_VIEWPORT_DESC {\r\n    return this._defaultViewport;\r\n  }\r\n\r\n  getViewport = (params: PdfJs.ViewportParameters): PDF_VIEWPORT_DESC => {\r\n    return this._pdfPage.getViewport(params);\r\n  }\r\n\r\n\r\n  setTranslater = (translater: CoordinateTanslater) => {\r\n    this._translater = translater;\r\n  }\r\n\r\n\r\n  public render_dpi = async (index: number, dpi: number)\r\n    : Promise<IPdfPageCanvasDesc> => {\r\n\r\n    await this._ready;\r\n\r\n    const pageNo = this._pageNo;\r\n    const scratchCanvas = document.createElement(\"canvas\");\r\n    const canvas = scratchCanvas;\r\n    const uuid = uuidv4();\r\n    canvas.id = `scratchCanvas-${pageNo}-${uuid}`;\r\n\r\n    const page = this._pdfPage;\r\n\r\n    const viewport: PDF_VIEWPORT_DESC = this.viewport;\r\n    const rotation = viewport.rotation;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    const PRINT_RESOLUTION = dpi;\r\n    const PRINT_UNITS = PRINT_RESOLUTION / PDF_DEFAULT_DPI;\r\n    // const CSS_UNITS = 96.0 / PDF_DEFAULT_DPI;\r\n\r\n    canvas.width = Math.floor(viewport.width * PRINT_UNITS);\r\n    canvas.height = Math.floor(viewport.height * PRINT_UNITS);\r\n\r\n    // const cssWidth = Math.floor(viewport.width * CSS_UNITS);\r\n    // const cssHeight = Math.floor(viewport.height * CSS_UNITS);\r\n\r\n    ctx.save();\r\n    ctx.fillStyle = \"rgb(255, 255, 255)\";\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    ctx.restore();\r\n\r\n\r\n    // return Promise.resolve({ index, canvas, rotation, pageNo });\r\n\r\n    const renderContext = {\r\n      canvasContext: ctx,\r\n      transform: [PRINT_UNITS, 0, 0, PRINT_UNITS, 0, 0],\r\n      viewport: page.getViewport({\r\n        scale: 1,\r\n        rotation: viewport.rotation\r\n      }),\r\n      intent: \"print\"\r\n    };\r\n\r\n\r\n    const renderTask = page.render(renderContext);\r\n    await renderTask.promise;\r\n\r\n    const doc = this._doc;\r\n    const result: IPdfPageCanvasDesc = {\r\n      pdfPageInfo: {\r\n        url: doc.url,\r\n        fingerprint: doc.fingerprint,\r\n        numPages: doc.numPages,\r\n        pageNo: this._pageNo,\r\n      },\r\n\r\n      index,\r\n      canvas,\r\n      rotation,\r\n\r\n      width_pu: viewport.width,\r\n      height_pu: viewport.height,\r\n      drawnRect: {\r\n        unit: \"600dpi\",\r\n        x: 0, y: 0, width: 0, height: 0,\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public convertColor = async (canvasDesc: IPdfPageCanvasDesc, colorConvertMode?: ColorConvertMethod) => {\r\n    if (colorConvertMode) {\r\n      const pdfCanvas = canvasDesc.canvas;\r\n      const converter = new CanvasColorConverter(pdfCanvas);\r\n      await converter.convert(colorConvertMode);\r\n    }\r\n\r\n    return canvasDesc;\r\n  }\r\n}","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\DataStructure\\Structures.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\index.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\SurfaceInfo.ts",["421","422","423","424","425","426","427"],"import { paperType } from \"./NcodeSurfaceDataJson\";\r\nimport { INcodeSurfaceDesc, IPaperSize } from \"./SurfaceDataTypes\";\r\n\r\nimport { IPageSOBP, INcodeSOBPxy, ISize, UNIT_TO_DPI } from \"../DataStructure/Structures\";\r\nimport { INCH_TO_MM_SCALE, NCODE_TO_INCH_SCALE, PDF_DEFAULT_DPI } from \"./NcodeConstans\";\r\n\r\n\r\n/**\r\n *\r\n * @param pageInfo\r\n */\r\nexport function isPlatePaper(pageInfo: IPageSOBP): boolean {\r\n  const { owner, book } = pageInfo;\r\n  if (owner === 1013 && book === 2) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n\r\n\r\n/**\r\n *\r\n * @param coordInfo\r\n */\r\nexport function isPUI(pageInfo: INcodeSOBPxy): boolean {\r\n  const { owner, book, page, } = pageInfo;\r\n  // console.log( `isPUI: ${owner}.${book}.${page}`);\r\n  if (owner === 27 && book === 161 && page === 1) {\r\n    return true;\r\n  }\r\n\r\n  if (owner === 1013 && book === 1) {\r\n    // page === 4, Smart plate\r\n    // page === 1, Plate paper\r\n\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n\r\n\r\n/**\r\n *\r\n * @param pageInfo\r\n * @return paper size in NU\r\n */\r\nfunction getNPaperSize_nu(item: IPageSOBP | INcodeSurfaceDesc): ISize {\r\n  let desc = item as INcodeSurfaceDesc;\r\n\r\n  if (!item.hasOwnProperty(\"margin\")) {\r\n    const pageInfo = item as IPageSOBP;\r\n    desc = getNPaperInfo(pageInfo);\r\n  }\r\n  const margin = desc.margin;\r\n  return {\r\n    width: margin.Xmax - margin.Xmin,\r\n    height: margin.Ymax - margin.Ymin\r\n  };\r\n}\r\n\r\n\r\nfunction getNPaperSize_dpi(item: IPageSOBP | INcodeSurfaceDesc, dpi: number): ISize {\r\n  // const { section, owner, book, page } = pageInfo;\r\n  const size = getNPaperSize_nu(item);\r\n\r\n  return {\r\n    width: size.width * NCODE_TO_INCH_SCALE * dpi,\r\n    height: size.height * NCODE_TO_INCH_SCALE * dpi,\r\n  }\r\n}\r\n\r\nexport function getNPaperSize_pu(item: IPageSOBP | INcodeSurfaceDesc): ISize {\r\n  return getNPaperSize_dpi(item, PDF_DEFAULT_DPI);\r\n}\r\n\r\n\r\nexport function getMediaSize_pu(mediaType: IPaperSize): ISize {\r\n  const { width, height } = mediaType;\r\n\r\n  return {\r\n    width: width * INCH_TO_MM_SCALE * PDF_DEFAULT_DPI,\r\n    height: height * INCH_TO_MM_SCALE * PDF_DEFAULT_DPI,\r\n  }\r\n}\r\n\r\n/**\r\n * paper size를 해당 inch 단위로 돌려 준다.\r\n * @param pageInfo\r\n */\r\nexport function getNPaperInfo(pageInfo: IPageSOBP): INcodeSurfaceDesc {\r\n  const { section, owner, book } = pageInfo;\r\n\r\n\r\n  let found = paperType.paperA4_dummy;\r\n  let found_key = \"paperA4_dummy\";\r\n\r\n  const keys = Object.keys(paperType);\r\n  for (let j = 0; j < keys.length; j++) {\r\n    const key = keys[j];\r\n    const value = paperType[key];\r\n\r\n    const idx = value.books.indexOf(book);\r\n    if (idx > -1) {\r\n      if (section === value.section && owner === value.owner) {\r\n        found = value;\r\n        found_key = key;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  const desc: INcodeSurfaceDesc = {\r\n    id: found_key,\r\n    pageInfo,\r\n    margin: {\r\n      Xmin: found.Xmin,\r\n      Xmax: found.Xmax,\r\n      Ymin: found.Ymin,\r\n      Ymax: found.Ymax,\r\n    },\r\n    glyphData: \"\",\r\n  };\r\n\r\n  return desc;\r\n}\r\n\r\n\r\n\r\nexport function getSurfaceSize_dpi(size: IPaperSize, dpi: number, isLandscape: boolean = false) {\r\n  const numerator = UNIT_TO_DPI[size.unit];\r\n  const ratio = 1.0;\r\n\r\n  let width = size.width * ratio * dpi / numerator;\r\n  let height = size.height * ratio * dpi / numerator;\r\n\r\n  width = Math.floor(width);\r\n  height = Math.floor(height);\r\n\r\n  if (isLandscape) {\r\n    return {\r\n      width: height,\r\n      height: width,\r\n    };\r\n  }\r\n\r\n  return {\r\n    width: width,\r\n    height: height,\r\n  };\r\n}\r\n\r\n\r\nexport function getSurfaceSize_px_600dpi(size: IPaperSize, isLandscape: boolean = false) {\r\n  return getSurfaceSize_dpi(size, UNIT_TO_DPI[\"600dpi\"], isLandscape);\r\n}\r\n\r\nexport function getSurfaceSize_inch(size: IPaperSize, isLandscape: boolean = false) {\r\n  return getSurfaceSize_dpi(size, 1, isLandscape);\r\n}\r\n\r\nexport function getSurfaceSize_mm(size: IPaperSize, isLandscape: boolean = false) {\r\n  return getSurfaceSize_dpi(size, UNIT_TO_DPI[\"mm\"], isLandscape);\r\n}\r\n\r\nexport function getSurfaceSize_css(size: IPaperSize, isLandscape: boolean = false) {\r\n  return getSurfaceSize_dpi(size, UNIT_TO_DPI[\"css\"], isLandscape);\r\n}\r\n\r\n\r\nexport function getSurfaceSize_pu(size: IPaperSize, isLandscape: boolean = false) {\r\n  return getSurfaceSize_dpi(size, UNIT_TO_DPI[\"pu\"], isLandscape);\r\n}\r\n\r\nexport function isPortrait(size: ISize) {\r\n  return size.width < size.height;\r\n}\r\n\r\nexport function getCssDpi() {\r\n  return UNIT_TO_DPI[\"css\"];\r\n}\r\n\r\n\r\n\r\nexport function isSamePage(pg1: IPageSOBP, pg2: IPageSOBP): boolean {\r\n  if (pg1.page !== pg2.page || pg1.book !== pg2.book || pg1.owner !== pg2.owner || pg1.section !== pg2.section) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeRasterizer.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PageForPrint.tsx",["428"],"import React, { Component } from 'react';\r\nimport * as PdfJs from 'pdfjs-dist';\r\nimport { IPageSOBP, ISize, ICssSize, IRectDpi, } from '../DataStructure/Structures';\r\nimport NcodeRasterizer, { IPagesPerSheetNumbers, IPrepareSurfaceParam, drawArrow, IAreasDesc, } from \"../NcodeSurface/NcodeRasterizer\";\r\nimport { CSS_DPI, IPrintOption } from './PrintDataTypes';\r\nimport { IPageOverview } from './PagesForPrint';\r\nimport { getSurfaceSize_css } from '../NcodeSurface';\r\nimport { getCellMatrixShape } from '../NcodeSurface/SurfaceSplitter';\r\nimport { IPdfPageCanvasDesc } from '../NeoPdf/NeoPdfPage';\r\nimport NeoPdfDocument from '../NeoPdf/NeoPdfDocument';\r\nimport { uuidv4 } from './UtilFunc';\r\n\r\nlet debug = 0;\r\n\r\ntype ICanvasShapeDesc = {\r\n  /** before applying rotation */\r\n  originalPixel: ISize,\r\n\r\n  /** after applying rotation */\r\n  pixel: ISize,\r\n  rotation: number,\r\n\r\n  /** based on originalPixel */\r\n  css: ICssSize,\r\n\r\n  /** based on originalPixel */\r\n  isLandscape: boolean,\r\n}\r\n\r\n\r\n\r\ninterface Props {\r\n  /** start from 0 */\r\n  sheetIndex: number,\r\n  pdf: NeoPdfDocument,\r\n\r\n  /** null이면 화면 전용 */\r\n  OnPagePrepared: Function,\r\n  printOption: IPrintOption,\r\n  pageNums: number[],\r\n  pagesOverview: IPageOverview[],\r\n\r\n  name: string,\r\n}\r\n\r\n\r\ninterface State {\r\n  status: string,\r\n  page: PdfJs.PDFPageProxy,\r\n  width: string,\r\n  height: string,\r\n\r\n  isLandscape: boolean,\r\n}\r\n\r\n\r\n/**\r\n * Class\r\n */\r\nexport class PageForPrint extends Component<Props, State> {\r\n  canvas: HTMLCanvasElement = null;\r\n  // pageImageDescs: IPdfPageCanvasDesc[] = [];\r\n  entireRotation = 0;\r\n\r\n  uuid: string;\r\n  state = {\r\n    /** @type {string} */\r\n    status: 'N/A',\r\n\r\n    /** @type {} */\r\n    page: null,\r\n    width: \"0px\",\r\n    height: \"0px\",\r\n    isLandscape: false,\r\n  };\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.uuid = uuidv4();\r\n    // this.pageImageDescs = new Array(props.printOption.pagesPerSheet);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param canvas\r\n   */\r\n  setCanvasRef = (canvas: HTMLCanvasElement) => {\r\n    this.canvas = canvas;\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\r\n    // let shoudUpdate = true;\r\n    return this.props.pdf !== nextProps.pdf || this.state.status !== nextState.status;\r\n  }\r\n\r\n  componentDidUpdate(nextProps: Props, nextState: State) {\r\n    // this._update(nextProps.pdf, nextProps.printOption);\r\n\r\n    // console.log(\"[test updated] CHECK START\");\r\n    // for (const [key, value] of Object.entries(nextProps)) {\r\n    //   if (this.props[key] !== value) {\r\n    //     console.log(`[test updated] property[${key}] was changed, from \"${this.props[key]} to \"${value}\"`);\r\n    //   }\r\n    // }\r\n\r\n    // for (const [key, value] of Object.entries(nextState)) {\r\n    //   if (this.state[key] !== value) {\r\n    //     console.log(`[test updated] state[${key}] was changed, from \"${this.state[key]} to \"${value}\"`);\r\n    //   }\r\n    // }\r\n    // console.log(\"[test updated] CHECK END\");\r\n\r\n    this._update(nextProps.pdf, nextProps.printOption);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { pdf, printOption } = this.props;\r\n    this._update(pdf, printOption);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param pdf\r\n   */\r\n  _update = (pdf: NeoPdfDocument, printOption: IPrintOption) => {\r\n    if (pdf) {\r\n      this.prepareSheet(pdf, printOption);\r\n    } else {\r\n      this.setState({ status: 'loading' });\r\n    }\r\n  };\r\n\r\n\r\n  prepareSheet = async (pdf: NeoPdfDocument, printOption: IPrintOption) => {\r\n    if (!this.canvas) return;\r\n\r\n    // console.log(\"[xxx] PageForPrint loadPage\");\r\n    const status = this.state.status;\r\n    const { sheetIndex } = this.props;\r\n    if (status === 'rendering' || status === 'rendered' || this.state.page !== null) return;\r\n\r\n    this.setState({ status: 'rendering' });\r\n\r\n    // 렌더링할 페이지 번호들\r\n    const pageNums = this.props.pageNums;\r\n\r\n    // Main canvas를 준비\r\n    const canvasDesc = await this.prepareMainCanvas(printOption);\r\n\r\n    // PDF 이미지를 canvas버퍼에 넣어 둔다.\r\n    let pageImagesDesc = await this.preparePdfPageImages(pdf, pageNums);    // this.pageImageDescs\r\n\r\n    // 분할된 Ncode plane을 준비\r\n    const ncodePlane = await this.prepareSplittedNcodePlane(pageNums, printOption);\r\n    const { canvas: codeCanvas, canvasAreas, } = ncodePlane;\r\n    this.reportProgress({ sheetIndex, pageNums, completion: 50 });\r\n\r\n    // main canvas를 준비\r\n    const mainCanvas = this.canvas;\r\n    const ctx = mainCanvas.getContext(\"2d\");\r\n    ctx.fillStyle = \"rgba(255, 255, 255, 255)\";     // 투명 캔버스\r\n    ctx.fillRect(0, 0, mainCanvas.width, mainCanvas.height);\r\n    ctx.save();\r\n\r\n    ctx.imageSmoothingEnabled = false;\r\n\r\n    // main canvas에 PDF 이미지를 조합\r\n    pageImagesDesc = this.putPdfPageImagesOnMainCanvas(ctx, canvasAreas, pageImagesDesc);\r\n    this.reportProgress({ sheetIndex, pageNums, completion: 70 });\r\n\r\n    // 필요하면 debugging용 화살표를, debig level 1 이상\r\n    this.drawDebugLines(mainCanvas, ctx, printOption);\r\n\r\n    // main canvas에 Ncode 이미지를 오버레이\r\n    this.overlayNcodePlaneOnMainCanvas(ctx, codeCanvas, printOption);\r\n    this.reportProgress({ sheetIndex, pageNums, completion: 90 });\r\n\r\n    // PDF와 ncode의 mapping table에 추가\r\n    const pagesPerSheet = printOption.pagesPerSheet as number;\r\n    pdf.setDocumentId(pagesPerSheet);\r\n    for (let i = 0; i < pageImagesDesc.length; i++) {\r\n      pageImagesDesc[i].pdfPageInfo.id = pdf.id;\r\n    }\r\n\r\n    pdf.registerMappingItem(pageImagesDesc, ncodePlane, printOption.assignNewCode);\r\n\r\n\r\n    // 캔버스의 색상 값 디버깅용, debug level 3 이상\r\n    this.debugCheckColorValues(mainCanvas, ctx, printOption);\r\n    ctx.restore();\r\n\r\n    const { width: css_width, height: css_height } = canvasDesc.css;\r\n    this.setState({ status: 'rendered', width: css_width, height: css_height });\r\n\r\n    this.reportProgress({ sheetIndex, pageNums, completion: 100 });\r\n  }\r\n\r\n  private drawDebugLines = (mainCanvas, ctx, printOption: IPrintOption) => {\r\n    if (printOption.debugMode < 1) return;\r\n\r\n    ctx.save();\r\n\r\n    ctx.lineWidth = 10;\r\n    ctx.strokeStyle = \"rgb(0,0,0)\";\r\n    ctx.strokeRect(1, 1, mainCanvas.width - 1, mainCanvas.height - 1);\r\n\r\n    ctx.lineWidth = 50;\r\n    ctx.lineCap = \"round\";\r\n    const { width, height } = mainCanvas;\r\n\r\n    ctx.font = \"200px Verdana\";\r\n    // ctx.beginPath();\r\n    // ctx.moveTo(100, 100);\r\n    // ctx.lineTo(width - 100, 100);\r\n    // ctx.lineTo(width - 100, 120);\r\n    // ctx.lineTo(100, 120);\r\n    // ctx.moveTo(100, 100);\r\n    // ctx.stroke();\r\n    ctx.strokeStyle = \"rgb(0,0,0)\";\r\n    ctx.fillStyle = \"rgb(0,0, 0)\";\r\n    drawArrow(ctx, 50, 100, width - 100, 100);\r\n    ctx.fillText(\"X\", width - 300, 300);\r\n\r\n    drawArrow(ctx, 100, 50, 100, height - 100);\r\n    ctx.fillText(\"Y\", 150, height - 100);\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  private reportProgress = (arg: { sheetIndex: number, pageNums: number[], completion: number }) => {\r\n    const OnPagePrepared = this.props.OnPagePrepared;\r\n    if (OnPagePrepared) OnPagePrepared(arg);\r\n\r\n  }\r\n\r\n\r\n  private debugCheckColorValues = (mainCanvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, printOption: IPrintOption) => {\r\n    if (!printOption.debugMode || printOption.debugMode < 3) return;\r\n\r\n    debug++;\r\n    console.log(`color check = ${debug}`);\r\n    const { width, height } = mainCanvas;\r\n    const id = ctx.getImageData(0, 0, width, height);\r\n    const pd = id.data;\r\n    let index = 0;\r\n\r\n    const m: { [key: string]: number } = {};\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        const r = pd[index];\r\n        const g = pd[index + 1];\r\n        const b = pd[index + 2];\r\n        const a = pd[index + 3];\r\n\r\n        // const str = r + \".\" + g + \".\" + b + \".\" + a;\r\n        const str = a + \".\";\r\n        if (!m.hasOwnProperty(str)) {\r\n          console.log(`found rgba=(${r}, ${g}, ${b}, ${a})`);\r\n          m[str] = 0;\r\n        }\r\n        m[str] = m[str] + 1;\r\n\r\n        index += 4;\r\n      }\r\n    }\r\n  }\r\n\r\n  private prepareSplittedNcodePlane = async (pageNums: number[], printOption: IPrintOption) => {\r\n\r\n    // 분할된 Ncode plane을 준비\r\n    const { pagesPerSheet, debugMode, printDpi, direction, mediaSize, hasToPutNcode } = printOption;\r\n    const pageInfos: IPageSOBP[] = [];\r\n\r\n    // const pageNums: number[] = [];\r\n    for (let i = 0; i < pageNums.length; i++) {\r\n      const pageNo = pageNums[i];\r\n\r\n      const p: IPageSOBP = {\r\n        ...printOption.pageInfo,\r\n        page: printOption.pageInfo.page + pageNo - 1,\r\n      }\r\n      pageInfos.push(p);\r\n    }\r\n\r\n    const options: IPrepareSurfaceParam = {\r\n      numItems: pagesPerSheet as IPagesPerSheetNumbers,\r\n      srcDirection: direction,\r\n      dpi: printDpi,\r\n      mediaSize,\r\n      debugMode,\r\n      pageInfos,\r\n      hasToPutNcode,\r\n    };\r\n\r\n    const rasterizer = new NcodeRasterizer(printOption);\r\n    const ncodePlane = await rasterizer.prepareNcodePlane(options);\r\n\r\n    return ncodePlane;\r\n  }\r\n\r\n  private putPdfPageImagesOnMainCanvas = (ctx: CanvasRenderingContext2D,\r\n    canvasAreas: IAreasDesc, pageImageDescs: IPdfPageCanvasDesc[]) => {\r\n    // for (let i = 0; i < this.pageImageDescs.length; i++) {\r\n    //   const desc = this.pageImageDescs[i];\r\n\r\n    for (let i = 0; i < pageImageDescs.length; i++) {\r\n      const desc = pageImageDescs[i];\r\n      if (!desc) continue;\r\n\r\n      const area = canvasAreas.areas[i];\r\n      const { x, y, width, height } = area;\r\n      const canvas = desc.canvas;\r\n      // console.log(`[Multipage] draw page ${i} ${canvas.width},${canvas.height} ==> (${x},${y})~(${width}, ${height})`)\r\n\r\n      const zoom_x = width / canvas.width;\r\n      const zoom_y = height / canvas.height;\r\n      const zoom = Math.min(zoom_x, zoom_y);\r\n\r\n      const dw = canvas.width * zoom;\r\n      const dh = canvas.height * zoom;\r\n      const dx = (width - dw) / 2;\r\n      const dy = (height - dh) / 2;\r\n\r\n      ctx.drawImage(canvas, 0, 0, canvas.width, canvas.height, x + dx, y + dy, dw, dh);\r\n\r\n      const rc: IRectDpi = {\r\n        unit: \"600dpi\",\r\n        x: x + dx,\r\n        y: y + dy,\r\n        width: dw,\r\n        height: dh,\r\n      }\r\n      desc.drawnRect = rc;\r\n    }\r\n\r\n    return pageImageDescs;\r\n\r\n  }\r\n\r\n  private overlayNcodePlaneOnMainCanvas = (ctx: CanvasRenderingContext2D, codeCanvas: HTMLCanvasElement, printOption: IPrintOption) => {\r\n    if (printOption.codeDensity === 3) {\r\n      ctx.drawImage(codeCanvas, 0, 0);\r\n      ctx.drawImage(codeCanvas, 1, 0);\r\n      ctx.drawImage(codeCanvas, 2, 0);\r\n\r\n      ctx.drawImage(codeCanvas, 0, 1);\r\n      ctx.drawImage(codeCanvas, 1, 1);\r\n      ctx.drawImage(codeCanvas, 2, 1);\r\n\r\n      ctx.drawImage(codeCanvas, 0, 2);\r\n      ctx.drawImage(codeCanvas, 1, 2);\r\n      ctx.drawImage(codeCanvas, 2, 2);\r\n    }\r\n    else {\r\n      ctx.drawImage(codeCanvas, 0, 0);\r\n      ctx.drawImage(codeCanvas, 1, 0);\r\n\r\n      ctx.drawImage(codeCanvas, 0, 1);\r\n      ctx.drawImage(codeCanvas, 1, 1);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  prepareMainCanvas = async (printOption: IPrintOption): Promise<ICanvasShapeDesc> => {\r\n    /** Prepare main canvas */\r\n\r\n    const mainCanvas = this.canvas;\r\n\r\n    if (!mainCanvas) {\r\n      console.log(\"main canvas is null\");\r\n      return;\r\n    }\r\n    const { printDpi: dpi, pagesPerSheet, direction } = printOption;\r\n\r\n    const { width: width_css, height: height_css } = getSurfaceSize_css(printOption.mediaSize);\r\n    // const { width: width_dpi, height: height_dpi } = getSurfaceSize_dpi(printOption.mediaSize, dpi);\r\n\r\n    const width_dpi = width_css * dpi / CSS_DPI;\r\n    const height_dpi = height_css * dpi / CSS_DPI;\r\n\r\n\r\n    /** 가로 세로의 비율을 원래대로 지키는 것이 아주 중요, 그렇지 않으면 프린터가 점을 깬다 */\r\n    // const dpi_css_scale_width = width_dpi / width_css;\r\n    // const dpi_css_scale_height = height_dpi / height_css;\r\n\r\n    // const toAvoidPageBreak = 1;\r\n    // let mediaCssWidth = Math.floor(width_css);\r\n    // let mediaCssHeight = Math.floor(height_css);\r\n    const mediaCssWidth = width_css;\r\n    const mediaCssHeight = height_css;\r\n\r\n    /** 이렇게 css의 크기를 변경해 주면, pixel의 크기도 변경해야 한다. 그때 가로 세로의 원래 비율을 유지하는 것이 굉장히 중요 */\r\n    // mediaCssWidth -= toAvoidPageBreak;\r\n    // mediaCssHeight -= toAvoidPageBreak;\r\n\r\n    let isLandscape = (direction === \"landscape\");\r\n\r\n    const { rotation } = getCellMatrixShape(pagesPerSheet, direction);\r\n    // console.log(`[yyy] prepareMainCanvas -${printOption.direction}, rotation=${rotation}`);\r\n\r\n    const isRotationNeeded = rotation === 90;\r\n    if (isRotationNeeded) isLandscape = !isLandscape;\r\n\r\n\r\n    /** 그래픽 크기와 상관 없이, rotation이 들어가 있는 경우 */\r\n    let canvasDesc: ICanvasShapeDesc = {\r\n      css: {\r\n        width: mediaCssWidth + \"px\",\r\n        height: mediaCssHeight + \"px\",\r\n      },\r\n\r\n      originalPixel: {\r\n        // width: Math.floor(mediaCssWidth * dpi_css_scale_width),\r\n        // height: Math.floor(mediaCssHeight * dpi_css_scale_height),\r\n        width: width_dpi,\r\n        height: height_dpi,\r\n      },\r\n\r\n      pixel: {\r\n        // width: Math.floor(mediaCssWidth * dpi_css_scale_width),\r\n        // height: Math.floor(mediaCssHeight * dpi_css_scale_height),\r\n        width: width_dpi,\r\n        height: height_dpi,\r\n      },\r\n      isLandscape: printOption.direction === \"landscape\",\r\n      rotation: 0,\r\n    };\r\n\r\n    if (isLandscape) {\r\n      canvasDesc = {\r\n        ...canvasDesc,\r\n        css: {\r\n          width: canvasDesc.css.height,\r\n          height: canvasDesc.css.width,\r\n        },\r\n        pixel: {\r\n          width: canvasDesc.pixel.height,\r\n          height: canvasDesc.pixel.width,\r\n        }\r\n      }\r\n    }\r\n\r\n    mainCanvas.width = canvasDesc.pixel.width;\r\n    mainCanvas.height = canvasDesc.pixel.height;\r\n\r\n    // console.log(`[size] mainCanvas = (${mainCanvas.width},${mainCanvas.height})`);\r\n    this.setState({ width: mediaCssWidth + \"px\", height: mediaCssHeight + \"px\" });\r\n\r\n    return canvasDesc;\r\n  }\r\n\r\n  /**\r\n   * this.pdfCanvasDescs에 canvasDesc들을 넣어 둔다.\r\n   */\r\n  private preparePdfPageImages = async (pdf: NeoPdfDocument, pageNums: number[])\r\n    : Promise<IPdfPageCanvasDesc[]> => {\r\n\r\n    const printOption = this.props.printOption;\r\n    const { pagesPerSheet, pdfRenderingDpi } = printOption;\r\n\r\n    const pdfDpi = pdfRenderingDpi / pagesPerSheet;\r\n    const descs = await pdf.renderPages_dpi(pageNums, pdfDpi, printOption.colorMode);\r\n    this.entireRotation = descs[0].rotation;\r\n\r\n    return descs;\r\n  }\r\n\r\n\r\n  /** imageRendering: \"pixelated\"가 굉장히 중요 */\r\n  render() {\r\n    const { sheetIndex } = this.props;\r\n    const { width, height, status } = this.state;\r\n    // console.log(`status [${status}],  Page orientation: ${isLandscape ? \"LandscapeOrientation\" : \"PortraitOrientation\"}`);\r\n    const style = {\r\n      // width, height,\r\n      // transform: `rotate(${-rotation}deg)`,\r\n      // WebkitTransform: `rotate(${-rotation}deg)`,\r\n      // msTransform: `rotate(${-rotation}deg)`,\r\n    };\r\n\r\n\r\n    return (\r\n      <div className={`pdf-sheet-${sheetIndex}${this.uuid} ${status}`} style={style} >\r\n        {/* <PortraitOrientation /> */}\r\n        <canvas ref={this.setCanvasRef} style={{ imageRendering: \"pixelated\", width, height }} />\r\n      </div >\r\n    );\r\n  }\r\n}\r\n","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeConstans.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\index.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeSurfaceDataJson.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\NcodeFetcher.ts",["429","430"],"import { IPageSOBP } from \"../DataStructure/Structures\";\r\nimport * as Zlib from \"zlib\";\r\nimport { INcodeSurfaceDesc } from \"./SurfaceDataTypes\";\r\nimport { getNPaperInfo, isSamePage } from \"./SurfaceInfo\";\r\n\r\n\r\n/**\r\n * Class\r\n */\r\nexport default class NcodeFetcher {\r\n  private codeText: string = \"\";\r\n  private fetchPromise: Promise<string> = Promise.resolve(\"\");\r\n  pageInfo: IPageSOBP;\r\n\r\n  constructor(pageInfo: IPageSOBP) {\r\n    this.pageInfo = pageInfo;\r\n    this.fetchPromise = this.fetchNcodeData(pageInfo);\r\n    this.fetchPromise.then(txt => this.codeText = txt);\r\n  }\r\n\r\n\r\n  /**\r\n   * 코드 정보를 받아온다\r\n   * 코드 정보를 받아올 때 나중에는 x margin, y margin도 서버에서 받아오게 해야 한다 2020/11/26\r\n   * @param pageInfo\r\n   */\r\n  public getNcodeData = async (pageInfo: IPageSOBP): Promise<INcodeSurfaceDesc> => {\r\n    // glyph text를 받아 온다.\r\n    if (isSamePage(this.pageInfo, pageInfo)) {\r\n      console.log(\"reuse downloaded glyph data file\");\r\n      const txt = await this.fetchPromise;\r\n      this.codeText = txt;\r\n    }\r\n    else {\r\n      console.log(\"download glyph data file\");\r\n      const promise = this.fetchNcodeData(pageInfo);\r\n      this.fetchPromise = promise;\r\n      const txt = await this.fetchPromise;\r\n\r\n      this.pageInfo = pageInfo;\r\n      this.codeText = txt;\r\n    }\r\n\r\n    const result: INcodeSurfaceDesc = getNPaperInfo(pageInfo);\r\n    result.glyphData = this.codeText;\r\n\r\n    return result;\r\n  }\r\n\r\n\r\n  private fetchNcodeData = async (pageInfo: IPageSOBP): Promise<string> => {\r\n    return new Promise(async (resolve, reject) => {\r\n      // console.log(`[fetch] ${pageInfo.section}.${pageInfo.owner}.${pageInfo.book}.${pageInfo.page}`);\r\n      const url = this.getRawCodeDataUrl(pageInfo);\r\n\r\n      const blob = await fetch(url).then((r) => {\r\n\r\n        if (r.ok) {\r\n          return r.blob();\r\n        }\r\n\r\n        resolve(\"\");\r\n      });\r\n\r\n      function gunzipCallback(decompressed) {\r\n        // console.log(decompressed);\r\n        const txt = new TextDecoder(\"utf-8\").decode(decompressed);\r\n        resolve(txt);\r\n      }\r\n\r\n      if (blob != null) {\r\n        try {\r\n          const buffer = await blob.arrayBuffer();\r\n          const u8buf = new Uint8Array(buffer);\r\n          // eslint-disable-next-line\r\n          const gunzip = new Zlib.gunzip(u8buf, (err, result) => {\r\n            // console.error(err);\r\n            if (err) {\r\n              console.log(err);\r\n              resolve(\"\");\r\n            }\r\n            gunzipCallback(result);\r\n          });\r\n        } catch (e) {\r\n          resolve(\"\");\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  private getAbsoluteURL = (base: string, relative: string): string => {\r\n    const stack = base.split(\"/\");\r\n    const parts = relative.split(\"/\");\r\n\r\n    stack.pop(); // remove current file name (or empty string)\r\n\r\n    // (omit if \"base\" is the current folder without trailing slash)\r\n    for (let i = 0; i < parts.length; i++) {\r\n      if (parts[i] === \".\") continue;\r\n      if (parts[i] === \"..\") stack.pop();\r\n      else stack.push(parts[i]);\r\n    }\r\n    return stack.join(\"/\");\r\n  }\r\n\r\n\r\n  private getRawCodeDataUrl = (pageInfo: IPageSOBP): string => {\r\n\r\n    const { section, owner, book, page } = pageInfo;\r\n\r\n    const ncode_idx = \"s\" + section + \"-o\" + owner + \"-b\" + book + \"-p\" + page;\r\n    const dir_name = \"s\" + section + \"-o\" + owner + \"-b\" + book;\r\n\r\n    const filename = \"./ncode_data/\" + dir_name + \"/\" + ncode_idx + \".code.gz\";\r\n    const doc_url = document.location.href;\r\n    const url = this.getAbsoluteURL(doc_url, filename);\r\n\r\n    return url;\r\n  }\r\n}","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodeSurface\\index.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\DataTypes.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\CoordinateTanslater.ts",["431"],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\SolveTransform.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\EchelonMatrix.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\Coordinates\\GaussianElimination.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\Posts.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\StorageRenderWorker.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\renderer\\pageviewer\\StorageRenderer.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\index.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\neosmartpen\\constants.ts",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\index.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\Post.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\pages\\About.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\GoogleBtn.js",["432","433"],"import React, {Component, useState, useEffect} from 'react';\r\nimport { gapi } from 'gapi-script';\r\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\r\n\r\nconst CLIENT_ID = '169738066451-5u100n2i6rko17jhmtpvq0bnjuedj7g4.apps.googleusercontent.com';\r\n\r\nclass GoogleBtn extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLogined:false,\r\n      accessToken:''\r\n    };\r\n\r\n    this.login = this.login.bind(this);\r\n    this.handleLoginFailure = this.handleLoginFailure.bind(this);\r\n    this.logout = this.logout.bind(this);\r\n    this.handleLogoutFailure = this.handleLogoutFailure.bind(this);\r\n\r\n  }\r\n\r\n  login (resp) {\r\n    if(resp.accessToken) {\r\n      this.setState(state => ({\r\n        isLogined: true,\r\n        accessToken: resp.accessToken\r\n      }));\r\n    }\r\n  }\r\n\r\n  logout (resp) {\r\n    this.setState(state => ({\r\n      isLogined: false,\r\n      accessToken: ''\r\n    }));\r\n\r\n    var auth2 = gapi.auth2.getAuthInstance();\r\n    auth2.signOut().then(function () {\r\n      console.log('user log out ');\r\n    });\r\n    auth2.disconnect();\r\n\r\n  }\r\n\r\n  handleLoginFailure (resp) {\r\n  }\r\n  handleLogoutFailure (resp) {\r\n    console.log('why logout fail?');\r\n  }\r\n  render () {\r\n    return (\r\n      <div>\r\n        {this.state.isLogined ?\r\n          <GoogleLogout\r\n          clientId = {CLIENT_ID}\r\n          buttonText = 'Logout'\r\n          onLogoutSuccess={this.logout}\r\n          onFailure={this.handleLogoutFailure}\r\n          ></GoogleLogout>: \r\n          <GoogleLogin \r\n            clientId = {CLIENT_ID}\r\n            buttonText=\"Login\"\r\n            onSuccess={this.login}\r\n            onFailure={this.handleLoginFailure}\r\n            cookiePolicy={'single_host_origin'}\r\n            responseType='code,token'\r\n          />\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default GoogleBtn;","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\components\\GridaController.tsx",["434","435","436"],"import React, { Component } from 'react';\r\n\r\n// const loadXMLDoc = () => {\r\n//   var xmlhttp = new XMLHttpRequest();\r\n//   xmlhttp.onreadystatechange = function() {\r\n//     if (this.readyState == 4 && this.status == 200) {\r\n//       myFunction(this);\r\n//     }\r\n//   };\r\n//   // xmlhttp.open(\"GET\", \"cd_catalog.xml\", true);\r\n//   xmlhttp.open(\"GET\", \"note_1116.xml\", true);\r\n//   xmlhttp.send();\r\n// }\r\n\r\n// const myFunction = (xml) => {\r\n//   var x = [], y = [], width = [], height = [], command = [], xmlDoc, txt, symbol;\r\n//   xmlDoc = xml.responseXML;\r\n//   txt = \"\";\r\n//   symbol = xmlDoc.getElementsByTagName(\"symbol\");\r\n//   for(var i = 0; i < 100; i++) {\r\n//     // x[i] = symbol[i].getAttribute(\"x\");\r\n//     // y[i] = symbol[i].getAttribute(\"y\");\r\n//     // width[i] = symbol[i].getAttribute(\"width\");\r\n//     // height[i] = symbol[i].getAttribute(\"height\");\r\n\r\n//     // if (x[i] === x[0] || y[i] === y[0] || width[i] === width[0] || height[i] === height[0]) {\r\n//       command[i] = xmlDoc.getElementsByTagName(\"command\")[i].getAttribute(\"param\");\r\n//       txt = txt + command[i] + '<br>';\r\n//       document.getElementById(\"demo\").innerHTML = txt;\r\n//     // }\r\n//   }\r\n//   // x = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"x\");\r\n//   // y = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"y\");\r\n//   // width = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"width\");\r\n//   // height = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"height\");\r\n//   // if (x[] === \"78.3807\" || y === \"135.495\" || width === \"27.494\" || height === \"26.2788\") {\r\n//     // command = xmlDoc.getElementsByTagName(\"command\")[0].getAttribute(\"param\");\r\n//   // }\r\n//   // y = x.getAttribute(\"param\");\r\n//   // for (i = 0; i< x.length; i++) {\r\n//   //   // txt += y[i].childNodes[0].nodeValue + \"<br>\";\r\n//   //   txt += x[i] + \"<br>\";\r\n//   // } \r\n//   // txt = command;\r\n//   // document.getElementById(\"demo\").innerHTML = txt;\r\n// }\r\n\r\nclass GridaController extends Component {\r\n  static loadXMLDoc = () => {\r\n    var xmlhttp = new XMLHttpRequest();\r\n    xmlhttp.onreadystatechange = function() {\r\n      if (this.readyState == 4 && this.status == 200) {\r\n        GridaController.myFunction(this);\r\n      }\r\n    };\r\n    // xmlhttp.open(\"GET\", \"cd_catalog.xml\", true);\r\n    xmlhttp.open(\"GET\", \"note_1116.xml\", true);\r\n    xmlhttp.send();\r\n  }\r\n  \r\n  static myFunction = (xml: any) => {\r\n    var x = [], y = [], width = [], height = [], command = [], xmlDoc, txt, symbol;\r\n    xmlDoc = xml.responseXML;\r\n    txt = \"\";\r\n    symbol = xmlDoc.getElementsByTagName(\"symbol\");\r\n    for(var i = 0; i < 100; i++) {\r\n      // x[i] = symbol[i].getAttribute(\"x\");\r\n      // y[i] = symbol[i].getAttribute(\"y\");\r\n      // width[i] = symbol[i].getAttribute(\"width\");\r\n      // height[i] = symbol[i].getAttribute(\"height\");\r\n  \r\n      // if (x[i] === x[0] || y[i] === y[0] || width[i] === width[0] || height[i] === height[0]) {\r\n        command[i] = xmlDoc.getElementsByTagName(\"command\")[i].getAttribute(\"param\");\r\n        txt = txt + command[i] + '<br>';\r\n        document.getElementById(\"demo\").innerHTML = txt;\r\n      // }\r\n    }\r\n    // x = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"x\");\r\n    // y = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"y\");\r\n    // width = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"width\");\r\n    // height = xmlDoc.getElementsByTagName(\"symbol\")[0].getAttribute(\"height\");\r\n    // if (x[] === \"78.3807\" || y === \"135.495\" || width === \"27.494\" || height === \"26.2788\") {\r\n      // command = xmlDoc.getElementsByTagName(\"command\")[0].getAttribute(\"param\");\r\n    // }\r\n    // y = x.getAttribute(\"param\");\r\n    // for (i = 0; i< x.length; i++) {\r\n    //   // txt += y[i].childNodes[0].nodeValue + \"<br>\";\r\n    //   txt += x[i] + \"<br>\";\r\n    // } \r\n    // txt = command;\r\n    // document.getElementById(\"demo\").innerHTML = txt;\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button type=\"button\" onClick={GridaController.loadXMLDoc}>grida board controller</button>\r\n\r\n        <p id=\"demo\"></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GridaController;","F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\NcodePrintLib\\NcodePrint\\PrintPdfButton.tsx",[],"F:\\__Work\\dotProject\\_trunk\\WWW\\GridaBoard2\\src\\cloud_util_func.ts",[],{"ruleId":"437","severity":1,"message":"438","line":43,"column":3,"nodeType":"439","messageId":"440","endLine":43,"endColumn":22,"fix":"441"},{"ruleId":"437","severity":1,"message":"438","line":1,"column":59,"nodeType":"442","messageId":"440","endLine":1,"endColumn":78,"fix":"443"},{"ruleId":"444","severity":1,"message":"445","line":22,"column":2,"nodeType":"446","messageId":"447","endLine":22,"endColumn":3,"fix":"448"},{"ruleId":"437","severity":1,"message":"449","line":36,"column":3,"nodeType":"439","messageId":"440","endLine":36,"endColumn":28,"fix":"450"},{"ruleId":"451","severity":1,"message":"452","line":54,"column":13,"nodeType":"453","messageId":"454","endLine":54,"endColumn":27},{"ruleId":"437","severity":1,"message":"449","line":133,"column":67,"nodeType":"442","messageId":"440","endLine":133,"endColumn":95,"fix":"455"},{"ruleId":"437","severity":1,"message":"449","line":157,"column":60,"nodeType":"442","messageId":"440","endLine":157,"endColumn":88,"fix":"456"},{"ruleId":"437","severity":1,"message":"449","line":161,"column":55,"nodeType":"442","messageId":"440","endLine":161,"endColumn":83,"fix":"457"},{"ruleId":"437","severity":1,"message":"449","line":165,"column":53,"nodeType":"442","messageId":"440","endLine":165,"endColumn":81,"fix":"458"},{"ruleId":"437","severity":1,"message":"449","line":169,"column":54,"nodeType":"442","messageId":"440","endLine":169,"endColumn":82,"fix":"459"},{"ruleId":"437","severity":1,"message":"449","line":174,"column":53,"nodeType":"442","messageId":"440","endLine":174,"endColumn":81,"fix":"460"},{"ruleId":"451","severity":1,"message":"452","line":257,"column":16,"nodeType":"453","messageId":"454","endLine":257,"endColumn":30},{"ruleId":"437","severity":1,"message":"438","line":11,"column":3,"nodeType":"439","messageId":"440","endLine":11,"endColumn":33,"fix":"461"},{"ruleId":"462","severity":1,"message":"463","line":52,"column":24,"nodeType":"464","messageId":"465","endLine":52,"endColumn":29},{"ruleId":"451","severity":1,"message":"452","line":94,"column":15,"nodeType":"453","messageId":"454","endLine":94,"endColumn":29},{"ruleId":"466","severity":1,"message":"467","line":39,"column":5,"nodeType":"468","messageId":"469","endLine":39,"endColumn":46,"fix":"470"},{"ruleId":"471","severity":1,"message":"472","line":47,"column":29,"nodeType":"473","messageId":"447","endLine":48,"endColumn":4},{"ruleId":"466","severity":1,"message":"467","line":50,"column":5,"nodeType":"468","messageId":"469","endLine":50,"endColumn":40,"fix":"474"},{"ruleId":"466","severity":1,"message":"467","line":62,"column":5,"nodeType":"468","messageId":"469","endLine":62,"endColumn":84,"fix":"475"},{"ruleId":"466","severity":1,"message":"467","line":66,"column":9,"nodeType":"468","messageId":"469","endLine":66,"endColumn":18,"fix":"476"},"@typescript-eslint/no-inferrable-types","Type string trivially inferred from a string literal, remove type annotation.","ClassProperty","noInferrableType",{"range":"477","text":"478"},"AssignmentPattern",{"range":"479","text":"478"},"@typescript-eslint/no-extra-semi","Unnecessary semicolon.","EmptyStatement","unexpected",{"range":"480","text":"481"},"Type boolean trivially inferred from a boolean literal, remove type annotation.",{"range":"482","text":"478"},"no-prototype-builtins","Do not access Object.prototype method 'hasOwnProperty' from target object.","CallExpression","prototypeBuildIn",{"range":"483","text":"478"},{"range":"484","text":"478"},{"range":"485","text":"478"},{"range":"486","text":"478"},{"range":"487","text":"478"},{"range":"488","text":"478"},{"range":"489","text":"478"},"no-async-promise-executor","Promise executor functions should not be async.","Identifier","async","no-var","Unexpected var, use let or const instead.","VariableDeclaration","unexpectedVar",{"range":"490","text":"491"},"@typescript-eslint/no-empty-function","Unexpected empty method 'handleLoginFailure'.","FunctionExpression",{"range":"492","text":"491"},{"range":"493","text":"491"},{"range":"494","text":"491"},[1133,1141],"",[64,72],[588,598],"}\r\n\r\ntype",[951,960],[3047,3056],[3542,3551],[3706,3715],[3848,3857],[4007,4016],[4168,4177],[285,293],[936,939],"let",[2042,2045],[2418,2421],[2606,2609]]