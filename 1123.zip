diff --git a/.vscode/launch.json b/.vscode/launch.json
index 6d28665..6b140ac 100644
--- a/.vscode/launch.json
+++ b/.vscode/launch.json
@@ -6,10 +6,9 @@
   "configurations": [
     {
       "name": "Attach to Chrome",
-      "port": 9222,
-      "request": "attach",
+      "request": "launch",
       "type": "pwa-chrome",
-      "urlFilter": "http://localhost:3000*",
+      "url": "http://localhost:3000",
       "webRoot": "${workspaceFolder}"
     },
   ]
diff --git a/public/index.html b/public/index.html
index 333a078..8180fe8 100644
--- a/public/index.html
+++ b/public/index.html
@@ -29,9 +29,10 @@
     <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
       integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh"
       crossorigin="anonymous" />
-    <!-- <script src="//stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"
-        integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6"
-        crossorigin="anonymous"></script> -->
+    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
+    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
+    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>
+    
     <script src="./external/bootbox-releated/bootstrap-4.4.1.js"></script>
     <title>React App</title>
   </head>
diff --git a/src/components/buttons/ConnectButton.tsx b/src/components/buttons/ConnectButton.tsx
index 50700e4..8c442ff 100644
--- a/src/components/buttons/ConnectButton.tsx
+++ b/src/components/buttons/ConnectButton.tsx
@@ -1,21 +1,49 @@
 import React, { Component, useState } from "react";
 import '../../styles/buttons.css';
+import PenManager from '../../neosmartpen/pencomm/PenManager'
+import {
+  //PenEvent,
+  NeoSmartpen,
+  InkStorage,
+  paperInfo,
+  NoteserverClient,
+  PenEventName,
+} from '../../neosmartpen';
 
-export default class ConnectButton extends React.Component {
-  render() {
-    return (
-      <div className="btn-group-vertical neo_shadow" style = {{ marginBottom: 10 }}>
-        <button id="btn_connect" type="button" className="btn btn-neo btn-neo-vertical" title="Connect">
-          <div className="c2 ">
-            <img src={require("../../icons/icon_smartpen_connected_p.png")} className="toggle-off hover-image"></img>
-            <img src={require("../../icons/icon_smartpen_disconnected_n.png")} className="toggle-off normal-image"></img>
-            <img src={require("../../icons/icon_smartpen_connected_n.png")} className="toggle-on normal-image"></img>
-            <img src={require("../../icons/icon_smartpen_disconnected_p.png")} className="toggle-on hover-image"></img>
+const ConnectButton = (props) => {
 
-            <span id="pen_id" className="pen-badge badge badge-pill badge-light">0/0</span>
-          </div>
-        </button>
-      </div>
-      );
-  }
-}
\ No newline at end of file
+  /**
+   * @param {{pen:NeoSmartpen, mac:string, event:PenEvent}} e
+   */
+  const onPenLinkChanged = e => {
+    props.changeParentState(e);
+  };
+
+  const handleConnectPen = () => {
+    const penManager = PenManager.getInstance();
+    let new_pen = penManager.createPen();
+
+    if (new_pen.connect()) {
+      new_pen.addEventListener(PenEventName.ON_CONNECTED, onPenLinkChanged);
+      new_pen.addEventListener(PenEventName.ON_DISCONNECTED, onPenLinkChanged);
+    }
+  };
+  
+  return (
+    <div className="btn-group-vertical neo_shadow" style = {{ marginBottom: 10 }}>
+      <button id="btn_connect" type="button" className="btn btn-neo btn-neo-vertical" title="Connect"
+        onClick={() => handleConnectPen()}>
+        <div className="c2 ">
+          <img src={require("../../icons/icon_smartpen_connected_p.png")} className="toggle-off hover-image"></img>
+          <img src={require("../../icons/icon_smartpen_disconnected_n.png")} className="toggle-off normal-image"></img>
+          <img src={require("../../icons/icon_smartpen_connected_n.png")} className="toggle-on normal-image"></img>
+          <img src={require("../../icons/icon_smartpen_disconnected_p.png")} className="toggle-on hover-image"></img>
+
+          <span id="pen_id" className="pen-badge badge badge-pill badge-light">0/0</span>
+        </div>
+      </button>
+    </div>
+  );
+}
+
+export default ConnectButton;
\ No newline at end of file
diff --git a/src/components/buttons/PenTypeButton.tsx b/src/components/buttons/PenTypeButton.tsx
index dcf44c7..389b358 100644
--- a/src/components/buttons/PenTypeButton.tsx
+++ b/src/components/buttons/PenTypeButton.tsx
@@ -1,15 +1,22 @@
 import React, { Component, useState } from "react";
 import '../../styles/buttons.css';
+import PenManager from "../../neosmartpen/pencomm/PenManager";
 
 export default class PenTypeButton extends React.Component {
+    shouldComponentUpdate(nextProps: any, nextState: any) {
+        return false;
+    }
+    
+  manager: PenManager = PenManager.getInstance();
   render() {
     return (
       <React.Fragment>
-            <button id="btn_brush" disabled type="button" title="Pen type"
-                className="bind-popover btn btn-neo btn-neo-vertical" data-toggle="dropdown" aria-haspopup="true"
+          <div className="btn-group dropup" role="group">
+            <button id="btn_brush" type="button" title="Pen type"
+                className="bind-popover btn btn-neo btn-neo-vertical  pull-right" data-toggle="dropdown" aria-haspopup="true"
                 aria-expanded="false">
 
-                <div className="c2 disabled state_0">
+                <div className="c2 state_0">
                     <img src={require("../../icons/icon_pen_n.png")} className="state_0 normal-image"></img>
                     <img src={require("../../icons/icon_pen_p.png")} className="state_0 hover-image"></img>
 
@@ -23,7 +30,7 @@ export default class PenTypeButton extends React.Component {
                 </div>
             </button>
 
-            <div className="dropdown-menu dropdown-menu-right p-0 border border-0" aria-labelledby="btn_brush">
+            <div className="dropdown-menu pull-left dropdown-menu-left p-0 border border-0" aria-labelledby="btn_brush">
                 {/* 펜/형광펜 */}
                 <div className="btn-group">
                     <button id="btn_pen" type="button" className="btn btn-neo btn-neo-dropdown">
@@ -47,40 +54,46 @@ export default class PenTypeButton extends React.Component {
                 </div>
 
                 {/* 선 굵기 */}
-                <div className="dropdown-divider"></div>
+                {/* <div className="dropdown-divider"></div>
                 <div className="btn-group">
-                    <button id="btn_thick_1" type="button" className="btn btn-neo btn-neo-dropdown">
+                    <button id="btn_thick_1" type="button" className="btn btn-neo btn-neo-dropdown" 
+                     onClick={() => this.manager.setThickness(1)}>
                         <div className="c2">
                             <img src = { require("../../icons/icon_thickness_01_n.png") } className="normal-image"></img>
                             <img src = { require("../../icons/icon_thickness_01_p.png") } className="hover-image"></img>
                         </div>
                     </button>
-                    <button id="btn_thick_2" type="button" className="btn btn-neo btn-neo-dropdown">
+                    <button id="btn_thick_2" type="button" className="btn btn-neo btn-neo-dropdown"
+                     onClick={() => this.manager.setThickness(2)}>
                         <div className="c2">
                             <img src = { require("../../icons/icon_thickness_02_n.png") } className="normal-image"></img>
                             <img src = { require("../../icons/icon_thickness_02_p.png") } className="hover-image"></img>
                         </div>
                     </button>
-                    <button id="btn_thick_3" type="button" className="btn btn-neo btn-neo-dropdown">
+                    <button id="btn_thick_3" type="button" className="btn btn-neo btn-neo-dropdown"
+                     onClick={() => this.manager.setThickness(3)}>
                         <div className="c2">
                             <img src = { require("../../icons/icon_thickness_03_n.png") } className="normal-image"></img>
                             <img src = { require("../../icons/icon_thickness_03_p.png") } className="hover-image"></img>
                         </div>
                     </button>
-                    <button id="btn_thick_4" type="button" className="btn btn-neo btn-neo-dropdown">
+                    <button id="btn_thick_4" type="button" className="btn btn-neo btn-neo-dropdown"
+                     onClick={() => this.manager.setThickness(4)}>
                         <div className="c2">
                             <img src = { require("../../icons/icon_thickness_04_n.png") } className="normal-image"></img>
                             <img src = { require("../../icons/icon_thickness_04_p.png") } className="hover-image"></img>
                         </div>
                     </button>
-                    <button id="btn_thick_5" type="button" className="btn btn-neo btn-neo-dropdown">
+                    <button id="btn_thick_5" type="button" className="btn btn-neo btn-neo-dropdown"
+                      onClick={() => this.manager.setThickness(5)}>
                         <div className="c2">
                             <img src = { require("../../icons/icon_thickness_05_n.png") } className="normal-image"></img>
                             <img src = { require("../../icons/icon_thickness_05_p.png") } className="hover-image"></img>
                         </div>
                     </button>
-                </div>
+                </div> */}
             </div>
+          </div>
         </React.Fragment>
     );
   }
diff --git a/src/components/navbar/ColorButtons.tsx b/src/components/navbar/ColorButtons.tsx
index 857d3ab..6ea82a6 100644
--- a/src/components/navbar/ColorButtons.tsx
+++ b/src/components/navbar/ColorButtons.tsx
@@ -7,22 +7,6 @@ class penColor extends React.Component {
   render() {
     return (
         <div className="color_bar neo_shadow float-left bottom_text color_bar">
-          <div className="btn-group-vertical">
-              <button id="pen_info_btn" type="button" disabled className="btn btn-neo" title="Status">
-                  <div className="c2 disabled state_0">
-                      <img src={require('../../icons/icon_pen_n.png')} className="state_0 normal-image" />
-                      <img src={require('../../icons/icon_pen_p.png')} className="state_0 hover-image"></img>
-
-                      <img src={require('../../icons/icon_highlight_n.png')} className="state_1 normal-image"></img>
-                      <img src={require('../../icons/icon_highlight_p.png')} className="state_1 hover-image"></img>
-
-                      <img src={require('../../icons/icon_eraser_n.png')} className="state_2 normal-image"></img>
-                      <img src={require('../../icons/icon_eraser_p.png')} className="state_2 hover-image"></img>
-
-                      <span id="thickness_num_bottom" className="thickness-badge badge badge-pill badge-secondary">2</span>
-                  </div>
-              </button>
-          </div>
           <div className="btn-group">
               <button id="clr_1" type="button" className="btn btn-neo color_btn othercolors" title="color 1" 
                onClick={() => this.manager.setColor(1)}>
diff --git a/src/neosmartpen/pencomm/PenManager.ts b/src/neosmartpen/pencomm/PenManager.ts
index 3752b1b..2ad6bd3 100644
--- a/src/neosmartpen/pencomm/PenManager.ts
+++ b/src/neosmartpen/pencomm/PenManager.ts
@@ -1,17 +1,24 @@
+import PenBasedRenderer from "../renderer/pageviewer/PenBasedRenderer";
+import ThemeManager from "../../styles/ThemeManager"
 import { NeoSmartpen } from "./neosmartpen";
 import { IPenEvent } from "../DataStructure/Structures";
+import { IBrushType } from "../DataStructure/Enums"
+import jQuery from "jquery";
 
+export const DEFAULT_PEN_COLOR_NUM: number = 2;
+export const DEFAULT_PEN_THICKNESS: number = 2;
+export const DEFAULT_PEN_RENDERER_TYPE: IBrushType = IBrushType.PEN;
+
+let $ = jQuery; 
 let _penmanager_instance = null;
 var _active_pen:NeoSmartpen = null;
 
 export default class PenManager {
   /** @type {Array.<{id:string, mac:string, pen:NeoSmartpen, connected:boolean}>} */
-  penArray = [];
-
+  penArray = new Array(0);
   /** @type {Array.<StorageRenderer>} */
   render = [];
   
-  color: string;
   colors: string[] = [
     "rgb(101, 44, 179, 255)", // 0 보라
     "rgb(255,255,255, 255)", // 하양
@@ -28,9 +35,19 @@ export default class PenManager {
     "rgb(218, 34, 99, 255)", // 9 자주
     "rgb(101, 44, 179, 255)" // 10 보라
   ];
+  color: string = this.colors[DEFAULT_PEN_COLOR_NUM];
+  thickness: number = DEFAULT_PEN_THICKNESS;
+  penRendererType: IBrushType = DEFAULT_PEN_RENDERER_TYPE;
+
+  init = () => {
+    this.setThickness(DEFAULT_PEN_THICKNESS);
+    this.setPenRendererType(DEFAULT_PEN_RENDERER_TYPE);
+    this.setColor(DEFAULT_PEN_COLOR_NUM);
+  }
 
   constructor() {
     if (_penmanager_instance) return _penmanager_instance;
+    this.init();
   }
 
   /**
@@ -43,29 +60,24 @@ export default class PenManager {
     return _penmanager_instance;
   }
 
-  /**
-   * 
-   */
   public createPen = (): NeoSmartpen => {
     let pen = new NeoSmartpen();
     return pen;
   }
 
-
   /**
-   * 
    * @param pen 
    * @param device 
    */
   public add = (pen: NeoSmartpen, device: BluetoothDevice) => {
     console.log(device);
-    this.penArray.push({
+    const penInfo = {
       id: device.id,
       mac: pen.getMac(),
       pen,
       connected: false
-    });
-
+    }
+    this.penArray.push(penInfo);
     console.log(`PenManager: pen added, mac=${pen.getMac()}`);
   }
 
@@ -81,7 +93,6 @@ export default class PenManager {
   }
 
   /**
-   * 
    * @param pen 
    */
   private removePen = (pen: NeoSmartpen) => {
@@ -98,6 +109,7 @@ export default class PenManager {
   }
 
   setColor(color_num: number) {
+    this.toggleColorRadioButton(color_num);
     this.color = this.colors[color_num];
 
     if (_active_pen) {
@@ -105,6 +117,64 @@ export default class PenManager {
     }
   }
 
+  toggleColorRadioButton(color_num) {
+    var $elem = $(`.color_${color_num}`);
+    this.toggleColorRadioButton_inner(undefined, $elem);
+  }
+
+  toggleColorRadioButton_inner(e, $elem) {
+    if ($elem === undefined) {
+        $elem = $(e.target);
+    }
+    if ($elem.hasClass("color_icon")) {
+        $(".color_icon").each(function (item) {
+          $(item).removeClass("pressed");
+        });
+        $elem.addClass("pressed");
+    }
+  }
+
+  setPenRendererType(type) {
+    var $elem = $("#btn_brush").find(".c2");
+    this.setPenTypeStatus($elem, type);
+
+    this.penRendererType = type;
+
+    if (_active_pen) {
+        _active_pen.setPenRendererType(this.penRendererType);
+    }
+  }
+
+  setPenTypeStatus($elem, type) {
+    if (type == IBrushType.MARKER) {
+        $elem.removeClass("state_0");
+        $elem.removeClass("state_2");
+
+        $elem.addClass("state_1");
+    } else if (type == IBrushType.ERASER) {
+        $elem.removeClass("state_0");
+        $elem.removeClass("state_1");
+
+        $elem.addClass("state_2");
+    } else if (type == IBrushType.PEN) {
+        $elem.removeClass("state_1");
+        $elem.removeClass("state_2");
+
+        $elem.addClass("state_0");
+    }
+  }
+
+  setThickness(thickness: number) {
+    $("#thickness_num").text(thickness);
+
+    thickness = thickness * 2;
+    this.thickness = thickness;
+
+    if (_active_pen) {
+        _active_pen.setThickness(this.thickness);
+    }
+  }
+
   registerRenderContainer = (renderContainer) => {
     this.render.push(renderContainer);
   }
@@ -136,6 +206,8 @@ export default class PenManager {
       console.log("PenManager: something wrong, un-added pen connected");
       this.penArray.push({ id: pen.getBtDevice().id, mac: pen.getMac(), pen, connected: true });
     }
+    const themeManager = ThemeManager.getInstance();
+    themeManager.enablePenRelatedButtons(true);
   }
 
   /**
@@ -154,9 +226,8 @@ export default class PenManager {
       console.log("PenManager: something wrong, un-added pen disconnected");
     }
   }
-
+  
   /**
-   * 
    * @param opt 
    */
   public onNcodeError = (opt: { pen: NeoSmartpen, event: IPenEvent }) => {
diff --git a/src/neosmartpen/pencomm/neosmartpen.ts b/src/neosmartpen/pencomm/neosmartpen.ts
index c8a2f6d..77065e6 100644
--- a/src/neosmartpen/pencomm/neosmartpen.ts
+++ b/src/neosmartpen/pencomm/neosmartpen.ts
@@ -481,6 +481,14 @@ export class NeoSmartpen {
     this.penState[this.penRendererType].color = color;
   }
 
+  setThickness(thickness: number) {
+    this.penState[this.penRendererType].thickness = thickness;
+  }
+
+  setPenRendererType(type) {
+    this.penRendererType = type;
+  }
+  
   /**
    *
    * @param eventName
diff --git a/src/neosmartpen/renderer/pageviewer/PenBasedRenderer.tsx b/src/neosmartpen/renderer/pageviewer/PenBasedRenderer.tsx
index 9497a0b..0b945d6 100644
--- a/src/neosmartpen/renderer/pageviewer/PenBasedRenderer.tsx
+++ b/src/neosmartpen/renderer/pageviewer/PenBasedRenderer.tsx
@@ -121,7 +121,7 @@ export default class PenBasedRenderer extends React.Component<IPenBasedRendererP
 
     this.canvasId = uuidv4();
 
-    this.curr_pens = pens;
+    this.curr_pens = this.state.pens;
     this.propsSize = { scale, width, height };
   }
 
@@ -156,7 +156,7 @@ export default class PenBasedRenderer extends React.Component<IPenBasedRendererP
    * @public
    */
   componentDidMount() {
-    let { pens } = this.props;
+    // let { pens } = this.props;
     let { width, height } = this.propsSize;
 
     const node = this.myRef.current;
@@ -190,7 +190,7 @@ export default class PenBasedRenderer extends React.Component<IPenBasedRendererP
     window.addEventListener("resize", this.resizeListener);
 
     // subscribe all event from pen
-    pens.forEach(pen => {
+    this.state.pens.forEach(pen => {
       console.log(`PenBasedRenderer: componentDidMount, EventSubscribing`);
       this.subscribePenEvent(pen)
     });
@@ -204,9 +204,9 @@ export default class PenBasedRenderer extends React.Component<IPenBasedRendererP
   shouldComponentUpdate(nextProps: IPenBasedRendererProps, nextState: IPenBasedRendererState) {
     let ret_val = true;
 
-    if (nextProps.pens !== this.curr_pens) {
+    if (nextState.pens !== this.curr_pens) {
       /** @type {Array<NeoSmartpen>} */
-      const new_pens = nextProps.pens;
+      const new_pens = nextState.pens;
 
       /** @type {Array<NeoSmartpen>} */
       const curr_pens = this.curr_pens;
@@ -220,9 +220,9 @@ export default class PenBasedRenderer extends React.Component<IPenBasedRendererP
         }
       });
 
-      this.curr_pens = nextProps.pens;
+      this.curr_pens = nextState.pens;
 
-      ret_val = true;
+      ret_val = true; //re-rendering
     }
 
     return ret_val;
@@ -234,7 +234,7 @@ export default class PenBasedRenderer extends React.Component<IPenBasedRendererP
    */
   componentWillUnmount() {
     /** @type {Array.<NeoSmartpen>} */
-    const pens = this.props.pens;
+    const pens = this.state.pens;
     pens.forEach(pen => this.unsubscribePenEvent(pen));
 
     // this.state.renderer.stopInterval();
@@ -388,16 +388,17 @@ export default class PenBasedRenderer extends React.Component<IPenBasedRendererP
 
   render() {
     // const { classes, scaleType, scale } = this.props;
-    const { pens } = this.props;
+    
     const { scale, width, height } = this.propsSize;
     const { section, owner, book, page } = this.state.pageInfo;
-
+    
     const rect = { x: 0, y: 0, width, height };
     // const { rect } = this.state;
     const { penEventCount } = this.state;
     this.size = this.getSize(scale, rect);
-
+    
     const manager = PenManager.getInstance();
+    this.state.pens = manager.penArray.map(penInfo => penInfo.pen);
     let connected_pens = manager.getConnectedPens();
 
     const dpr = getDisplayRatio();
@@ -424,7 +425,7 @@ export default class PenBasedRenderer extends React.Component<IPenBasedRendererP
           }}>
             <div>
               <ul>
-                {pens.map(pen => (
+                {this.state.pens.map(pen => (
                   <li key={pen.mac}>{pen.mac}</li>
                 ))}
               </ul>
diff --git a/src/pages/Home.js b/src/pages/Home.js
index 3eff0ed..6197a53 100644
--- a/src/pages/Home.js
+++ b/src/pages/Home.js
@@ -1,25 +1,27 @@
-import React, { useState } from "react";
+import React, { useState } from 'react';
 import { makeStyles } from '@material-ui/core/styles';
-import { StorageRenderer, PenBasedRenderer, PLAYSTATE } from "../neosmartpen";
-import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from "@material-ui/core";
-import { Button, Box } from "@material-ui/core";
-import NeoPdfViewer from "../neosmartpen/pdf/NeoPdfViewer";
+import { StorageRenderer, PenBasedRenderer, PLAYSTATE } from '../neosmartpen';
+import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@material-ui/core';
+import { Button, Box } from '@material-ui/core';
+import NeoPdfViewer from '../neosmartpen/pdf/NeoPdfViewer';
 import UpperNav from '../components/navbar/UpperNav';
 
-import ConnectButton from '../components/buttons/ConnectButton'
+import PenManager from '../neosmartpen/pencomm/PenManager';
 
-import PenTypeButton from '../components/buttons/PenTypeButton'
-import TrashButton from '../components/buttons/TrashButton'
-import RotateButton from '../components/buttons/RotateButton'
-import BackgroundButton from '../components/buttons/BackgroundButton'
+import ConnectButton from '../components/buttons/ConnectButton';
 
-import FitButton from '../components/buttons/FitButton'
-import ZoomButton from '../components/buttons/ZoomButton'
-import FullScreenButton from '../components/buttons/FullScreenButton'
+import PenTypeButton from '../components/buttons/PenTypeButton';
+import TrashButton from '../components/buttons/TrashButton';
+import RotateButton from '../components/buttons/RotateButton';
+import BackgroundButton from '../components/buttons/BackgroundButton';
 
-import TracePointButton from '../components/buttons/TracePointButton'
+import FitButton from '../components/buttons/FitButton';
+import ZoomButton from '../components/buttons/ZoomButton';
+import FullScreenButton from '../components/buttons/FullScreenButton';
 
-import '../styles/main.css'
+import TracePointButton from '../components/buttons/TracePointButton';
+
+import '../styles/main.css';
 import ColorButtons from '../components/navbar/ColorButtons';
 import PageNumbering from '../components/navbar/PageNumbering';
 import PrintButton from '../components/navbar/PrintButton';
@@ -29,45 +31,50 @@ import CalibrationMenual from '../components/navbar/CalibrationMenual';
 
 import {
   //PenEvent,
-  NeoSmartpen, NeopenInterface, InkStorage, paperInfo, NoteserverClient, PenEventName
-} from "../neosmartpen";
+  NeoSmartpen,
+  NeopenInterface,
+  InkStorage,
+  paperInfo,
+  NoteserverClient,
+  PenEventName,
+} from '../neosmartpen';
 
 const menuStyle = {
   width: '36px',
   height: '36px',
-  padding: '4px'
-}
+  padding: '4px',
+};
 
-function hideAndShowFnc () {
+function hideAndShowFnc() {
   var colorMenu = document.getElementById('color_bar');
   var leftMenu = document.getElementById('leftmenu');
   var navCenter = document.getElementById('navbar_center');
   var navEnd = document.getElementById('navbar_end');
 
-  if (colorMenu.style.display === 'none' && navCenter.style.display === 'none' 
-      && navEnd.style.display === 'none' && leftMenu.style.display === 'none') {
-      colorMenu.style.display = 'block';
-      navCenter.style.display = 'block';
-      navEnd.style.display = 'block';
-      leftMenu.style.display = 'block';
-  }else {
-      colorMenu.style.display = 'none';
-      navCenter.style.display = 'none';
-      navEnd.style.display = 'none';
-      leftMenu.style.display = 'none';
+  if (
+    colorMenu.style.display === 'none' &&
+    navCenter.style.display === 'none' &&
+    navEnd.style.display === 'none' &&
+    leftMenu.style.display === 'none'
+  ) {
+    colorMenu.style.display = 'block';
+    navCenter.style.display = 'block';
+    navEnd.style.display = 'block';
+    leftMenu.style.display = 'block';
+  } else {
+    colorMenu.style.display = 'none';
+    navCenter.style.display = 'none';
+    navEnd.style.display = 'none';
+    leftMenu.style.display = 'none';
   }
-  
 }
 
-const getNoteInfo = (event) => {
+const getNoteInfo = event => {
   // let url = "http://nbs.neolab.net/v1/notebooks/attributes?device=android";
   let note_info = new NoteserverClient();
   note_info.getNoteInfo({});
 };
 
-
-
-
 const useStyles = makeStyles({
   table: {
     minWidth: 480,
@@ -76,6 +83,7 @@ const useStyles = makeStyles({
 
 let _pens = new Array(0);
 let _num_pens = 0;
+let manager = PenManager.getInstance();
 
 const Home = () => {
   const useForceUpdate = () => useState()[1];
@@ -85,61 +93,40 @@ const Home = () => {
   const [num_pens, setNumPens] = useState(0);
   const [pens, setPens] = useState(new Array(0));
 
-
-  /**
-   * @param {{pen:NeoSmartpen, mac:string, event:PenEvent}} e
-   */
-  const onPenConnected = (e) => {
+  const changePenState = e => {
     const pen = e.pen;
-    console.log(`Home: onPenConnected, mac=${pen.getMac()}`);
-
-    setPens([..._pens]);
-
-    _num_pens++;
-    setNumPens(_num_pens);
-  };
-
-  /**
-   * @param {{pen:NeoSmartpen, mac:string, event:PenEvent}} e
-   */
-  const onPenDisonnected = (e) => {
-    const pen = e.pen;
-    const mac = pen.getMac();
-    console.log(`Home: OnPenDisconnected, mac=${pen.getMac()}`);
-
-    const index = _pens.findIndex(p => p.getMac() === mac);
-
-    if (index > -1) {
-      _pens.splice(index, 1);
+    if (e.event.event === 'on_connected') {
+      _pens.push(pen);
       setPens([..._pens]);
 
-      _num_pens--;
+      _num_pens++;
       setNumPens(_num_pens);
-    }
-  };
+    } else if (e.event.event === 'on_disconnected') {
+      const mac = pen.getMac();
+      console.log(`Home: OnPenDisconnected, mac=${pen.getMac()}`);
 
-  /**
-   * @param {*} event
-   */
-  const handleConnectPen = (event) => {
-    let new_pen = new NeoSmartpen();
+      const index = _pens.findIndex(p => p.getMac() === mac);
 
-    if (new_pen.connect()) {
-      new_pen.addEventListener(PenEventName.ON_CONNECTED, onPenConnected);
-      new_pen.addEventListener(PenEventName.ON_DISCONNECTED, onPenDisonnected);
+      if (index > -1) {
+        _pens.splice(index, 1);
+        setPens([..._pens]);
 
-      _pens.push(new_pen);
+        _num_pens--;
+        setNumPens(_num_pens);
+      }
     }
+
+    manager.init();
   };
 
   const tempStyle = {
-    position: "absolute",
-    height: "100%",
-    width: "100%",
-    left: "0px",
-    top: "0px",
-    overflow: "hidden",
-  }
+    position: 'absolute',
+    height: '100%',
+    width: '100%',
+    left: '0px',
+    top: '0px',
+    overflow: 'hidden',
+  };
 
   return (
     <div>
@@ -147,30 +134,33 @@ const Home = () => {
         <UpperNav />
       </div>
 
-      <div style={{
-        position: "absolute",
-        display: "flex", flexDirection: "row-reverse",
-        alignItems: "center",
-        left: "0px", top: "0px",
-        width: "100%", height: "40px",
-        zIndex: 100,
-      }}>
+      <div
+        style={{
+          position: 'absolute',
+          display: 'flex',
+          flexDirection: 'row-reverse',
+          alignItems: 'center',
+          left: '0px',
+          top: '0px',
+          width: '100%',
+          height: '40px',
+          zIndex: 100,
+        }}>
         {/* Connect a pen */}
-        <div style={{ fontSize: "20px", fontWeight: "bold" }}>
-          <Button variant="outlined" color="primary" onClick={(event) => handleConnectPen(event)} >
-            <Box fontSize={14} fontWeight="fontWeightBold" >Connect</Box>
+        {/* <div style={{ fontSize: '20px', fontWeight: 'bold' }}>
+          <Button variant="outlined" color="primary" onClick={event => handleConnectPen(event)}>
+            <Box fontSize={14} fontWeight="fontWeightBold">
+              Connect
+            </Box>
           </Button>
-        </div>
+        </div> */}
         <div style={{ flex: 1 }}></div>
 
-        <div style={{ fontSize: "20px", fontWeight: "bold" }}>
-          Pen Connected: {num_pens}
-        </div>
+        {/* <div style={{ fontSize: '20px', fontWeight: 'bold' }}>Pen Connected: {num_pens}</div> */}
 
-        <div style={{ flex: 8 }}>
-        </div>
+        <div style={{ flex: 8 }}></div>
       </div>
-      
+
       <nav id="colornav" className="navbar fixed-bottom navbar-light bg-transparent">
         <div className="d-flex flex-row bd-highlight mb-3">
           <div className="navbar-menu d-flex justify-content-end align-items-end neo_shadow">
@@ -212,42 +202,48 @@ const Home = () => {
         </div>
       </div>  */}
 
-      <div style={{
-        // position: "absolute",
-        left: "0px", top: "0px",
-        flexDirection: "row-reverse", display: "flex",
-        width: "100%", height: "40px",
-        alignItems: "center",
-        zIndex: 1,
-      }}>
+      <div
+        style={{
+          // position: "absolute",
+          left: '0px',
+          top: '0px',
+          flexDirection: 'row-reverse',
+          display: 'flex',
+          width: '100%',
+          height: '40px',
+          alignItems: 'center',
+          zIndex: 1,
+        }}>
         <div class="d-flex flex-column h-100">
-        <div style={tempStyle}>
-          <NeoPdfViewer url={"./mixed_output.pdf"} />
-        </div>
-        
-        <div id="leftmenu" class="main-container flex-grow-1">
+          <div style={tempStyle}>
+            <NeoPdfViewer url={'./mixed_output.pdf'} />
+          </div>
+
+          <div id="leftmenu" class="main-container flex-grow-1">
             <div id="menu-wide" class="d-flex menu-container float-left h-100">
-              <div className="d-flex flex-column justify-content-between" style = {{zIndex: 1030}}>
-                <ConnectButton/>
-                <div className="btn-group-vertical neo_shadow" style = {{ marginBottom: 10 }}>
-                  <div className="btn-group dropright" role="group">
-                    <PenTypeButton/>
-                  </div>
-                  <TrashButton/><RotateButton/><BackgroundButton/>
+              <div className="d-flex flex-column justify-content-between" style={{ zIndex: 1030 }}>
+                <ConnectButton changeParentState={e => changePenState(e)} />
+                <div className="btn-group-vertical neo_shadow" style={{ marginBottom: 10 }}>
+                  <PenTypeButton />
+                  <TrashButton />
+                  <RotateButton />
+                  <BackgroundButton />
                 </div>
-                <div class="btn-group-vertical neo_shadow" style = {{ marginBottom: 10 }}>
-                  <FitButton/><ZoomButton/><FullScreenButton/>
+                <div class="btn-group-vertical neo_shadow" style={{ marginBottom: 10 }}>
+                  <FitButton />
+                  <ZoomButton />
+                  <FullScreenButton />
                 </div>
-                <div class="btn-group-vertical neo_shadow" style = {{ marginBottom: 10 }}>
-                  <TracePointButton/>
+                <div class="btn-group-vertical neo_shadow" style={{ marginBottom: 10 }}>
+                  <TracePointButton />
                 </div>
               </div>
             </div>
-        </div>
+          </div>
 
-        <div style={tempStyle}>
-          <PenBasedRenderer scale={1} pageId={"0.0.0.0"} playState={PLAYSTATE.live} pens={pens} />
-        </div>
+          <div style={tempStyle}>
+            <PenBasedRenderer scale={1} pageId={'0.0.0.0'} playState={PLAYSTATE.live} />
+          </div>
         </div>
       </div>
 
@@ -266,8 +262,7 @@ const Home = () => {
           </TableBody>
         </Table>
       </TableContainer> */}
-
-    </div >
+    </div>
   );
 };
 
